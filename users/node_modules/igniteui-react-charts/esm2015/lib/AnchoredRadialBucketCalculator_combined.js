/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { markType, Point_$type, enumGetBox, typeCast, markDep } from "igniteui-react-core";
import { isNaN_, intDivide, isInfinity } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { RadialFrame } from "./RadialFrame";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { NumericAxisBase } from "./NumericAxisBase";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { RadialBaseView } from "./RadialBaseView";
import { CollisionAvoider } from "./CollisionAvoider";
import { Clipper } from "igniteui-react-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let AnchoredRadialBucketCalculator = /*@__PURE__*/ (() => {
    class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = this.f.cs.nz;
            let c = Math.min(a * this.b, b.count - 1);
            let d = Math.min(c + this.b - 1, b.count - 1);
            let e = NaN;
            let f = NaN;
            for (let g = c; g <= d; ++g) {
                let h = b.item(g);
                if (!isNaN_(e)) {
                    if (!isNaN_(h)) {
                        e = Math.min(e, h);
                        f = Math.max(f, h);
                    }
                }
                else {
                    e = h;
                    f = h;
                }
            }
            if (!isNaN_(e)) {
                return [0.5 * (c + d), e, f];
            }
            return [0.5 * (c + d), NaN, NaN];
        }
    }
    AnchoredRadialBucketCalculator.$t = /*@__PURE__*/ markType(AnchoredRadialBucketCalculator, 'AnchoredRadialBucketCalculator', RadialBucketCalculator.$);
    return AnchoredRadialBucketCalculator;
})();
/**
 * @hidden
 */
export let AnchoredRadialSeries = /*@__PURE__*/ (() => {
    class AnchoredRadialSeries extends RadialBase {
        constructor() {
            super();
            this.nu = null;
            this.ny = null;
            this.os = { $type: Point_$type, x: 0, y: 0 };
            this.nw = null;
            this.nv = null;
            this.nw = new RadialFrame(3);
            this.nu = new CategoryLineRasterizer();
        }
        bf() {
            return new AnchoredRadialSeriesView(this);
        }
        hu() {
            super.hu();
            this.m4 = null;
            this.m6 = null;
        }
        fs(a, b) {
            let c = this.gv(b);
            if (c == AnchoredRadialSeries.$$p[0]) {
                return this.ft(a, b, this.ob);
            }
            return super.fs(a, b);
        }
        iv(a) {
            super.iv(a);
            this.nt = a;
        }
        fe(a, b) {
            return this.ff(a, b, this.m4, null, this.nz);
        }
        fc(a, b) {
            return this.fd(a, b, this.m4, null, this.nz);
        }
        d9(a, b, c, d, e) {
            if (this.nz == null) {
                return Number.POSITIVE_INFINITY;
            }
            return this.ea(a, b, this.m4, d, e, this.nz.count, null);
        }
        en(a, b, c) {
            let d = this.getEffectiveViewport1(this.bi);
            let e = this.n4(this.m4, this.bi.bs, this.bi.br, d);
            let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.m4.ca, d);
            f.c = this.bs.m5;
            return this.ep(this.nz, a, this.m4, f, e, null, b, c);
        }
        lm(a, b, c) {
            if (this.m6 == null || this.m4 == null || this.bi == null || this.bi.bs.isEmpty || this.bi.br.isEmpty) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let d = this.getEffectiveViewport1(this.bi);
            let e = new ScalerParams(0, this.bi.bs, this.bi.br, this.m6.ca, d);
            e.c = this.getEffectiveViewport1(this.bi);
            let f = this.en(a, b, c);
            f = this.m6.dy(f, e);
            let g = this.m7.c(a);
            if (!b && this.m4 != null) {
                let h = this.fe(a, c);
                let i = this.fc(a, c);
                let j = this.n4(this.m4, this.bi.bs, this.bi.br, d);
                let k = new ScalerParams(0, this.bi.bs, this.bi.br, this.m4.ca, d);
                k.c = this.bs.m5;
                let l = this.d9(a, h, this.m4, k, j);
                let m = this.d9(a, i, this.m4, k, j);
                if (m <= l) {
                    g = this.m4.dy(i, k) + j;
                }
                else {
                    g = this.m4.dy(h, k) + j;
                }
            }
            let n = this.m7.d(g, f, this.bi.bs, this.bi.br);
            let o = this.m7.e(g, f, this.bi.bs, this.bi.br);
            return { $type: Point_$type, x: n, y: o };
        }
        get nz() {
            return this.ny;
        }
        set nz(a) {
            if (this.ny != a) {
                let b = this.ny;
                this.ny = a;
                this.raisePropertyChanged("ValueColumn", b, this.ny);
            }
        }
        get oo() {
            return this.c(AnchoredRadialSeries.of);
        }
        set oo(a) {
            this.h(AnchoredRadialSeries.of, a);
        }
        an(a) {
            if (a != null && a == this.m4 && this.nz != null && this.nz.count > 0) {
                return new AxisRange(0, this.nz.count - 1);
            }
            if (a != null && a == this.m6 && this.nz != null && this.nz.count > 0) {
                return new AxisRange(this.nz.minimum, this.nz.maximum);
            }
            return null;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            if (this.nt.ct.g$b(a, b, c, d)) {
                this.je(false);
                this.il();
            }
            let e = typeCast(NumericAxisBase.$, this.m6);
            switch (b) {
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) !== null) {
                        c.deregisterColumn(this.nz);
                        this.nz = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) !== null) {
                        this.nz = this.bw(this.ob);
                        this.nt.co.e(this.eu);
                    }
                    if (e != null && !e.cn()) {
                        this.nt.co.e(this.eu);
                        this.je(false);
                    }
                    break;
                case AnchoredRadialSeries.$$p[0]:
                    if (this.bz != null) {
                        this.bz.deregisterColumn(this.nz);
                        this.nz = this.bw(this.ob);
                    }
                    break;
                case "ValueColumn":
                    if (e != null && !e.cn()) {
                        this.nt.co.e(this.eu);
                        this.je(false);
                    }
                    break;
                case "TrendLineBrush":
                    this.jp();
                    break;
                case "TrendLineType":
                    this.il();
                    break;
            }
        }
        hz(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.nt.co.e(this.eu);
                    break;
            }
            this.nt.ct.g$e(a, b, c, d);
            switch (a) {
                case 4:
                    if (this.m6 != null && !this.m6.cn()) {
                        this.je(true);
                    }
                    break;
                case 1:
                    if (this.m6 != null && !this.m6.cn()) {
                        this.je(true);
                    }
                    break;
                case 0:
                    if (this.m6 != null && !this.m6.cn()) {
                        this.je(true);
                    }
                    break;
                case 2:
                    if (this.ob != null && this.nt.co.b > 0 && this.m6 != null && !this.m6.cn()) {
                        this.je(true);
                    }
                    break;
                case 3:
                    if (d == this.ob) {
                        if (this.m6 != null && !this.m6.cn()) {
                            this.je(true);
                        }
                    }
                    break;
            }
        }
        dw(a, b, c) {
            let d = super.dw(a, b, c);
            let e = c;
            if (this.bz == null || this.bz.count == 0 || this.m4 == null || this.nz == null || this.m4.j6 == 0 || this.m6 == null || isInfinity(this.m6.kb) || isInfinity(this.m6.ka) || e.co.b < 1) {
                d = false;
            }
            return d;
        }
        getOffsetValue() {
            return this.n4(this.m4, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        getCategoryWidth() {
            return this.m4.getCategorySize(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
        }
        get_n2() {
            return false;
        }
        get n2() {
            return this.get_n2();
        }
        n4(a, b, c, d) {
            let e = 0;
            let f = this.preferredCategoryMode(a);
            if (f == 0 && a.categoryMode != 0) {
                f = 1;
            }
            switch (f) {
                case 0:
                    e = 0;
                    break;
                case 1:
                    e = 0.5 * a.getCategorySize(b, c, d);
                    break;
                case 2:
                    e = a.getGroupCenter(this.ni(), b, c, d);
                    break;
            }
            if (a.ca) {
                e = -e;
            }
            return e;
        }
        nn(a, b) {
            let c = b.bs;
            let d = b.br;
            let e = this.getEffectiveViewport1(b);
            let f = this.m4;
            let g = this.m6;
            let h = g.kb;
            let i = g.ka;
            a.f.clear();
            a.m.clear();
            a.p.clear();
            let j = this.l4();
            let k = 0;
            let l = b;
            let m = new CollisionAvoider();
            let n = 0;
            let o = b.co.d;
            n = this.n4(f, c, d, e);
            l.ct.i = this.m6.lq;
            l.ct.h = this.m6.lp;
            l.ct.j = (p, q) => this.n5(p, q, c, d);
            l.ct.k = (p, q) => this.n6(p, q, c, d);
            let p = ((() => {
                let $ret = new Clipper(0, d, false);
                $ret.i = a.p;
                return $ret;
            })());
            let q = ((() => {
                let $ret = new TrendResolutionParams();
                $ret.c = b.co.b;
                $ret.d = b.co.c;
                $ret.e = o;
                $ret.a = n;
                $ret.b = this.eu;
                $ret.f = d;
                $ret.g = c;
                return $ret;
            })());
            l.ct.l(a.p, this.nx, this.nz, this.n8, (r) => this.m4.getScaledAngle(r), (r) => this.m6.lw(r), q, p);
            let r = true;
            if (this.n3(b)) {
                o--;
            }
            for (let s = b.co.c; s <= o; ++s) {
                let t = s;
                if (t * b.co.b >= this.m4.j6) {
                    t -= intDivide((this.m4.j6), b.co.b);
                }
                let u = b.co.getBucket(t);
                if (!isNaN_(u[0])) {
                    u[0] = f.getScaledAngle(u[0]) + n;
                    if (u[1] < h || u[1] > i) {
                        continue;
                    }
                    u[1] = g.lw(u[1]);
                    if (b.co.b > 1) {
                        if (u[2] < h || u[2] > i) {
                            continue;
                        }
                        u[2] = g.lw(u[2]);
                    }
                    else {
                        u[2] = u[1];
                    }
                    if ((isNaN_(u[1]) || isNaN_(u[2])) && r && this.n2 && this.n1()) {
                        o++;
                    }
                    else {
                        r = false;
                    }
                    a.f.add(u);
                    if (j) {
                        let v = Math.min(t * b.co.b, this.bz.count - 1);
                        let w = this.m7.d(u[0], u[1], c, d);
                        let x = this.m7.e(u[0], u[1], c, d);
                        let y = new Rect(0, w - 5, x - 5, 11, 11);
                        if (!isNaN_(w) && !isNaN_(x) && !isInfinity(w) && !isInfinity(x) && m.tryAdd(y)) {
                            a.m.add({ $type: Point_$type, x: w, y: x });
                            let z = b.cp.item(k);
                            z.ak = v;
                            z.content.item = this.bz.item(v);
                            ++k;
                        }
                    }
                }
                else {
                    if (r && this.n2 && this.n1()) {
                        o++;
                    }
                }
            }
            b.cp.count = k;
            return;
        }
        n5(a, b, c, d) {
            return this.m7.d(a, b, c, d);
        }
        n6(a, b, c, d) {
            return this.m7.e(a, b, c, d);
        }
        n3(a) {
            let b = a;
            return !this.n2 && b.co.c == 0 && b.co.d == this.m4.j6;
        }
        ns(a, b, c) {
            let d = null;
            let e = c.bs;
            let f = c.br;
            if (b > -1 && !e.isEmpty && !f.isEmpty) {
                let g = a._inner[0][0] < f.left - 2000 ? f.left - 10 : NaN;
                let h = f.bottom + 10;
                let i = a._inner[b][0] > f.right + 2000 ? f.right + 10 : NaN;
                let j = f.top - 10;
                d = new Clipper(1, g, h, i, j, false);
            }
            return d;
        }
        oe(a, b, c, d, e) {
            if (a.count > 0 && d.count > 0) {
                if (!e || this.n0()) {
                    a.add(this.os);
                    a.add(a._inner[0]);
                    d.add(this.os);
                    d.add(d._inner[0]);
                }
            }
        }
        n1() {
            return !this.n0();
        }
        n0() {
            let a = this.bi.bs;
            return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
        }
        hw(a, b) {
            super.hw(a, b);
            let c = b;
            if (a) {
                c.cp.clear();
            }
            c.ct.g$d();
        }
        no(a, b) {
            let c = b.bs;
            let d = b.br;
            let e = this.getEffectiveViewport1(b);
            let f = this.lr(b);
            let g = b;
            g.ct.g$g(a.p);
            CategoryMarkerManager.b(this, a.m, g.cp, this.l6);
            g.cj();
            this.od(d, c, e, f, g);
        }
        od(a, b, c, d, e) {
            e.cu(a, b, c, d);
        }
        jp() {
            super.jp();
            if (this.fh < 0) {
                return;
            }
            this.nt.cv();
        }
        fv(a, b) {
            if (a == this.nt.ct.g$j) {
                return null;
            }
            return super.fv(a, b);
        }
        c9(a) {
            let b = this.bi.bs;
            b = b.copy();
            let c = this.bi.br;
            let d = !b.isEmpty && !c.isEmpty && this.bz != null ? this.bz.indexOf(a) : -1;
            if (this.m4 == null || this.nz == null || this.m6 == null) {
                return false;
            }
            if (d < 0 || d > this.nz.count - 1) {
                return false;
            }
            let e = this.m4.getScaledAngle(d);
            let f = this.m6.lw(this.nz.item(d));
            if (isNaN_(f)) {
                f = (this.m6.lp + this.m6.lq) / 2;
            }
            let g = 0.5 + (Math.cos(e) * f);
            let h = 0.5 + (Math.sin(e) * f);
            if (!isNaN_(g)) {
                if (g < b.left + 0.1 * b.width) {
                    g = g + 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
                if (g > b.right - 0.1 * b.width) {
                    g = g - 0.4 * b.width;
                    b.x = g - 0.5 * b.width;
                }
            }
            if (!isNaN_(h)) {
                if (h < b.top + 0.1 * b.height) {
                    h = h + 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
                if (h > b.bottom - 0.1 * b.height) {
                    h = h - 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
            }
            if (this.bn != null) {
                this.bn.ap(this.bs, b, true);
            }
            return d >= 0;
        }
        jg(a, b) {
            super.jg(a, b);
            if (!this.dl) {
                this.bi.az(b);
                return;
            }
            this.bi.az(b);
            let c = typeCast(AnchoredRadialSeriesView.$, this.bh);
            c.co.e(this.eu);
            if (this.cc(this.bh)) {
                return;
            }
            if (!this.df) {
                this.nw = new RadialFrame(3);
                this.nn(this.nw, c);
            }
            this.df = false;
            this.no(this.nw, c);
            this.dl = false;
        }
        jd(a, b, c, d, e) {
            super.jd(a, b, c, d, e);
            let f = this.a0.a$h.item(d);
            let g = f;
            g.co.e(this.eu);
            f.ay(c);
            if (this.cc(g)) {
                return;
            }
            if (this.nv == null) {
                this.nv = new RadialFrame(3);
            }
            this.nv.u();
            this.nn(this.nv, g);
            this.no(this.nv, g);
        }
        h5(a) {
            super.h5(a);
            this.a2.exportTrendlineData(this, a, this.nt.ct.g$j);
        }
    }
    AnchoredRadialSeries.$t = /*@__PURE__*/ markType(AnchoredRadialSeries, 'AnchoredRadialSeries', RadialBase.$);
    AnchoredRadialSeries.of = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredRadialSeries.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    AnchoredRadialSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AnchoredRadialSeries, 'raisePropertyChanged', ['ValueMemberPath:ob:on', [2, null], 'TrendLineType:nx:ol', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness:n7:ok', [1, 1.5], 'TrendLinePeriod:n8:oj', [1, 7], 'TrendLineZIndex:n9:om', [1, 1], 'TrendLineBrush:op:og', [Brush.$, null], 'TrendLineDashArray:oq:oh', [DoubleCollection.$], 'TrendLineDashCap:or:oi', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredRadialSeries;
})();
/**
 * @hidden
 */
export let AnchoredRadialSeriesView = /*@__PURE__*/ (() => {
    class AnchoredRadialSeriesView extends RadialBaseView {
        constructor(a) {
            super(a);
            this.cs = null;
            this.ct = null;
            this.co = new AnchoredRadialBucketCalculator(this);
            this.cs = a;
            this.ct = new RadialTrendLineManager();
        }
        cu(a, b, c, d) {
        }
        cv() {
            this.cs.oo = null;
            if (this.cs.op != null) {
                this.cs.oo = this.cs.op;
            }
            else {
                this.cs.oo = this.cs.k4;
            }
        }
        a2(a, b) {
            if (a.d) {
                if (!b) {
                }
                if (this.cs.nx != 0 && !b) {
                    let c = this.ct.g$j;
                    c.ac = this.cs.n7;
                    c._stroke = this.cs.oo;
                    c.ai = this.cs.oq;
                    c.ad = this.cs.or;
                    a.u(c);
                }
            }
            super.a2(a, b);
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            if (this.cs.m4.e9 != null) {
                a += "<span>${item." + this.cs.m4.e9 + "}</span><br/>";
            }
            a += "<span";
            let b = this.e.a0.a$q(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.cs.fx + ": </span><span class='ui-priority-primary'>" + "${item." + this.cs.ob + "}</span></div>";
            return a;
        }
    }
    AnchoredRadialSeriesView.$t = /*@__PURE__*/ markType(AnchoredRadialSeriesView, 'AnchoredRadialSeriesView', RadialBaseView.$);
    return AnchoredRadialSeriesView;
})();
//# sourceMappingURL=AnchoredRadialBucketCalculator_combined.js.map
