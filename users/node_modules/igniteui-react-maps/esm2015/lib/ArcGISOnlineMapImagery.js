/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicMapImagery } from "./GeographicMapImagery";
import { DependencyProperty } from "igniteui-react-core";
import { ArcGISOnlineTileSource } from "igniteui-react-core";
import { String_$type, Boolean_$type, typeCast, markType } from "igniteui-react-core";
import { Uri } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { HttpRequestUtil } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringRemove } from "igniteui-react-core";
import { stringFormat1, stringFormat } from "igniteui-react-core";
/**
 * @hidden
 */
export let ArcGISOnlineMapImagery = /*@__PURE__*/ (() => {
    class ArcGISOnlineMapImagery extends GeographicMapImagery {
        constructor() {
            super(new ArcGISOnlineTileSource());
            this.bm = 0;
            this.br = null;
            this.bq = null;
            this._pendingTokenRequest_ = null;
            this._pendingMapServerRequest_ = null;
            this.bq = "localhost";
            this.br = "https://www.arcgis.com/sharing/";
            this.bm = 60;
            this.userToken = null;
            this.getResponseCompleted_MapServerResponse = this.getResponseCompleted_MapServerResponse.bind(this);
            this.getResponseCompleted_TokenResponse = this.getResponseCompleted_TokenResponse.bind(this);
        }
        get mapServerUri() {
            return this.c(ArcGISOnlineMapImagery.mapServerUriProperty);
        }
        set mapServerUri(a) {
            this.h(ArcGISOnlineMapImagery.mapServerUriProperty, a);
        }
        static ca(a, b) {
            a.cc("MapServerUri", b.oldValue, b.newValue);
        }
        get userName() {
            return this.c(ArcGISOnlineMapImagery.userNameProperty);
        }
        set userName(a) {
            this.h(ArcGISOnlineMapImagery.userNameProperty, a);
        }
        static cd(a, b) {
            a.cc("UserName", b.oldValue, b.newValue);
        }
        get password() {
            return this.c(ArcGISOnlineMapImagery.passwordProperty);
        }
        set password(a) {
            this.h(ArcGISOnlineMapImagery.passwordProperty, a);
        }
        static cb(a, b) {
            a.cc("Password", b.oldValue, b.newValue);
        }
        get userToken() {
            return this.c(ArcGISOnlineMapImagery.userTokenProperty);
        }
        set userToken(a) {
            this.h(ArcGISOnlineMapImagery.userTokenProperty, a);
        }
        static ce(a, b) {
            a.cc("UserToken", b.oldValue, b.newValue);
        }
        get isMapPublic() {
            return this.c(ArcGISOnlineMapImagery.isMapPublicProperty);
        }
        set isMapPublic(a) {
            this.h(ArcGISOnlineMapImagery.isMapPublicProperty, a);
        }
        static b9(a, b) {
            a.cc("IsMapPublic", b.oldValue, b.newValue);
        }
        get defaultTokenTimeout() {
            return this.bm;
        }
        set defaultTokenTimeout(a) {
            this.bm = a;
            this.b5(true);
        }
        get tokenGenerationEndPoint() {
            return this.br;
        }
        set tokenGenerationEndPoint(a) {
            this.br = a;
            this.b5(true);
        }
        get refererUri() {
            return this.bq;
        }
        set refererUri(a) {
            this.bq = a;
            this.b5(true);
        }
        acquireNewToken() {
            this.b5(true);
        }
        b6(a) {
            a();
        }
        b5(a) {
            if (stringIsNullOrEmpty(this.userToken) && a == false) {
                this.cf();
                return;
            }
            let b = this.tokenGenerationEndPoint;
            if (stringIsNullOrEmpty(b)) {
                this.userToken = "";
                return;
            }
            if (b.substr(b.length - 1, 1) != "/") {
                b += "/";
            }
            if (stringIsNullOrEmpty(this.refererUri)) {
                this.userToken = "";
                return;
            }
            let c = this.defaultTokenTimeout;
            if (c < 1) {
                c = 1;
            }
            b += stringFormat1(ArcGISOnlineMapImagery.bs, this.userName, this.password, this.refererUri, c);
            if (!Uri.isWellFormedUriString(b, 1)) {
                this.userToken = "";
                return;
            }
            let url_ = b;
            this._pendingTokenRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted_TokenResponse, null);
        }
        cf() {
            if (stringIsNullOrEmpty(this.mapServerUri)) {
                return;
            }
            let a = this.mapServerUri;
            if (a.substr(a.length - 1, 1) == "/") {
                stringRemove(a, a.length - 1, 1);
            }
            if (!this.isMapPublic) {
                if (stringIsNullOrEmpty(this.userToken)) {
                    return;
                }
                a = stringFormat("{0}?f=json&token={1}", a, this.userToken);
            }
            else {
                a = stringFormat("{0}?f=json", a);
            }
            if (!Uri.isWellFormedUriString(a, 1)) {
                return;
            }
            let url_ = a;
            this._pendingMapServerRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted_MapServerResponse, null);
        }
        getResponseCompleted_TokenResponse(a, b) {
            if (b != this._pendingTokenRequest_) {
                return;
            }
            this._pendingTokenRequest_ = null;
            let data_ = a;
            let c = (JSON.parse(data_));
            if (c != null) {
                let d = "";
                if (c.token != null) {
                    d = c.token;
                }
                this.userToken = d;
            }
        }
        getResponseCompleted_MapServerResponse(a, b) {
            if (b != this._pendingMapServerRequest_) {
                return;
            }
            this._pendingMapServerRequest_ = null;
            let data_ = a;
            let c = (JSON.parse(data_));
            if ((c != null) && (c.tileInfo != null)) {
                this.ap.levelOfDetail = c.tileInfo.lods.length;
            }
        }
        cc(a, b, c) {
            let d = typeCast(ArcGISOnlineTileSource.$, this.ap);
            switch (a) {
                case "MapServerUri":
                    if (d != null) {
                        d.mapServerUri = typeCast(String_$type, c);
                    }
                    this.cf();
                    break;
                case "UserName":
                case "Password":
                    if (stringIsNullOrEmpty(this.userName) || stringIsNullOrEmpty(this.password)) {
                        return;
                    }
                    this.b5(true);
                    break;
                case "UserToken":
                    this.b6(() => d.userToken = this.userToken);
                    this.cf();
                    break;
                case "IsMapPublic":
                    d.isMapPublic = this.isMapPublic;
                    break;
            }
            super.a8(a, b, c);
        }
    }
    ArcGISOnlineMapImagery.$t = /*@__PURE__*/ markType(ArcGISOnlineMapImagery, 'ArcGISOnlineMapImagery', GeographicMapImagery.$);
    ArcGISOnlineMapImagery.bs = "generateToken?username={0}&password={1}&client=referer&referer={2}&expiration={3}&f=pjson";
    ArcGISOnlineMapImagery.mapServerUriProperty = /*@__PURE__*/ DependencyProperty.i("MapServerUri", String_$type, ArcGISOnlineMapImagery.$, /*@__PURE__*/ new PropertyMetadata(2, null, ArcGISOnlineMapImagery.ca));
    ArcGISOnlineMapImagery.userNameProperty = /*@__PURE__*/ DependencyProperty.i("UserName", String_$type, ArcGISOnlineMapImagery.$, /*@__PURE__*/ new PropertyMetadata(2, null, ArcGISOnlineMapImagery.cd));
    ArcGISOnlineMapImagery.passwordProperty = /*@__PURE__*/ DependencyProperty.i("Password", String_$type, ArcGISOnlineMapImagery.$, /*@__PURE__*/ new PropertyMetadata(2, null, ArcGISOnlineMapImagery.cb));
    ArcGISOnlineMapImagery.userTokenProperty = /*@__PURE__*/ DependencyProperty.i("UserToken", String_$type, ArcGISOnlineMapImagery.$, /*@__PURE__*/ new PropertyMetadata(2, null, ArcGISOnlineMapImagery.ce));
    ArcGISOnlineMapImagery.isMapPublicProperty = /*@__PURE__*/ DependencyProperty.i("IsMapPublic", Boolean_$type, ArcGISOnlineMapImagery.$, /*@__PURE__*/ new PropertyMetadata(2, true, ArcGISOnlineMapImagery.b9));
    return ArcGISOnlineMapImagery;
})();
//# sourceMappingURL=ArcGISOnlineMapImagery.js.map
