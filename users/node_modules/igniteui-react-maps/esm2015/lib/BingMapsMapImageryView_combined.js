/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicMapImageryView } from "./GeographicMapImageryView";
import { SubDomainsCollection } from "./SubDomainsCollection";
import { GeographicMapImagery } from "./GeographicMapImagery";
import { BingMapsTileSource } from "igniteui-react-core";
import { markType, String_$type, enumGetBox, runOn, delegateRemove, delegateCombine, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { BingMapsImageryStyle_$type } from "./BingMapsImageryStyle";
import { List$1 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { HttpRequestUtil } from "igniteui-react-core";
import { Uri } from "igniteui-react-core";
import { stringEmpty, stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let BingMapsMapImageryView = /*@__PURE__*/ (() => {
    class BingMapsMapImageryView extends GeographicMapImageryView {
        constructor(a) {
            super(a);
            this.k = a;
        }
        m() {
            if (this.k.subDomains == null) {
                this.k.subDomains = new SubDomainsCollection(0);
            }
            this.k.ap.tilePath = this.k.actualTilePath;
            this.k.ap.subDomains = this.k.actualSubDomains;
            this.k.ap.cultureName = this.k.cultureName;
        }
        o() {
            this.k.ap.tilePath = this.k.actualTilePath;
        }
        l() {
            this.k.ap.cultureName = this.k.cultureName;
        }
        n() {
            this.k.ap.subDomains = this.k.actualSubDomains;
        }
    }
    BingMapsMapImageryView.$t = /*@__PURE__*/ markType(BingMapsMapImageryView, 'BingMapsMapImageryView', GeographicMapImageryView.$);
    return BingMapsMapImageryView;
})();
/**
 * @hidden
 */
export let BingMapsMapImagery = /*@__PURE__*/ (() => {
    class BingMapsMapImagery extends GeographicMapImagery {
        constructor() {
            super(new BingMapsTileSource(0));
            this._pendingBingRequest_ = null;
            this._isInitialized = false;
            this.bw = null;
            this.bn = null;
            this.bx = null;
            this.bv = null;
            this.getResponseCompleted = this.getResponseCompleted.bind(this);
            this.bm.m();
            this.actualBingImageryRestUri = BingMapsMapImagery.b9;
        }
        ai() {
            return new BingMapsMapImageryView(this);
        }
        a9(a) {
            super.a9(a);
            this.bm = a;
        }
        get isInitialized() {
            return this._isInitialized;
        }
        set isInitialized(a) {
            this._isInitialized = a;
        }
        get actualTilePath() {
            return this.bw;
        }
        set actualTilePath(a) {
            let b = this.bw;
            this.bw = a;
            this.cj("ActualTilePath", b, this.bw);
        }
        get actualSubDomains() {
            return this.bn;
        }
        set actualSubDomains(a) {
            let b = this.bn;
            this.bn = a;
            this.cj("ActualSubDomains", b, this.bn);
        }
        get bingImageryRestUri() {
            return this.bx;
        }
        set bingImageryRestUri(a) {
            let b = this.bx;
            this.bx = a;
            this.cj("BingImageryRestUri", b, this.bx);
        }
        get actualBingImageryRestUri() {
            return this.bv;
        }
        set actualBingImageryRestUri(a) {
            let b = this.bv;
            this.bv = a;
            this.a8("ActualBingImageryRestUri", b, this.bv);
        }
        requestMapSettings() {
            this.cl(true);
        }
        cl(a) {
            this.ci(a);
        }
        bt() {
            if ((this.tilePath == null) && (this.subDomains == null)) {
                return true;
            }
            return false;
        }
        cn() {
            this.isInitialized = false;
            if (!this.bs()) {
                this.cm("", null);
                return;
            }
            if (!this.isDeferredLoad) {
                this.cl(false);
            }
        }
        bs() {
            if (stringIsNullOrEmpty(this.apiKey) || this.apiKey.length < 20) {
                return false;
            }
            return true;
        }
        cg() {
        }
        cm(a, b) {
            if (a != this.actualTilePath) {
                this.actualTilePath = a;
            }
            let c = b == null ? null : new SubDomainsCollection(1, b);
            if (this.actualSubDomains != c) {
                this.actualSubDomains = c;
            }
            this.bm.m();
        }
        ci(a) {
            if ((!a) && (this.isDeferredLoad)) {
                return;
            }
            if (!this.bs()) {
                this.isInitialized = false;
                this.cm("", null);
                return;
            }
            this.isInitialized = true;
            let b = null;
            if (this.bingImageryRestUri != null) {
                if (Uri.isWellFormedUriString(this.bingImageryRestUri, 1)) {
                    b = this.bingImageryRestUri;
                }
            }
            else {
                if (Uri.isWellFormedUriString(this.actualBingImageryRestUri, 1)) {
                    b = this.actualBingImageryRestUri;
                }
            }
            if (b == null) {
                this.cm("", null);
                return;
            }
            let c = this.imageryStyle;
            b += enumGetBox(BingMapsImageryStyle_$type, c);
            let d = "key=" + this.apiKey + "&include=ImageryProviders";
            let url_ = b + "?" + d;
            this._pendingBingRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted, null);
        }
        getResponseCompleted(a, b) {
            if (b != this._pendingBingRequest_) {
                return;
            }
            this._pendingBingRequest_ = null;
            let data_ = a;
            let resourceSets_ = JSON.parse(data_).resourceSets;
            if (resourceSets_ == null) {
                return;
            }
            let resources_ = resourceSets_.length > 0 ? resourceSets_[0].resources : null;
            if (resources_ == null) {
                return;
            }
            if (resources_.length == 0) {
                return;
            }
            ;
            let imageUrl_ = (resources_[0].imageUrl);
            let subDomains_ = new List$1(String_$type, 0);
            for (var i = 0; i < resources_[0].imageUrlSubdomains.length; i++) {
                subDomains_.add(resources_[0].imageUrlSubdomains[i]);
            }
            ;
            this.cm(imageUrl_, subDomains_);
        }
        cf(a, b) {
            this.aj.e();
            this.cn();
            this.cj(BingMapsMapImagery.$$p[4], this.actualSubDomains, this.actualSubDomains);
        }
        cj(a, b, c) {
            switch (a) {
                case BingMapsMapImagery.$$p[0]:
                    this.cn();
                    break;
                case BingMapsMapImagery.$$p[3]:
                    this.cn();
                    break;
                case BingMapsMapImagery.$$p[5]:
                    this.cg();
                    this.actualTilePath = c;
                    this.bm.o();
                    this.aj.e();
                    break;
                case BingMapsMapImagery.$$p[1]:
                    this.bm.l();
                    this.aj.e();
                    break;
                case BingMapsMapImagery.$$p[2]:
                    this.cn();
                    break;
                case BingMapsMapImagery.$$p[4]:
                    this.cg();
                    let d = b;
                    let e = c;
                    if (this.actualSubDomains != null) {
                        let f = this.actualSubDomains;
                        f.collectionChanged = delegateRemove(f.collectionChanged, runOn(this, this.cf));
                    }
                    this.actualSubDomains = e;
                    if (this.actualSubDomains != null) {
                        e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.cf));
                    }
                    this.bm.n();
                    this.aj.e();
                    break;
                case "ActualTilePath":
                    let g = c;
                    if (stringIsNullOrEmpty(g)) {
                        this.cn();
                    }
                    break;
                case "BingImageryRestUri":
                    this.actualBingImageryRestUri = c;
                    this.cg();
                    this.cn();
                    break;
                case "ActualBingImageryRestUri":
                    this.cg();
                    this.cn();
                    break;
            }
            super.a8(a, b, c);
        }
    }
    BingMapsMapImagery.$t = /*@__PURE__*/ markType(BingMapsMapImagery, 'BingMapsMapImagery', GeographicMapImagery.$);
    BingMapsMapImagery.b9 = "http://dev.virtualearth.net/REST/v1/Imagery/Metadata/";
    BingMapsMapImagery.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, BingMapsMapImagery, 'cj', ['ApiKey', [2, /*@__PURE__*/ stringEmpty()], 'CultureName', [2, "en-US"], 'ImageryStyle', [BingMapsImageryStyle_$type, /*@__PURE__*/ enumGetBox(BingMapsImageryStyle_$type, 1)], 'IsDeferredLoad', [0, false], 'SubDomains', [SubDomainsCollection.$, null], 'TilePath', [2, null]]);
    return BingMapsMapImagery;
})();
//# sourceMappingURL=BingMapsMapImageryView_combined.js.map
