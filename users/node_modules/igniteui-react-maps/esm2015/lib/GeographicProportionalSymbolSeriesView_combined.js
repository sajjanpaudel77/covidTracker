/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HostSeriesView } from "./HostSeriesView";
import { GeographicMapSeriesHost } from "./GeographicMapSeriesHost";
import { BubbleSeries } from "igniteui-react-charts";
import { markType, enumGetBox, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { MarkerType_$type } from "igniteui-react-charts";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { SizeScale } from "igniteui-react-charts";
import { BrushScale } from "igniteui-react-charts";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
/**
 * @hidden
 */
export let GeographicProportionalSymbolSeriesView = /*@__PURE__*/ (() => {
    class GeographicProportionalSymbolSeriesView extends HostSeriesView {
        constructor(a) {
            super(a);
            this.b0 = null;
            this.b0 = a;
        }
        bv() {
            super.bv();
            let a = this.b0.l3;
            a.nv = this.b0.mv;
            a.nz = this.b0.mt;
            a.l2 = this.b0.md;
            a.mn = this.b0.na;
            a.l7 = this.b0.ml;
            a.px = this.b0.m6;
            a.o5 = this.b0.me;
            a.pr = this.b0.mr;
            a.pm = this.b0.mn;
            a.o1 = this.b0.mb;
            a.pd = this.b0.mg;
            a.pe = this.b0.mh;
            a.pk = this.b0.mk;
            a.pj = this.b0.mj;
        }
        b9() {
            this.b0.l3.nv = this.b0.mv;
        }
        b8() {
            this.b0.l3.nz = this.b0.mt;
        }
        ce() {
            this.b0.l3.l2 = this.b0.md;
        }
        cc() {
            this.b0.l3.mn = this.b0.na;
        }
        cd() {
            this.b0.l3.l7 = this.b0.ml;
        }
        cf() {
            this.b0.l3.no = this.b0.mm;
        }
        ch() {
            this.b0.l3.xAxis = this.b0.bs.nc;
        }
        ci() {
            this.b0.l3.yAxis = this.b0.bs.ne;
        }
        cg() {
            let a = this.b0.l3;
            if (this.b0.bs == null) {
                a.xAxis = null;
                a.yAxis = null;
                return;
            }
            a.xAxis = this.b0.bs.nc;
            a.yAxis = this.b0.bs.ne;
        }
        ca() {
            this.b0.l3.m1 = this.b0.nt;
        }
        cb() {
            this.b0.l3.m2 = this.b0.nu;
        }
        cj() {
            this.b0.l3.px = this.b0.m6;
        }
        ck() {
            this.b0.l3.o5 = this.b0.me;
            this.b0.l3.pf = this.b0.mi;
        }
        b4() {
            this.b0.l3.pr = this.b0.mr;
        }
        b2() {
            this.b0.l3.o1 = this.b0.mb;
            this.b0.l3.pd = this.b0.mg;
            this.b0.l3.pe = this.b0.mh;
            this.b0.l3.pk = this.b0.mk;
            this.b0.l3.pj = this.b0.mj;
        }
        b1() {
            this.b0.l3.pm = this.b0.mn;
        }
        cl() {
            this.b0.l3.pf = this.b0.mi;
        }
        b3() {
            this.b0.l3.pd = this.b0.mg;
        }
        b7() {
            this.b0.l3.pe = this.b0.mh;
        }
        b6() {
            this.b0.l3.pk = this.b0.mk;
        }
        b5() {
            this.b0.l3.pj = this.b0.mj;
        }
    }
    GeographicProportionalSymbolSeriesView.$t = /*@__PURE__*/ markType(GeographicProportionalSymbolSeriesView, 'GeographicProportionalSymbolSeriesView', HostSeriesView.$);
    return GeographicProportionalSymbolSeriesView;
})();
/**
 * @hidden
 */
export let GeographicProportionalSymbolSeries = /*@__PURE__*/ (() => {
    class GeographicProportionalSymbolSeries extends GeographicMapSeriesHost {
        constructor() {
            super();
            this.mc = null;
            this.mh = false;
            this.mk = NaN;
            this.mj = NaN;
            this.ab = GeographicProportionalSymbolSeries.$;
        }
        bf() {
            return new GeographicProportionalSymbolSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.mf = a;
        }
        l2() {
            return new BubbleSeries();
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    this.mf.cg();
                    break;
                case GeographicProportionalSymbolSeries.$$p[5]:
                    this.mf.b9();
                    break;
                case GeographicProportionalSymbolSeries.$$p[4]:
                    this.mf.b8();
                    break;
                case GeographicProportionalSymbolSeries.$$p[13]:
                    this.mf.ce();
                    break;
                case GeographicProportionalSymbolSeries.$$p[11]:
                    this.mf.cc();
                    break;
                case GeographicProportionalSymbolSeries.$$p[12]:
                    this.mf.cd();
                    break;
                case GeographicProportionalSymbolSeries.$$p[14]:
                    this.mf.cf();
                    break;
                case "XAxis":
                    this.mf.ch();
                    break;
                case "YAxis":
                    this.mf.ci();
                    break;
                case GeographicProportionalSymbolSeries.$$p[7]:
                    this.mf.ca();
                    break;
                case GeographicProportionalSymbolSeries.$$p[9]:
                    this.mf.cb();
                    break;
                case GeographicProportionalSymbolSeries.$$p[15]:
                    this.mf.cj();
                    break;
                case GeographicProportionalSymbolSeries.$$p[16]:
                    this.mf.ck();
                    break;
                case GeographicProportionalSymbolSeries.$$p[17]:
                    this.mf.cl();
                    break;
                case GeographicProportionalSymbolSeries.$$p[3]:
                    this.mf.b4();
                    break;
                case GeographicProportionalSymbolSeries.$$p[0]:
                    this.mf.b1();
                    break;
                case GeographicProportionalSymbolSeries.$$p[1]:
                    this.mf.b2();
                    break;
                case GeographicProportionalSymbolSeries.$$p[2]:
                    this.mf.b3();
                    break;
                case GeographicProportionalSymbolSeries.$$p[10]:
                    this.mf.b7();
                    break;
                case GeographicProportionalSymbolSeries.$$p[8]:
                    this.mf.b6();
                    break;
                case GeographicProportionalSymbolSeries.$$p[6]:
                    this.mf.b5();
                    break;
            }
        }
    }
    GeographicProportionalSymbolSeries.$t = /*@__PURE__*/ markType(GeographicProportionalSymbolSeries, 'GeographicProportionalSymbolSeries', GeographicMapSeriesHost.$);
    GeographicProportionalSymbolSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, GeographicProportionalSymbolSeries, 'raisePropertyChanged', ['FillMemberPath:mn:nb', [2], 'FillScale:mb:nc', [BrushScale.$], 'FillScaleUseGlobalValues:mg:nd', [0], 'LabelMemberPath:mr:ne', [2], 'LatitudeMemberPath:mt:nf', [2, null], 'LongitudeMemberPath:mv:ng', [2, null], 'MarkerBrushBrightness:mj:nh', [1], 'MarkerBrush:nt:ni', [Brush.$], 'MarkerOutlineBrightness:mk:nj', [1], 'MarkerOutline:nu:nk', [Brush.$], 'MarkerOutlineUsesFillScale:mh:nl', [0], 'MarkerTemplate:na:nm', [DataTemplate.$, null], 'MarkerThickness:ml:nn', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'MarkerType:md:no', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'MaximumMarkers:mm:np', [1, 400], 'RadiusMemberPath:m6:nq', [2, null], 'RadiusScale:me:nr', [SizeScale.$], 'RadiusScaleUseGlobalValues:mi:ns', [0]]);
    return GeographicProportionalSymbolSeries;
})();
//# sourceMappingURL=GeographicProportionalSymbolSeriesView_combined.js.map
