/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GeographicMapSeriesHost } from "./GeographicMapSeriesHost";
import { DependencyProperty } from "igniteui-react-core";
import { runOn, delegateRemove, delegateCombine, markType, markDep } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { HostSeriesView } from "./HostSeriesView";
/**
 * @hidden
 */
export let GeographicShapeSeriesBase = /*@__PURE__*/ (() => {
    class GeographicShapeSeriesBase extends GeographicMapSeriesHost {
        constructor() {
            super(...arguments);
            this.mc = null;
            this.me = false;
        }
        bf() {
            return new GeographicShapeSeriesBaseView(this);
        }
        iv(a) {
            super.iv(a);
            this.mb = a;
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    this.mb.b3();
                    break;
                case "ActualBrush":
                    this.mb.b1();
                    break;
                case "ActualOutline":
                    this.mb.b2();
                    break;
                case "ShapeMemberPath":
                    this.mb.b5();
                    break;
                case "Thickness":
                    this.mb.b6();
                    break;
                case GeographicShapeSeriesBase.$$p[0]:
                    this.mb.b4();
                    break;
                case "ShapefileDataSource":
                    if (c != null) {
                        let e = c;
                        if (this.me) {
                            e.importCompleted = delegateRemove(e.importCompleted, runOn(this, this.mk));
                        }
                    }
                    if (d != null) {
                        let f = d;
                        if (f.count > 0) {
                            this.ml();
                            break;
                        }
                        this.me = true;
                        f.importCompleted = delegateCombine(f.importCompleted, runOn(this, this.mk));
                    }
                    break;
            }
        }
        mk(a, b) {
            this.ml();
        }
        ml() {
            let sds_ = this.md;
            let ext_ = sds_.externalObject;
            this.itemsSource = (ext_.getPointData());
        }
        get md() {
            return this.mc;
        }
        set md(a) {
            let b = this.mc;
            this.mc = a;
            if (b != this.mc) {
                this.raisePropertyChanged("ShapefileDataSource", b, this.mc);
            }
        }
        get_dq() {
            return true;
        }
        set_dq(a) {
            super.set_dq(a);
        }
    }
    GeographicShapeSeriesBase.$t = /*@__PURE__*/ markType(GeographicShapeSeriesBase, 'GeographicShapeSeriesBase', GeographicMapSeriesHost.$);
    GeographicShapeSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, GeographicShapeSeriesBase, 'raisePropertyChanged', ['ShapeFilterResolution:mf:mm', [1, 2], 'ShapeMemberPath:mi:mn', [2, "points"]]);
    return GeographicShapeSeriesBase;
})();
/**
 * @hidden
 */
export let GeographicShapeSeriesBaseView = /*@__PURE__*/ (() => {
    class GeographicShapeSeriesBaseView extends HostSeriesView {
        constructor(a) {
            super(a);
            this.b0 = null;
            this.b0 = a;
        }
        bv() {
            super.bv();
            this.b0.l3.mv = this.b0.mi;
            this.b0.l3.k6 = this.b0.k4;
            this.b0.l3.k9 = this.b0.k5;
        }
        b3() {
            let a = this.b0.l3;
            if (this.b0.bs == null) {
                a.l7 = null;
                a.l9 = null;
                return;
            }
            a.l7 = this.b0.bs.nc;
            a.l9 = this.b0.bs.ne;
        }
        b1() {
            this.b0.l3.k6 = this.b0.k4;
        }
        b2() {
            this.b0.l3.k9 = this.b0.k5;
        }
        b5() {
            this.b0.l3.mv = this.b0.mi;
        }
        b6() {
            this.b0.l3.ey = this.b0.ey;
        }
        b4() {
            this.b0.l3.mp = this.b0.mf;
        }
    }
    GeographicShapeSeriesBaseView.$t = /*@__PURE__*/ markType(GeographicShapeSeriesBaseView, 'GeographicShapeSeriesBaseView', HostSeriesView.$);
    return GeographicShapeSeriesBaseView;
})();
//# sourceMappingURL=GeographicShapeSeriesBase_combined.js.map
