/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HostSeriesView } from "./HostSeriesView";
import { GeographicMapSeriesHost } from "./GeographicMapSeriesHost";
import { ScatterSeries } from "igniteui-react-charts";
import { markType, enumGetBox, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { MarkerType_$type } from "igniteui-react-charts";
import { CollisionAvoidanceType_$type } from "igniteui-react-charts";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
/**
 * @hidden
 */
export let GeographicSymbolSeriesView = /*@__PURE__*/ (() => {
    class GeographicSymbolSeriesView extends HostSeriesView {
        constructor(a) {
            super(a);
            this.b0 = null;
            this.b0 = a;
        }
        bv() {
            let a = this.b0.l3;
            super.bv();
            a.nv = this.b0.mk;
            a.nz = this.b0.mi;
            a.l2 = this.b0.mc;
            a.mn = this.b0.mu;
            a.l7 = this.b0.mg;
        }
        b2() {
            this.b0.l3.nv = this.b0.mk;
        }
        b1() {
            this.b0.l3.nz = this.b0.mi;
        }
        b8() {
            this.b0.l3.l2 = this.b0.mc;
        }
        b6() {
            this.b0.l3.mn = this.b0.mu;
        }
        b7() {
            this.b0.l3.l7 = this.b0.mg;
        }
        b9() {
            this.b0.l3.no = this.b0.mh;
        }
        cb() {
            this.b0.l3.xAxis = this.b0.bs.nc;
        }
        cc() {
            this.b0.l3.yAxis = this.b0.bs.ne;
        }
        ca() {
            let a = this.b0.l3;
            if (this.b0.bs == null) {
                a.xAxis = null;
                a.yAxis = null;
                return;
            }
            a.xAxis = this.b0.bs.nc;
            a.yAxis = this.b0.bs.ne;
        }
        b4() {
            this.b0.l3.m5 = this.b0.mb;
        }
        b3() {
            this.b0.l3.m1 = this.b0.m5;
        }
        b5() {
            this.b0.l3.m2 = this.b0.m6;
        }
    }
    GeographicSymbolSeriesView.$t = /*@__PURE__*/ markType(GeographicSymbolSeriesView, 'GeographicSymbolSeriesView', HostSeriesView.$);
    return GeographicSymbolSeriesView;
})();
/**
 * @hidden
 */
export let GeographicSymbolSeries = /*@__PURE__*/ (() => {
    class GeographicSymbolSeries extends GeographicMapSeriesHost {
        constructor() {
            super();
            this.md = null;
            this.ab = GeographicSymbolSeries.$;
        }
        bf() {
            return new GeographicSymbolSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.me = a;
        }
        l2() {
            return new ScatterSeries();
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    this.me.ca();
                    break;
                case GeographicSymbolSeries.$$p[1]:
                    this.me.b2();
                    break;
                case GeographicSymbolSeries.$$p[0]:
                    this.me.b1();
                    break;
                case GeographicSymbolSeries.$$p[3]:
                    this.me.b4();
                    break;
                case GeographicSymbolSeries.$$p[7]:
                    this.me.b8();
                    break;
                case GeographicSymbolSeries.$$p[5]:
                    this.me.b6();
                    break;
                case GeographicSymbolSeries.$$p[6]:
                    this.me.b7();
                    break;
                case GeographicSymbolSeries.$$p[8]:
                    this.me.b9();
                    break;
                case "XAxis":
                    this.me.cb();
                    break;
                case "YAxis":
                    this.me.cc();
                    break;
                case GeographicSymbolSeries.$$p[2]:
                    this.me.b3();
                    break;
                case GeographicSymbolSeries.$$p[4]:
                    this.me.b5();
                    break;
            }
        }
    }
    GeographicSymbolSeries.$t = /*@__PURE__*/ markType(GeographicSymbolSeries, 'GeographicSymbolSeries', GeographicMapSeriesHost.$);
    GeographicSymbolSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, GeographicSymbolSeries, 'raisePropertyChanged', ['LatitudeMemberPath:mi:mv', [2, null], 'LongitudeMemberPath:mk:mw', [2, null], 'MarkerBrush:m5:mx', [Brush.$], 'MarkerCollisionAvoidance:mb:my', [CollisionAvoidanceType_$type, /*@__PURE__*/ enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerOutline:m6:mz', [Brush.$], 'MarkerTemplate:mu:m0', [DataTemplate.$, null], 'MarkerThickness:mg:m1', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'MarkerType:mc:m2', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 2)], 'MaximumMarkers:mh:m3', [1, 400], 'UseLightweightMarkers:mf:m4', [0, false]]);
    return GeographicSymbolSeries;
})();
//# sourceMappingURL=GeographicSymbolSeriesView_combined.js.map
