/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { TileSeries } from "./TileSeries";
import { GeographicShapeSeriesBase } from "./GeographicShapeSeriesBase";
import { runOn, delegateRemove, delegateCombine, markType } from "igniteui-react-core";
import { ImageTilesReadyEventArgs } from "./ImageTilesReadyEventArgs";
/**
 * @hidden
 */
export let GeographicTileSeries = /*@__PURE__*/ (() => {
    class GeographicTileSeries extends GeographicShapeSeriesBase {
        constructor() {
            super();
            this.mp = null;
            this.mo = null;
            this.imageTilesReady = null;
            this.ab = GeographicTileSeries.$;
        }
        get mq() {
            return this.mp;
        }
        set mq(a) {
            let b = a != this.mq;
            if (b) {
                let c = this.mq;
                this.mp = a;
                this.raisePropertyChanged("TileImagery", c, a);
            }
        }
        mu() {
            if (this.mq != null) {
                this.mq.clearTileCache();
            }
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            switch (b) {
                case "TileImagery":
                    if (this.l3 != null) {
                        this.l3.ng = this.mq;
                    }
                    break;
            }
        }
        l8() {
            super.l8();
            this.l3.ng = this.mq;
            if (this.mo != null) {
                let a = this.mo;
                a.imageTilesReady = delegateRemove(a.imageTilesReady, runOn(this, this.mt));
            }
            this.mo = this.l3;
            if (this.mo != null) {
                let b = this.mo;
                b.imageTilesReady = delegateCombine(b.imageTilesReady, runOn(this, this.mt));
            }
        }
        l2() {
            return new TileSeries();
        }
        mt(a, b) {
            if (this.imageTilesReady != null) {
                this.imageTilesReady(this, new ImageTilesReadyEventArgs());
            }
        }
    }
    GeographicTileSeries.$t = /*@__PURE__*/ markType(GeographicTileSeries, 'GeographicTileSeries', GeographicShapeSeriesBase.$);
    return GeographicTileSeries;
})();
//# sourceMappingURL=GeographicTileSeries.js.map
