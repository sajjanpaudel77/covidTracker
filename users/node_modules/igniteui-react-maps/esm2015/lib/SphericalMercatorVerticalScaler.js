/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { VerticalLinearScaler } from "igniteui-react-charts";
import { Rect } from "igniteui-react-core";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let SphericalMercatorVerticalScaler = /*@__PURE__*/ (() => {
    class SphericalMercatorVerticalScaler extends VerticalLinearScaler {
        constructor() {
            super();
            this.au = null;
            this.ai = 0;
            this.aj = 0;
            this.au = new Rect(0, 0, 0, 1, 1);
        }
        q(a, b) {
            if (!b.c.isEmpty) {
                let c = a * b.e.height + b.e.top * b.d.height;
                let d = this.getMercatorUnscaledValue(c, this.au, b.c, b.a);
                return d;
            }
            else {
                return this.getMercatorUnscaledValue(a, b.e, b.d, b.a);
            }
        }
        p(a, b) {
            if (!b.c.isEmpty) {
                let c = this.getMercatorScaledValue1(a, this.au, b.c, b.a);
                c = (c - (b.e.top * b.d.height)) / b.e.height;
                return c;
            }
            else {
                return this.getMercatorScaledValue1(a, b.e, b.d, b.a);
            }
        }
        af(values_) {
            let a = (Array.isArray(values_) ? values_ : null);
            return a;
            return null;
        }
        v(a, b, c, d) {
            let e;
            let f = d.e;
            let g = d.d;
            let h = d.c;
            let i = d.a;
            let j = !h.isEmpty;
            let k = this.m;
            let l = this.o;
            let m = h.top;
            let n = h.height;
            let o = f.top;
            let p = f.height;
            let q = g.top;
            let r = g.height;
            let s = this.au.top;
            let t = this.au.height;
            let u = this.af(a);
            let v = 0.017453292519943295;
            let w;
            let x;
            let y;
            let z;
            let aa;
            let ab = false;
            if (u != null) {
                ab = true;
            }
            for (let ac = b; ac < c; ac++) {
                if (ab) {
                    e = u[ac];
                }
                else {
                    e = a.item(ac);
                }
                if (j) {
                    if (e < SphericalMercatorVerticalScaler.ah) {
                        e = SphericalMercatorVerticalScaler.ah;
                    }
                    if (e > SphericalMercatorVerticalScaler.ag) {
                        e = SphericalMercatorVerticalScaler.ag;
                    }
                    w = e * (v);
                    x = Math.sin(w);
                    y = 0.5 * Math.log((1 + x) / (1 - x));
                    z = (this.ai - y) * n / this.aj;
                    z = m + z;
                    aa = (z - s * n) / t;
                    z = (aa - (o * r)) / p;
                    if (ab) {
                        u[ac] = z;
                    }
                    else {
                        a.item(ac, z);
                    }
                }
                else {
                    if (e < SphericalMercatorVerticalScaler.ah) {
                        e = SphericalMercatorVerticalScaler.ah;
                    }
                    if (e > SphericalMercatorVerticalScaler.ag) {
                        e = SphericalMercatorVerticalScaler.ag;
                    }
                    w = e * (v);
                    x = Math.sin(w);
                    y = 0.5 * Math.log((1 + x) / (1 - x));
                    z = (this.ai - y) * r / this.aj;
                    z = q + z;
                    z = (z - o * r) / p;
                    if (ab) {
                        u[ac] = z;
                    }
                    else {
                        a.item(ac, z);
                    }
                }
            }
        }
        t(a, b, c, d, e) {
            d = this.ak(a.kj);
            e = this.ak(a.ki);
            return {
                p3: d,
                p4: e
            };
        }
        w(a, b, c) {
            super.w(a, b, c);
            switch (a) {
                case "ActualMinimumValue":
                case "ActualMaximumValue":
                    this.ai = SphericalMercatorVerticalScaler.am(this.n);
                    this.aj = SphericalMercatorVerticalScaler.am(this.n) - SphericalMercatorVerticalScaler.am(this.o);
                    break;
            }
        }
        static get as() {
            return SphericalMercatorVerticalScaler.ag;
        }
        static get at() {
            return SphericalMercatorVerticalScaler.ah;
        }
        getMercatorUnscaledValue(a, b, c, d) {
            let e = (a - c.top) * b.width + b.top * c.height;
            e = SphericalMercatorVerticalScaler.am(this.n) - e / (c.height / this.aj);
            return SphericalMercatorVerticalScaler.aq(e);
        }
        getMercatorScaledValue1(a, b, c, d) {
            let e = c.top + this.getMercatorScaledValue3(a, c.height);
            return (e - b.top * c.height) / b.width;
        }
        getMercatorScaledValue2(a, b, c, d, e) {
            let f = this.getMercatorScaledValue3(a, d.height);
            return (f - b.top * c.height) / b.width;
        }
        getMercatorScaledValue3(a, b) {
            a = a > SphericalMercatorVerticalScaler.ah ? (a < SphericalMercatorVerticalScaler.ag ? a : SphericalMercatorVerticalScaler.ag) : SphericalMercatorVerticalScaler.ah;
            let c = SphericalMercatorVerticalScaler.am(a);
            let d = (this.ai - c) * b / this.aj;
            return (d);
        }
        static am(a) {
            let b = a * (0.017453292519943295);
            let c = Math.sin(b);
            let d = 0.5 * Math.log((1 + c) / (1 - c));
            return d;
        }
        static aq(a) {
            a = Math.exp(2 * a);
            return Math.asin((a - 1) / (a + 1)) / 0.017453292519943295;
        }
        ak(a) {
            if (a < SphericalMercatorVerticalScaler.ah) {
                return SphericalMercatorVerticalScaler.ah;
            }
            if (a > SphericalMercatorVerticalScaler.ag) {
                return SphericalMercatorVerticalScaler.ag;
            }
            return a;
        }
    }
    SphericalMercatorVerticalScaler.$t = /*@__PURE__*/ markType(SphericalMercatorVerticalScaler, 'SphericalMercatorVerticalScaler', VerticalLinearScaler.$);
    SphericalMercatorVerticalScaler.ag = 85.05112878;
    SphericalMercatorVerticalScaler.ah = -85.05112878;
    return SphericalMercatorVerticalScaler;
})();
//# sourceMappingURL=SphericalMercatorVerticalScaler.js.map
