/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ShapeSeriesBase } from "igniteui-react-charts";
import { IMapRenderDeferralHandler_$type } from "igniteui-react-core";
import { EventArgs, runOn, delegateRemove, delegateCombine, typeCast, markType } from "igniteui-react-core";
import { XamGeographicMap } from "./XamGeographicMap";
import { ShapeSeriesViewBase } from "igniteui-react-charts";
import { RenderingContext } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
/**
 * @hidden
 */
export let TileSeries = /*@__PURE__*/ (() => {
    class TileSeries extends ShapeSeriesBase {
        constructor() {
            super(...arguments);
            this.ne = null;
            this.nd = null;
            this.imageTilesReady = null;
            this.nh = null;
            this.ni = false;
        }
        bf() {
            return new TileSeriesView(this);
        }
        iv(a) {
            super.iv(a);
            this.nc = a;
        }
        get_mi() {
            return false;
        }
        get ng() {
            return this.ne;
        }
        set ng(a) {
            let b = a != this.ng;
            if (b) {
                let c = this.ng;
                this.ne = a;
                this.raisePropertyChanged("TileImagery", c, a);
            }
        }
        get nf() {
            return this.nd;
        }
        set nf(a) {
            let b = this.nd;
            this.nd = a;
            this.raisePropertyChanged("ActualTileImagery", b, this.nd);
        }
        i0(a, b, c, d) {
            super.i0(a, b, c, d);
            let e;
            let f;
            switch (b) {
                case "TileImagery":
                    e = c;
                    f = d;
                    if (e != null) {
                        e.propertyChanged = delegateRemove(e.propertyChanged, runOn(this, this.nl));
                    }
                    if (f != null) {
                        f.propertyChanged = delegateCombine(f.propertyChanged, runOn(this, this.nl));
                    }
                    this.nc.c5(e, f);
                    this.je(false);
                    this.il();
                    break;
                case "ActualTileImagery":
                    e = c;
                    f = d;
                    if (e != null) {
                        e.imageTilesReady = delegateRemove(e.imageTilesReady, runOn(this, this.nm));
                        e.deferralHandler = null;
                    }
                    if (f != null) {
                        f.imageTilesReady = delegateCombine(f.imageTilesReady, runOn(this, this.nm));
                        f.deferralHandler = this;
                    }
                    this.nc.c4(e, f);
                    if (f != null && typeCast(XamGeographicMap.$, this.bs) !== null) {
                        f.geographicMap = this.bs;
                        this.no(this.bi);
                        this.nc.c1(this.bs.mr);
                    }
                    this.il();
                    break;
                case "ActualWindowRect":
                    this.nc.c1(d);
                    break;
                case "WorldRect":
                    this.nc.c8(d);
                    break;
                case "SeriesViewer":
                    let g = c;
                    let h = d;
                    if (g != null && this.nf != null) {
                        this.nf.bc(null);
                    }
                    if (h != null && this.nf != null) {
                        this.nf.bc(this.bi.t);
                    }
                    break;
            }
        }
        nl(a, b) {
            if (b.propertyName == "MultiScaleImage") {
                this.no(this.bi);
            }
        }
        nm(a, b) {
            if (this.imageTilesReady != null) {
                this.imageTilesReady(this, new EventArgs());
            }
            if (!this.ni) {
                this.nc.c6();
            }
        }
        register(a, b) {
            this.nh = b;
        }
        unRegister(a) {
            this.nh = null;
        }
        deferredRefresh() {
            this.je(false);
        }
        deferAction(a) {
            if (this.e4 != null) {
                this.e4.setTimeout(a, 0);
            }
            else {
                window.setTimeout(a, 0);
            }
        }
        jt(a, b) {
            this.nc.c7();
            super.jt(a, b);
        }
        jf(a) {
            super.jf(a);
            this.nn(a, this.bi);
        }
        nn(a, b) {
            let c;
            let d;
            let e = b;
            let f = b.getViewInfo(c, d);
            c = f.p0;
            d = f.p1;
            this.no(b);
            if (this.nh != null) {
                this.ni = true;
                this.nh(a);
                this.ni = false;
            }
            e.c6();
        }
        jd(a, b, c, d, e) {
            super.jd(a, b, c, d, e);
            let f = this.dz.item(d);
            f.ay(c);
            if (this.cc(f)) {
                return;
            }
            this.m1(f);
        }
        no(a) {
            let b;
            let c;
            let d = a.getViewInfo(b, c);
            b = d.p0;
            c = d.p1;
            if (this.ng != null && this.ng.ao != null) {
                if (this.ng != this.nf) {
                    this.nf = this.ng;
                }
                if (this.nf != null && !b.isEmpty) {
                    if (this.nf.width != b.width) {
                        this.nf.width = b.width;
                    }
                    if (this.nf.height != b.height) {
                        this.nf.height = b.height;
                    }
                }
            }
        }
        hw(a, b) {
            super.hw(a, b);
            b.c2();
        }
    }
    TileSeries.$t = /*@__PURE__*/ markType(TileSeries, 'TileSeries', ShapeSeriesBase.$, [IMapRenderDeferralHandler_$type]);
    return TileSeries;
})();
/**
 * @hidden
 */
export let TileSeriesView = /*@__PURE__*/ (() => {
    class TileSeriesView extends ShapeSeriesViewBase {
        constructor(a) {
            super(a);
            this.cy = null;
            this.c9 = new GeometryGroup();
            this.c0 = null;
            this.cz = null;
            this.cy = a;
        }
        ca(a, b) {
            if (b.c.count > 0) {
                this.c9.d.add(b);
            }
        }
        cu(a, b) {
            return this.cv(a, b, true);
        }
        ct(a, b) {
            return null;
        }
        ce(a) {
        }
        cc(a, b) {
        }
        cj() {
            super.cj();
            this.c9.d.clear();
        }
        ci() {
            super.ci();
            this.an();
        }
        c1(a) {
            if (this.cy.ng != null) {
                this.cy.ng.windowRect = a;
            }
        }
        c4(a, b) {
            if (this.c0 == null) {
                this.c0 = this.e.e4.createElement("canvas");
                let c = this.e.e4.get2DCanvasContext(this.c0);
                this.cz = new RenderingContext(new CanvasViewRenderer(), c);
                this.c0.setAttribute("width", this.br.width.toString());
                this.c0.setAttribute("height", this.br.height.toString());
            }
            if (a != null) {
                a.bb(null);
                a.bc(null);
                a.imagesChanged = delegateRemove(a.imagesChanged, runOn(this, this.c3));
            }
            if (b != null) {
                if (this.t != null) {
                    b.bc(this.t);
                }
                b.bb(this.cz);
                b.bd(this.br);
                b.imagesChanged = delegateCombine(b.imagesChanged, runOn(this, this.c3));
            }
        }
        c3(a, b) {
            this.an();
        }
        c5(a, b) {
        }
        c7() {
            if (this.c0 != null) {
                this.c0.setAttribute("width", this.br.width.toString());
                this.c0.setAttribute("height", this.br.height.toString());
            }
            if (this.cy.ng != null) {
                this.cy.ng.bd(this.br);
            }
        }
        a3(a, b) {
            super.a3(a, b);
            if (b) {
                return;
            }
            if (this.c0 == null) {
                return;
            }
            let c = false;
            if (this.c9.d.count > 0) {
                c = true;
                this.h.z();
                this.h.q(this.c9);
                let d = this.h.g();
                d.clip();
            }
            let e = truncate(Math.round(this.br.left));
            let f = truncate(Math.round(this.br.top));
            let g = truncate(Math.round(this.br.width));
            let h = truncate(Math.round(this.br.height));
            this.h.n(this.c0.getNativeElement(), 1, e, f, g, h, e, f, g, h);
            if (c) {
                this.h.y();
            }
        }
        c6() {
            this.an();
        }
        c2() {
        }
        c8(a) {
            if (this.cy.ng != null) {
                this.cy.ng.a4();
            }
        }
    }
    TileSeriesView.$t = /*@__PURE__*/ markType(TileSeriesView, 'TileSeriesView', ShapeSeriesViewBase.$);
    return TileSeriesView;
})();
//# sourceMappingURL=TileSeries_combined.js.map
