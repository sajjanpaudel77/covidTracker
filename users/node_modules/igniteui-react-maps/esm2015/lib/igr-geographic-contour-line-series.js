import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrValueBrushScale } from "igniteui-react-charts";
import { IgrContourValueResolver } from "igniteui-react-charts";
import { IgrTriangulationStatusEventArgs } from "igniteui-react-core";
import { IgrGeographicXYTriangulatingSeries } from "./igr-geographic-xy-triangulating-series";
import { GeographicContourLineSeries } from "./GeographicContourLineSeries";
/**
 * Represents a class for Geographic Contour Series displayed on a map.
*/
export class IgrGeographicContourLineSeries extends IgrGeographicXYTriangulatingSeries {
    constructor(props) {
        super(props);
        this._triangulationStatusChanged = null;
        this._triangulationStatusChanged_wrapped = null;
    }
    createImplementation() {
        return new GeographicContourLineSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * The name of the property from which to retrieve the numeric values from the ItemsSource items.
    */
    get valueMemberPath() {
        return this.i.m0;
    }
    set valueMemberPath(v) {
        this.i.m0 = v;
    }
    /**
     * The ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
    */
    get fillScale() {
        if (this.i.mx == null) {
            return null;
        }
        if (!this.i.mx.externalObject) {
            let e = IgrValueBrushScale._createFromInternal(this.i.mx);
            if (e) {
                e._implementation = this.i.mx;
            }
            this.i.mx.externalObject = e;
        }
        return this.i.mx.externalObject;
    }
    set fillScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.mx = null : this.i.mx = v.i;
    }
    /**
     * The ContourValueResolver used to determine the numeric values of contours.
    */
    get valueResolver() {
        if (this.i.mu == null) {
            return null;
        }
        if (!this.i.mu.externalObject) {
            let e = IgrContourValueResolver._createFromInternal(this.i.mu);
            if (e) {
                e._implementation = this.i.mu;
            }
            this.i.mu.externalObject = e;
        }
        return this.i.mu.externalObject;
    }
    set valueResolver(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.mu = null : this.i.mu = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        if (this.valueResolver && this.valueResolver.name && this.valueResolver.name == name) {
            return this.valueResolver;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        if (this.valueResolver && this.valueResolver._styling) {
            this.valueResolver._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    get triangulationStatusChanged() {
        return this._triangulationStatusChanged;
    }
    set triangulationStatusChanged(ev) {
        if (this._triangulationStatusChanged_wrapped !== null) {
            this.i.triangulationStatusChanged = delegateRemove(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
            this._triangulationStatusChanged_wrapped = null;
            this._triangulationStatusChanged = null;
        }
        this._triangulationStatusChanged = ev;
        this._triangulationStatusChanged_wrapped = (o, e) => {
            let outerArgs = new IgrTriangulationStatusEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeTriangulationStatusChanged) {
                this.beforeTriangulationStatusChanged(this, outerArgs);
            }
            if (this._triangulationStatusChanged) {
                this._triangulationStatusChanged(this, outerArgs);
            }
        };
        this.i.triangulationStatusChanged = delegateCombine(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
    }
}
//# sourceMappingURL=igr-geographic-contour-line-series.js.map
