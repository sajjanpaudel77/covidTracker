import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrProgressiveLoadStatusEventArgs } from "igniteui-react-charts";
import { IgrGeographicMapSeriesHost } from "./igr-geographic-map-series-host";
import { GeographicHighDensityScatterSeries } from "./GeographicHighDensityScatterSeries";
import { ensureBool, colorToString, stringToColor } from "igniteui-react-core";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a HighDensityScatterSeries.
*/
export class IgrGeographicHighDensityScatterSeries extends IgrGeographicMapSeriesHost {
    constructor(props) {
        super(props);
        this._progressiveLoadStatusChanged = null;
        this._progressiveLoadStatusChanged_wrapped = null;
    }
    createImplementation() {
        return new GeographicHighDensityScatterSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
    */
    get latitudeMemberPath() {
        return this.i.mq;
    }
    set latitudeMemberPath(v) {
        this.i.mq = v;
    }
    /**
     * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
    */
    get longitudeMemberPath() {
        return this.i.ms;
    }
    set longitudeMemberPath(v) {
        this.i.ms = v;
    }
    /**
     * Gets or sets the whether to use use brute force mode.
    */
    get useBruteForce() {
        return this.i.mf;
    }
    set useBruteForce(v) {
        this.i.mf = ensureBool(v);
    }
    /**
     * Gets or sets the whether to progressively load the data into the chart.
    */
    get progressiveLoad() {
        return this.i.me;
    }
    set progressiveLoad(v) {
        this.i.me = ensureBool(v);
    }
    /**
     * Gets or sets the whether the chart reacts to mouse move events.
    */
    get mouseOverEnabled() {
        return this.i.md;
    }
    set mouseOverEnabled(v) {
        this.i.md = ensureBool(v);
    }
    /**
     * Gets or sets the density value that maps to the minimum heat color.
    */
    get heatMinimum() {
        return this.i.mh;
    }
    set heatMinimum(v) {
        this.i.mh = +v;
    }
    /**
     * Gets or sets the value that maps to the maximum heat color.
    */
    get heatMaximum() {
        return this.i.mg;
    }
    set heatMaximum(v) {
        this.i.mg = +v;
    }
    /**
     * Gets or sets the color to use for the minimum end of the scale.
    */
    get heatMinimumColor() {
        return colorToString(this.i.na);
    }
    set heatMinimumColor(v) {
        this.i.na = stringToColor(v);
    }
    /**
     * Gets or sets the color to use for the maximum end of the scale.
    */
    get heatMaximumColor() {
        return colorToString(this.i.m9);
    }
    set heatMaximumColor(v) {
        this.i.m9 = stringToColor(v);
    }
    /**
     * Gets or sets the the pixel extent of the square data points that are rendered.
    */
    get pointExtent() {
        return this.i.mk;
    }
    set pointExtent(v) {
        this.i.mk = +v;
    }
    /**
     * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
    */
    get progressiveStatus() {
        return this.i.ml;
    }
    set progressiveStatus(v) {
        this.i.ml = +v;
    }
    /**
     * Raised when the progressive loading state of the series has changed.
    */
    get progressiveLoadStatusChanged() {
        return this._progressiveLoadStatusChanged;
    }
    set progressiveLoadStatusChanged(ev) {
        if (this._progressiveLoadStatusChanged_wrapped !== null) {
            this.i.progressiveLoadStatusChanged = delegateRemove(this.i.progressiveLoadStatusChanged, this._progressiveLoadStatusChanged_wrapped);
            this._progressiveLoadStatusChanged_wrapped = null;
            this._progressiveLoadStatusChanged = null;
        }
        this._progressiveLoadStatusChanged = ev;
        this._progressiveLoadStatusChanged_wrapped = (o, e) => {
            let outerArgs = new IgrProgressiveLoadStatusEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeProgressiveLoadStatusChanged) {
                this.beforeProgressiveLoadStatusChanged(this, outerArgs);
            }
            if (this._progressiveLoadStatusChanged) {
                this._progressiveLoadStatusChanged(this, outerArgs);
            }
        };
        this.i.progressiveLoadStatusChanged = delegateCombine(this.i.progressiveLoadStatusChanged, this._progressiveLoadStatusChanged_wrapped);
    }
}
//# sourceMappingURL=igr-geographic-high-density-scatter-series.js.map
