import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrImageTilesReadyEventArgs } from "./igr-image-tiles-ready-event-args";
import { IgrImagesChangedEventArgs } from "./igr-images-changed-event-args";
import { IgrCancellingMultiScaleImageEventArgs } from "igniteui-react-core";
import { IgrDownloadingMultiScaleImageEventArgs } from "igniteui-react-core";
import { fromRect, toRect } from "igniteui-react-core";
/**
 * Control class used for displaying multi-scale TileSource imagery.  Designed to be used for background imagery in the IgxGeographicMap.Component
*/
export class IgrGeographicMapImagery {
    constructor() {
        this._imageTilesReady = null;
        this._imageTilesReady_wrapped = null;
        this._imagesChanged = null;
        this._imagesChanged_wrapped = null;
        this._cancellingImage = null;
        this._cancellingImage_wrapped = null;
        this._downloadingImage = null;
        this._downloadingImage_wrapped = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return null;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The deferral handler to use for deferred refreshes.
    */
    get deferralHandler() {
        return this.i.deferralHandler;
    }
    set deferralHandler(v) {
        this.i.deferralHandler = v;
    }
    /**
     * A rectangle representing the portion of the map imagery currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
    */
    get windowRect() {
        return fromRect(this.i.windowRect);
    }
    set windowRect(v) {
        this.i.windowRect = toRect(v);
    }
    /**
     * The IgxGeographicMapComponent which is hosting this GeographicMapImagery control.
    */
    get geographicMap() {
        if (this.i.geographicMap == null) {
            return null;
        }
        return this.i.geographicMap.externalObject;
    }
    set geographicMap(v) {
        v == null ? this.i.geographicMap = null : this.i.geographicMap = v.i;
    }
    /**
     * Gets or sets the referer sent in the headers of the tile request.
    */
    get referer() {
        return this.i.referer;
    }
    set referer(v) {
        this.i.referer = v;
    }
    /**
     * Gets or sets the UserAgent sent in the headers of the tile request.
    */
    get userAgent() {
        return this.i.userAgent;
    }
    set userAgent(v) {
        this.i.userAgent = v;
    }
    get opacity() {
        return this.i.opacity;
    }
    set opacity(v) {
        this.i.opacity = +v;
    }
    findByName(name) {
        if (this.geographicMap && this.geographicMap.name && this.geographicMap.name == name) {
            return this.geographicMap;
        }
        return null;
    }
    /**
     * Removes all cached tile Imagery from the
    
    */
    clearTileCache() {
        this.i.clearTileCache();
    }
    /**
     * Event raised when the image tiles have been downloaded.
    */
    get imageTilesReady() {
        return this._imageTilesReady;
    }
    set imageTilesReady(ev) {
        if (this._imageTilesReady_wrapped !== null) {
            this.i.imageTilesReady = delegateRemove(this.i.imageTilesReady, this._imageTilesReady_wrapped);
            this._imageTilesReady_wrapped = null;
            this._imageTilesReady = null;
        }
        this._imageTilesReady = ev;
        this._imageTilesReady_wrapped = (o, e) => {
            let outerArgs = new IgrImageTilesReadyEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeImageTilesReady) {
                this.beforeImageTilesReady(this, outerArgs);
            }
            if (this._imageTilesReady) {
                this._imageTilesReady(this, outerArgs);
            }
        };
        this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, this._imageTilesReady_wrapped);
    }
    /**
     * Event raised when tile images have changed.
    */
    get imagesChanged() {
        return this._imagesChanged;
    }
    set imagesChanged(ev) {
        if (this._imagesChanged_wrapped !== null) {
            this.i.imagesChanged = delegateRemove(this.i.imagesChanged, this._imagesChanged_wrapped);
            this._imagesChanged_wrapped = null;
            this._imagesChanged = null;
        }
        this._imagesChanged = ev;
        this._imagesChanged_wrapped = (o, e) => {
            let outerArgs = new IgrImagesChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeImagesChanged) {
                this.beforeImagesChanged(this, outerArgs);
            }
            if (this._imagesChanged) {
                this._imagesChanged(this, outerArgs);
            }
        };
        this.i.imagesChanged = delegateCombine(this.i.imagesChanged, this._imagesChanged_wrapped);
    }
    /**
     * Event raised when an image is being downloaded.
    */
    get cancellingImage() {
        return this._cancellingImage;
    }
    set cancellingImage(ev) {
        if (this._cancellingImage_wrapped !== null) {
            this.i.cancellingImage = delegateRemove(this.i.cancellingImage, this._cancellingImage_wrapped);
            this._cancellingImage_wrapped = null;
            this._cancellingImage = null;
        }
        this._cancellingImage = ev;
        this._cancellingImage_wrapped = (o, e) => {
            let outerArgs = new IgrCancellingMultiScaleImageEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCancellingImage) {
                this.beforeCancellingImage(this, outerArgs);
            }
            if (this._cancellingImage) {
                this._cancellingImage(this, outerArgs);
            }
        };
        this.i.cancellingImage = delegateCombine(this.i.cancellingImage, this._cancellingImage_wrapped);
    }
    /**
     * Event raised when an image is being downloaded.
    */
    get downloadingImage() {
        return this._downloadingImage;
    }
    set downloadingImage(ev) {
        if (this._downloadingImage_wrapped !== null) {
            this.i.downloadingImage = delegateRemove(this.i.downloadingImage, this._downloadingImage_wrapped);
            this._downloadingImage_wrapped = null;
            this._downloadingImage = null;
        }
        this._downloadingImage = ev;
        this._downloadingImage_wrapped = (o, e) => {
            let outerArgs = new IgrDownloadingMultiScaleImageEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeDownloadingImage) {
                this.beforeDownloadingImage(this, outerArgs);
            }
            if (this._downloadingImage) {
                this._downloadingImage(this, outerArgs);
            }
        };
        this.i.downloadingImage = delegateCombine(this.i.downloadingImage, this._downloadingImage_wrapped);
    }
}
//# sourceMappingURL=igr-geographic-map-imagery.js.map
