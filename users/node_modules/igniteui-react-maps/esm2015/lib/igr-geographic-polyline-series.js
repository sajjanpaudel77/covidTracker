import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrStyleShapeEventArgs } from "igniteui-react-charts";
import { IgrGeographicShapeSeriesBase } from "./igr-geographic-shape-series-base";
import { GeographicPolylineSeries } from "./GeographicPolylineSeries";
import { Style } from "igniteui-react-core";
/**
 * Series class used for displaying multiple polylines, in a geographic context, for datasources which contain multiple lists of points.
*/
export class IgrGeographicPolylineSeries extends IgrGeographicShapeSeriesBase {
    constructor(props) {
        super(props);
        this._styleShape = null;
        this._styleShape_wrapped = null;
    }
    createImplementation() {
        return new GeographicPolylineSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the fill brush.
    */
    get shapeFill() {
        return this.i.mw ? this.i.mw.fill : null;
    }
    set shapeFill(v) {
        this.ensureShapeStyle();
        this.i.mw.fill = v;
    }
    /**
     * Gets or sets the stroke brush.
    */
    get shapeStroke() {
        return this.i.mw ? this.i.mw.stroke : null;
    }
    set shapeStroke(v) {
        this.ensureShapeStyle();
        this.i.mw.stroke = v;
    }
    /**
     * Gets or sets the stroke thickness.
    */
    get shapeStrokeThickness() {
        return this.i.mw ? this.i.mw.strokeThickness : NaN;
    }
    set shapeStrokeThickness(v) {
        this.ensureShapeStyle();
        this.i.mw.strokeThickness = +v;
    }
    /**
     * Gets or sets the opacity.
    */
    get shapeOpacity() {
        return this.i.mw ? this.i.mw.opacity : NaN;
    }
    set shapeOpacity(v) {
        this.ensureShapeStyle();
        this.i.mw.opacity = +v;
    }
    ensureShapeStyle() {
        if (this.i.mw) {
            return;
        }
        this.i.mw = new Style();
    }
    get styleShape() {
        return this._styleShape;
    }
    set styleShape(ev) {
        if (this._styleShape_wrapped !== null) {
            this.i.styleShape = delegateRemove(this.i.styleShape, this._styleShape_wrapped);
            this._styleShape_wrapped = null;
            this._styleShape = null;
        }
        this._styleShape = ev;
        this._styleShape_wrapped = (o, e) => {
            let outerArgs = new IgrStyleShapeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStyleShape) {
                this.beforeStyleShape(this, outerArgs);
            }
            if (this._styleShape) {
                this._styleShape(this, outerArgs);
            }
        };
        this.i.styleShape = delegateCombine(this.i.styleShape, this._styleShape_wrapped);
    }
}
//# sourceMappingURL=igr-geographic-polyline-series.js.map
