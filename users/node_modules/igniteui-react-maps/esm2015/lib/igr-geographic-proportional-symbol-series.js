import { MarkerType_$type } from "igniteui-react-charts";
import { IgrSizeScale } from "igniteui-react-charts";
import { IgrBrushScale } from "igniteui-react-charts";
import { IgrGeographicMapSeriesHost } from "./igr-geographic-map-series-host";
import { GeographicProportionalSymbolSeries } from "./GeographicProportionalSymbolSeries";
import { ensureEnum, brushToString, stringToBrush, ensureBool } from "igniteui-react-core";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a ScatterSeries.
*/
export class IgrGeographicProportionalSymbolSeries extends IgrGeographicMapSeriesHost {
    createImplementation() {
        return new GeographicProportionalSymbolSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
    */
    get latitudeMemberPath() {
        return this.i.mt;
    }
    set latitudeMemberPath(v) {
        this.i.mt = v;
    }
    /**
     * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
    */
    get longitudeMemberPath() {
        return this.i.mv;
    }
    set longitudeMemberPath(v) {
        this.i.mv = v;
    }
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType() {
        return this.i.md;
    }
    set markerType(v) {
        this.i.md = ensureEnum(MarkerType_$type, v);
    }
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate() {
        return this.i.na;
    }
    set markerTemplate(v) {
        this.i.na = v;
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush() {
        return brushToString(this.i.nt);
    }
    set markerBrush(v) {
        this.i.nt = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline() {
        return brushToString(this.i.nu);
    }
    set markerOutline(v) {
        this.i.nu = stringToBrush(v);
    }
    /**
     * Gets or sets the maximum number of markerItems displayed by the current series.
     * If more than the specified number of markerItems are visible, the series will automatically
     * choose a representative set.
    */
    get maximumMarkers() {
        return this.i.mm;
    }
    set maximumMarkers(v) {
        this.i.mm = +v;
    }
    /**
     * Gets or sets the radius mapping property for the current series object.
    */
    get radiusMemberPath() {
        return this.i.m6;
    }
    set radiusMemberPath(v) {
        this.i.m6 = v;
    }
    /**
     * Gets or sets the radius size scale for the bubbles.
    */
    get radiusScale() {
        if (this.i.me == null) {
            return null;
        }
        if (!this.i.me.externalObject) {
            let e = IgrSizeScale._createFromInternal(this.i.me);
            if (e) {
                e._implementation = this.i.me;
            }
            this.i.me.externalObject = e;
        }
        return this.i.me.externalObject;
    }
    set radiusScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.me = null : this.i.me = v.i;
    }
    /**
     * Gets or sets the Label mapping property for the current series object.
    */
    get labelMemberPath() {
        return this.i.mr;
    }
    set labelMemberPath(v) {
        this.i.mr = v;
    }
    /**
     * Gets or sets the fill mapping property for the current series object.
    */
    get fillMemberPath() {
        return this.i.mn;
    }
    set fillMemberPath(v) {
        this.i.mn = v;
    }
    /**
     * Gets or sets the brush scale for the marker brush.
    */
    get fillScale() {
        if (this.i.mb == null) {
            return null;
        }
        if (!this.i.mb.externalObject) {
            let e = IgrBrushScale._createFromInternal(this.i.mb);
            if (e) {
                e._implementation = this.i.mb;
            }
            this.i.mb.externalObject = e;
        }
        return this.i.mb.externalObject;
    }
    set fillScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.mb = null : this.i.mb = v.i;
    }
    /**
     * Gets or sets the whether or not the FillScale uses global values of FillMemberPath of multiple series.
     * This setting applies only if multiple series are using the same FillScale.
    */
    get fillScaleUseGlobalValues() {
        return this.i.mg;
    }
    set fillScaleUseGlobalValues(v) {
        this.i.mg = ensureBool(v);
    }
    /**
     * Gets or sets whether or not the marker outline should use FillScale like the marker fill does.
     * This setting applies only if the current series has a FillScale set and it overrides MarkerOutline setting.
    */
    get markerOutlineUsesFillScale() {
        return this.i.mh;
    }
    set markerOutlineUsesFillScale(v) {
        this.i.mh = ensureBool(v);
    }
    /**
     * Gets or sets brightness of the marker outline. Using negative value will change marker outline to darker color and positive value will change marker outline to brighter color
     * Note you can use any values between minimum value of -1 (darkest outline) and maximum value of 1 (brightest outline)
    */
    get markerOutlineBrightness() {
        return this.i.mk;
    }
    set markerOutlineBrightness(v) {
        this.i.mk = +v;
    }
    /**
     * Gets or sets brightness of the marker fill. Using negative value will change marker fill to darker color and positive value will change marker fill to brighter color
     * Note you can use any values between minimum value of -1 (darkest fill) and maximum value of 1 (brightest fill)
    */
    get markerBrushBrightness() {
        return this.i.mj;
    }
    set markerBrushBrightness(v) {
        this.i.mj = +v;
    }
    /**
     * Gets or sets thickness of the marker outline
    */
    get markerThickness() {
        return this.i.ml;
    }
    set markerThickness(v) {
        this.i.ml = +v;
    }
    /**
     * Gets or sets the whether or not the RadiusScale uses global values of RadiusMemberPath of multiple series.
     * This setting applies only if multiple series are using the same RadiusScale.
    */
    get radiusScaleUseGlobalValues() {
        return this.i.mi;
    }
    set radiusScaleUseGlobalValues(v) {
        this.i.mi = ensureBool(v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.radiusScale && this.radiusScale.name && this.radiusScale.name == name) {
            return this.radiusScale;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.radiusScale && this.radiusScale._styling) {
            this.radiusScale._styling(container, component, this);
        }
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        this._inStyling = false;
    }
}
//# sourceMappingURL=igr-geographic-proportional-symbol-series.js.map
