import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrColorScale } from "igniteui-react-charts";
import { IgrTriangulationStatusEventArgs } from "igniteui-react-core";
import { IgrGeographicXYTriangulatingSeries } from "./igr-geographic-xy-triangulating-series";
import { GeographicScatterAreaSeries } from "./GeographicScatterAreaSeries";
/**
 * Series class which draws a colored 2D surface, in a geographic context, based on a triangulation of XY data with numeric values assigned to each point.
*/
export class IgrGeographicScatterAreaSeries extends IgrGeographicXYTriangulatingSeries {
    constructor(props) {
        super(props);
        this._triangulationStatusChanged = null;
        this._triangulationStatusChanged_wrapped = null;
    }
    createImplementation() {
        return new GeographicScatterAreaSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * The name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
    */
    get colorMemberPath() {
        return this.i.mz;
    }
    set colorMemberPath(v) {
        this.i.mz = v;
    }
    /**
     * The ColorScale used to resolve the color values of points in the series.
    */
    get colorScale() {
        if (this.i.mv == null) {
            return null;
        }
        if (!this.i.mv.externalObject) {
            let e = IgrColorScale._createFromInternal(this.i.mv);
            if (e) {
                e._implementation = this.i.mv;
            }
            this.i.mv.externalObject = e;
        }
        return this.i.mv.externalObject;
    }
    set colorScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.mv = null : this.i.mv = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {
            return this.colorScale;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.colorScale && this.colorScale._styling) {
            this.colorScale._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    get triangulationStatusChanged() {
        return this._triangulationStatusChanged;
    }
    set triangulationStatusChanged(ev) {
        if (this._triangulationStatusChanged_wrapped !== null) {
            this.i.triangulationStatusChanged = delegateRemove(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
            this._triangulationStatusChanged_wrapped = null;
            this._triangulationStatusChanged = null;
        }
        this._triangulationStatusChanged = ev;
        this._triangulationStatusChanged_wrapped = (o, e) => {
            let outerArgs = new IgrTriangulationStatusEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeTriangulationStatusChanged) {
                this.beforeTriangulationStatusChanged(this, outerArgs);
            }
            if (this._triangulationStatusChanged) {
                this._triangulationStatusChanged(this, outerArgs);
            }
        };
        this.i.triangulationStatusChanged = delegateCombine(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
    }
}
//# sourceMappingURL=igr-geographic-scatter-area-series.js.map
