import { IgrGeographicMapSeriesHost } from "./igr-geographic-map-series-host";
import { IgrShapeDataSource } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
/**
 * Base class for series which render polygons on a map.
*/
export class IgrGeographicShapeSeriesBase extends IgrGeographicMapSeriesHost {
    constructor(props) {
        super(props);
        this._currData = null;
        this._onImportCompleted = null;
    }
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the string path of the .shp portion of the Shapefile.
    */
    set shapeDataSource(value) {
        this._shapeDataSource = value;
        this.updateShapeDataSource();
    }
    get shapeDataSource() {
        return this._shapeDataSource;
    }
    /**
     * Gets or sets the string path of the .dbf portion of the Shapefile.
    */
    set databaseSource(value) {
        this._databaseSource = value;
        this.updateShapeDataSource();
    }
    get databaseSource() {
        return this._databaseSource;
    }
    onUpdateDataSource(dataSource) {
        if (this._onImportCompleted == null) {
            this._onImportCompleted = (s, e) => {
                if (this._currData) {
                    this._currData.i.importCompleted = delegateRemove(this._currData.i.importCompleted, this._onImportCompleted);
                    var data = this._currData;
                    this._currData = null;
                    this.i.itemsSource = data.getPointData();
                }
            };
        }
        if (dataSource && dataSource.getPointData) {
            if (dataSource.count > 0) {
                return dataSource.getPointData();
            }
            this._currData = dataSource;
            this._currData.i.importCompleted = delegateCombine(this._currData.i.importCompleted, this._onImportCompleted);
            return null;
        }
        return dataSource;
    }
    updateShapeDataSource() {
        if (this._cachedShapeDataSource == null) {
            this._cachedShapeDataSource = new IgrShapeDataSource();
            this.onShapeDataSourceImportCompleted = this.onShapeDataSourceImportCompleted.bind(this);
            this._cachedShapeDataSource.importCompleted = this.onShapeDataSourceImportCompleted;
        }
        this._cachedShapeDataSource.shapefileSource = this._shapeDataSource;
        this._cachedShapeDataSource.databaseSource = this._databaseSource;
        if (this._shapeDataSource && this._databaseSource) {
            this._cachedShapeDataSource.dataBind();
        }
    }
    onShapeDataSourceImportCompleted(s, e) {
        this.dataSource = this._cachedShapeDataSource.getPointData();
    }
    /**
 * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.
 * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.
*/
    get shapeMemberPath() {
        return this.i.mi;
    }
    set shapeMemberPath(v) {
        this.i.mi = v;
    }
    /**
     * Set a shapefile datasource to use with the series.
    */
    get shapefileDataSource() {
        if (this.i.md == null) {
            return null;
        }
        if (!this.i.md.externalObject) {
            let e = new IgrShapeDataSource();
            e._implementation = this.i.md;
            this.i.md.externalObject = e;
        }
        return this.i.md.externalObject;
    }
    set shapefileDataSource(v) {
        v == null ? this.i.md = null : this.i.md = v.i;
    }
    /**
     * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.
     * In the case of GeographicPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.
    */
    get shapeFilterResolution() {
        return this.i.mf;
    }
    set shapeFilterResolution(v) {
        this.i.mf = +v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapefileDataSource && this.shapefileDataSource.name && this.shapefileDataSource.name == name) {
            return this.shapefileDataSource;
        }
        return null;
    }
}
//# sourceMappingURL=igr-geographic-shape-series-base.js.map
