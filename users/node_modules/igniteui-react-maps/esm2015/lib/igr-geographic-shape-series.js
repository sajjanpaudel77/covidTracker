import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { MarkerType_$type } from "igniteui-react-charts";
import { CollisionAvoidanceType_$type } from "igniteui-react-charts";
import { IgrStyleShapeEventArgs } from "igniteui-react-charts";
import { IgrGeographicShapeSeriesBase } from "./igr-geographic-shape-series-base";
import { GeographicShapeSeries } from "./GeographicShapeSeries";
import { Style } from "igniteui-react-core";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Series class which renders polygons as Paths, in a geographic context, based on lists of points in the ItemsSource.
*/
export class IgrGeographicShapeSeries extends IgrGeographicShapeSeriesBase {
    constructor(props) {
        super(props);
        this._styleShape = null;
        this._styleShape_wrapped = null;
    }
    createImplementation() {
        return new GeographicShapeSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the fill brush.
    */
    get shapeFill() {
        return this.i.nh ? this.i.nh.fill : null;
    }
    set shapeFill(v) {
        this.ensureShapeStyle();
        this.i.nh.fill = v;
    }
    /**
     * Gets or sets the stroke brush.
    */
    get shapeStroke() {
        return this.i.nh ? this.i.nh.stroke : null;
    }
    set shapeStroke(v) {
        this.ensureShapeStyle();
        this.i.nh.stroke = v;
    }
    /**
     * Gets or sets the stroke thickness.
    */
    get shapeStrokeThickness() {
        return this.i.nh ? this.i.nh.strokeThickness : NaN;
    }
    set shapeStrokeThickness(v) {
        this.ensureShapeStyle();
        this.i.nh.strokeThickness = +v;
    }
    /**
     * Gets or sets the opacity.
    */
    get shapeOpacity() {
        return this.i.nh ? this.i.nh.opacity : NaN;
    }
    set shapeOpacity(v) {
        this.ensureShapeStyle();
        this.i.nh.opacity = +v;
    }
    ensureShapeStyle() {
        if (this.i.nh) {
            return;
        }
        this.i.nh = new Style();
    }
    /**
     * Gets or sets the marker type for the current series object.
     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
    */
    get markerType() {
        return this.i.mp;
    }
    set markerType(v) {
        this.i.mp = ensureEnum(MarkerType_$type, v);
    }
    /**
     * Gets or sets the MarkerTemplate for the current series object.
    */
    get markerTemplate() {
        return this.i.m4;
    }
    set markerTemplate(v) {
        this.i.m4 = v;
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
    */
    get markerBrush() {
        return brushToString(this.i.ne);
    }
    set markerBrush(v) {
        this.i.ne = stringToBrush(v);
    }
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
    */
    get markerOutline() {
        return brushToString(this.i.nf);
    }
    set markerOutline(v) {
        this.i.nf = stringToBrush(v);
    }
    /**
     * Gets or sets thickness of the marker outline
    */
    get markerThickness() {
        return this.i.ms;
    }
    set markerThickness(v) {
        this.i.ms = +v;
    }
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    get markerCollisionAvoidance() {
        return this.i.mo;
    }
    set markerCollisionAvoidance(v) {
        this.i.mo = ensureEnum(CollisionAvoidanceType_$type, v);
    }
    get styleShape() {
        return this._styleShape;
    }
    set styleShape(ev) {
        if (this._styleShape_wrapped !== null) {
            this.i.styleShape = delegateRemove(this.i.styleShape, this._styleShape_wrapped);
            this._styleShape_wrapped = null;
            this._styleShape = null;
        }
        this._styleShape = ev;
        this._styleShape_wrapped = (o, e) => {
            let outerArgs = new IgrStyleShapeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStyleShape) {
                this.beforeStyleShape(this, outerArgs);
            }
            if (this._styleShape) {
                this._styleShape(this, outerArgs);
            }
        };
        this.i.styleShape = delegateCombine(this.i.styleShape, this._styleShape_wrapped);
    }
}
//# sourceMappingURL=igr-geographic-shape-series.js.map
