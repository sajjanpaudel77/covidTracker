/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { GeographicMapImagery } from "./GeographicMapImagery";
import { DependencyProperty } from "igniteui-react-core";
import { ArcGISOnlineTileSource } from "igniteui-react-core";
import { String_$type, Boolean_$type, typeCast, markType } from "igniteui-react-core";
import { Uri } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { HttpRequestUtil } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringRemove } from "igniteui-react-core";
import { stringFormat1, stringFormat } from "igniteui-react-core";
/**
 * @hidden
 */
var ArcGISOnlineMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ArcGISOnlineMapImagery, _super);
    function ArcGISOnlineMapImagery() {
        var _this = _super.call(this, new ArcGISOnlineTileSource()) || this;
        _this.bm = 0;
        _this.br = null;
        _this.bq = null;
        _this._pendingTokenRequest_ = null;
        _this._pendingMapServerRequest_ = null;
        _this.bq = "localhost";
        _this.br = "https://www.arcgis.com/sharing/";
        _this.bm = 60;
        _this.userToken = null;
        _this.getResponseCompleted_MapServerResponse = _this.getResponseCompleted_MapServerResponse.bind(_this);
        _this.getResponseCompleted_TokenResponse = _this.getResponseCompleted_TokenResponse.bind(_this);
        return _this;
    }
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "mapServerUri", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.mapServerUriProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.mapServerUriProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.ca = function (a, b) {
        a.cc("MapServerUri", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "userName", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.userNameProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.userNameProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.cd = function (a, b) {
        a.cc("UserName", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "password", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.passwordProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.passwordProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.cb = function (a, b) {
        a.cc("Password", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "userToken", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.userTokenProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.userTokenProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.ce = function (a, b) {
        a.cc("UserToken", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "isMapPublic", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.isMapPublicProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.isMapPublicProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.b9 = function (a, b) {
        a.cc("IsMapPublic", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "defaultTokenTimeout", {
        get: function () {
            return this.bm;
        },
        set: function (a) {
            this.bm = a;
            this.b5(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "tokenGenerationEndPoint", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            this.br = a;
            this.b5(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "refererUri", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            this.bq = a;
            this.b5(true);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.prototype.acquireNewToken = function () {
        this.b5(true);
    };
    ArcGISOnlineMapImagery.prototype.b6 = function (a) {
        a();
    };
    ArcGISOnlineMapImagery.prototype.b5 = function (a) {
        if (stringIsNullOrEmpty(this.userToken) && a == false) {
            this.cf();
            return;
        }
        var b = this.tokenGenerationEndPoint;
        if (stringIsNullOrEmpty(b)) {
            this.userToken = "";
            return;
        }
        if (b.substr(b.length - 1, 1) != "/") {
            b += "/";
        }
        if (stringIsNullOrEmpty(this.refererUri)) {
            this.userToken = "";
            return;
        }
        var c = this.defaultTokenTimeout;
        if (c < 1) {
            c = 1;
        }
        b += stringFormat1(ArcGISOnlineMapImagery.bs, this.userName, this.password, this.refererUri, c);
        if (!Uri.isWellFormedUriString(b, 1)) {
            this.userToken = "";
            return;
        }
        var url_ = b;
        this._pendingTokenRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted_TokenResponse, null);
    };
    ArcGISOnlineMapImagery.prototype.cf = function () {
        if (stringIsNullOrEmpty(this.mapServerUri)) {
            return;
        }
        var a = this.mapServerUri;
        if (a.substr(a.length - 1, 1) == "/") {
            stringRemove(a, a.length - 1, 1);
        }
        if (!this.isMapPublic) {
            if (stringIsNullOrEmpty(this.userToken)) {
                return;
            }
            a = stringFormat("{0}?f=json&token={1}", a, this.userToken);
        }
        else {
            a = stringFormat("{0}?f=json", a);
        }
        if (!Uri.isWellFormedUriString(a, 1)) {
            return;
        }
        var url_ = a;
        this._pendingMapServerRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted_MapServerResponse, null);
    };
    ArcGISOnlineMapImagery.prototype.getResponseCompleted_TokenResponse = function (a, b) {
        if (b != this._pendingTokenRequest_) {
            return;
        }
        this._pendingTokenRequest_ = null;
        var data_ = a;
        var c = (JSON.parse(data_));
        if (c != null) {
            var d = "";
            if (c.token != null) {
                d = c.token;
            }
            this.userToken = d;
        }
    };
    ArcGISOnlineMapImagery.prototype.getResponseCompleted_MapServerResponse = function (a, b) {
        if (b != this._pendingMapServerRequest_) {
            return;
        }
        this._pendingMapServerRequest_ = null;
        var data_ = a;
        var c = (JSON.parse(data_));
        if ((c != null) && (c.tileInfo != null)) {
            this.ap.levelOfDetail = c.tileInfo.lods.length;
        }
    };
    ArcGISOnlineMapImagery.prototype.cc = function (a, b, c) {
        var _this = this;
        var d = typeCast(ArcGISOnlineTileSource.$, this.ap);
        switch (a) {
            case "MapServerUri":
                if (d != null) {
                    d.mapServerUri = typeCast(String_$type, c);
                }
                this.cf();
                break;
            case "UserName":
            case "Password":
                if (stringIsNullOrEmpty(this.userName) || stringIsNullOrEmpty(this.password)) {
                    return;
                }
                this.b5(true);
                break;
            case "UserToken":
                this.b6(function () { return d.userToken = _this.userToken; });
                this.cf();
                break;
            case "IsMapPublic":
                d.isMapPublic = this.isMapPublic;
                break;
        }
        _super.prototype.a8.call(this, a, b, c);
    };
    ArcGISOnlineMapImagery.$t = markType(ArcGISOnlineMapImagery, 'ArcGISOnlineMapImagery', GeographicMapImagery.$);
    ArcGISOnlineMapImagery.bs = "generateToken?username={0}&password={1}&client=referer&referer={2}&expiration={3}&f=pjson";
    ArcGISOnlineMapImagery.mapServerUriProperty = DependencyProperty.i("MapServerUri", String_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, null, ArcGISOnlineMapImagery.ca));
    ArcGISOnlineMapImagery.userNameProperty = DependencyProperty.i("UserName", String_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, null, ArcGISOnlineMapImagery.cd));
    ArcGISOnlineMapImagery.passwordProperty = DependencyProperty.i("Password", String_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, null, ArcGISOnlineMapImagery.cb));
    ArcGISOnlineMapImagery.userTokenProperty = DependencyProperty.i("UserToken", String_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, null, ArcGISOnlineMapImagery.ce));
    ArcGISOnlineMapImagery.isMapPublicProperty = DependencyProperty.i("IsMapPublic", Boolean_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, true, ArcGISOnlineMapImagery.b9));
    return ArcGISOnlineMapImagery;
}(GeographicMapImagery));
export { ArcGISOnlineMapImagery };
//# sourceMappingURL=ArcGISOnlineMapImagery.js.map
