/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { GeographicMapImageryView } from "./GeographicMapImageryView";
import { SubDomainsCollection } from "./SubDomainsCollection";
import { GeographicMapImagery } from "./GeographicMapImagery";
import { BingMapsTileSource } from "igniteui-react-core";
import { markType, String_$type, enumGetBox, runOn, delegateRemove, delegateCombine, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { BingMapsImageryStyle_$type } from "./BingMapsImageryStyle";
import { List$1 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { HttpRequestUtil } from "igniteui-react-core";
import { Uri } from "igniteui-react-core";
import { stringEmpty, stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var BingMapsMapImageryView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(BingMapsMapImageryView, _super);
    function BingMapsMapImageryView(a) {
        var _this = _super.call(this, a) || this;
        _this.k = a;
        return _this;
    }
    BingMapsMapImageryView.prototype.m = function () {
        if (this.k.subDomains == null) {
            this.k.subDomains = new SubDomainsCollection(0);
        }
        this.k.ap.tilePath = this.k.actualTilePath;
        this.k.ap.subDomains = this.k.actualSubDomains;
        this.k.ap.cultureName = this.k.cultureName;
    };
    BingMapsMapImageryView.prototype.o = function () {
        this.k.ap.tilePath = this.k.actualTilePath;
    };
    BingMapsMapImageryView.prototype.l = function () {
        this.k.ap.cultureName = this.k.cultureName;
    };
    BingMapsMapImageryView.prototype.n = function () {
        this.k.ap.subDomains = this.k.actualSubDomains;
    };
    BingMapsMapImageryView.$t = markType(BingMapsMapImageryView, 'BingMapsMapImageryView', GeographicMapImageryView.$);
    return BingMapsMapImageryView;
}(GeographicMapImageryView));
export { BingMapsMapImageryView };
/**
 * @hidden
 */
var BingMapsMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(BingMapsMapImagery, _super);
    function BingMapsMapImagery() {
        var _this = _super.call(this, new BingMapsTileSource(0)) || this;
        _this._pendingBingRequest_ = null;
        _this._isInitialized = false;
        _this.bw = null;
        _this.bn = null;
        _this.bx = null;
        _this.bv = null;
        _this.getResponseCompleted = _this.getResponseCompleted.bind(_this);
        _this.bm.m();
        _this.actualBingImageryRestUri = BingMapsMapImagery.b9;
        return _this;
    }
    BingMapsMapImagery.prototype.ai = function () {
        return new BingMapsMapImageryView(this);
    };
    BingMapsMapImagery.prototype.a9 = function (a) {
        _super.prototype.a9.call(this, a);
        this.bm = a;
    };
    Object.defineProperty(BingMapsMapImagery.prototype, "isInitialized", {
        get: function () {
            return this._isInitialized;
        },
        set: function (a) {
            this._isInitialized = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapsMapImagery.prototype, "actualTilePath", {
        get: function () {
            return this.bw;
        },
        set: function (a) {
            var b = this.bw;
            this.bw = a;
            this.cj("ActualTilePath", b, this.bw);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapsMapImagery.prototype, "actualSubDomains", {
        get: function () {
            return this.bn;
        },
        set: function (a) {
            var b = this.bn;
            this.bn = a;
            this.cj("ActualSubDomains", b, this.bn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapsMapImagery.prototype, "bingImageryRestUri", {
        get: function () {
            return this.bx;
        },
        set: function (a) {
            var b = this.bx;
            this.bx = a;
            this.cj("BingImageryRestUri", b, this.bx);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapsMapImagery.prototype, "actualBingImageryRestUri", {
        get: function () {
            return this.bv;
        },
        set: function (a) {
            var b = this.bv;
            this.bv = a;
            this.a8("ActualBingImageryRestUri", b, this.bv);
        },
        enumerable: true,
        configurable: true
    });
    BingMapsMapImagery.prototype.requestMapSettings = function () {
        this.cl(true);
    };
    BingMapsMapImagery.prototype.cl = function (a) {
        this.ci(a);
    };
    BingMapsMapImagery.prototype.bt = function () {
        if ((this.tilePath == null) && (this.subDomains == null)) {
            return true;
        }
        return false;
    };
    BingMapsMapImagery.prototype.cn = function () {
        this.isInitialized = false;
        if (!this.bs()) {
            this.cm("", null);
            return;
        }
        if (!this.isDeferredLoad) {
            this.cl(false);
        }
    };
    BingMapsMapImagery.prototype.bs = function () {
        if (stringIsNullOrEmpty(this.apiKey) || this.apiKey.length < 20) {
            return false;
        }
        return true;
    };
    BingMapsMapImagery.prototype.cg = function () {
    };
    BingMapsMapImagery.prototype.cm = function (a, b) {
        if (a != this.actualTilePath) {
            this.actualTilePath = a;
        }
        var c = b == null ? null : new SubDomainsCollection(1, b);
        if (this.actualSubDomains != c) {
            this.actualSubDomains = c;
        }
        this.bm.m();
    };
    BingMapsMapImagery.prototype.ci = function (a) {
        if ((!a) && (this.isDeferredLoad)) {
            return;
        }
        if (!this.bs()) {
            this.isInitialized = false;
            this.cm("", null);
            return;
        }
        this.isInitialized = true;
        var b = null;
        if (this.bingImageryRestUri != null) {
            if (Uri.isWellFormedUriString(this.bingImageryRestUri, 1)) {
                b = this.bingImageryRestUri;
            }
        }
        else {
            if (Uri.isWellFormedUriString(this.actualBingImageryRestUri, 1)) {
                b = this.actualBingImageryRestUri;
            }
        }
        if (b == null) {
            this.cm("", null);
            return;
        }
        var c = this.imageryStyle;
        b += enumGetBox(BingMapsImageryStyle_$type, c);
        var d = "key=" + this.apiKey + "&include=ImageryProviders";
        var url_ = b + "?" + d;
        this._pendingBingRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted, null);
    };
    BingMapsMapImagery.prototype.getResponseCompleted = function (a, b) {
        if (b != this._pendingBingRequest_) {
            return;
        }
        this._pendingBingRequest_ = null;
        var data_ = a;
        var resourceSets_ = JSON.parse(data_).resourceSets;
        if (resourceSets_ == null) {
            return;
        }
        var resources_ = resourceSets_.length > 0 ? resourceSets_[0].resources : null;
        if (resources_ == null) {
            return;
        }
        if (resources_.length == 0) {
            return;
        }
        ;
        var imageUrl_ = (resources_[0].imageUrl);
        var subDomains_ = new List$1(String_$type, 0);
        for (var i = 0; i < resources_[0].imageUrlSubdomains.length; i++) {
            subDomains_.add(resources_[0].imageUrlSubdomains[i]);
        }
        ;
        this.cm(imageUrl_, subDomains_);
    };
    BingMapsMapImagery.prototype.cf = function (a, b) {
        this.aj.e();
        this.cn();
        this.cj(BingMapsMapImagery.$$p[4], this.actualSubDomains, this.actualSubDomains);
    };
    BingMapsMapImagery.prototype.cj = function (a, b, c) {
        switch (a) {
            case BingMapsMapImagery.$$p[0]:
                this.cn();
                break;
            case BingMapsMapImagery.$$p[3]:
                this.cn();
                break;
            case BingMapsMapImagery.$$p[5]:
                this.cg();
                this.actualTilePath = c;
                this.bm.o();
                this.aj.e();
                break;
            case BingMapsMapImagery.$$p[1]:
                this.bm.l();
                this.aj.e();
                break;
            case BingMapsMapImagery.$$p[2]:
                this.cn();
                break;
            case BingMapsMapImagery.$$p[4]:
                this.cg();
                var d = b;
                var e = c;
                if (this.actualSubDomains != null) {
                    var f = this.actualSubDomains;
                    f.collectionChanged = delegateRemove(f.collectionChanged, runOn(this, this.cf));
                }
                this.actualSubDomains = e;
                if (this.actualSubDomains != null) {
                    e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.cf));
                }
                this.bm.n();
                this.aj.e();
                break;
            case "ActualTilePath":
                var g = c;
                if (stringIsNullOrEmpty(g)) {
                    this.cn();
                }
                break;
            case "BingImageryRestUri":
                this.actualBingImageryRestUri = c;
                this.cg();
                this.cn();
                break;
            case "ActualBingImageryRestUri":
                this.cg();
                this.cn();
                break;
        }
        _super.prototype.a8.call(this, a, b, c);
    };
    BingMapsMapImagery.$t = markType(BingMapsMapImagery, 'BingMapsMapImagery', GeographicMapImagery.$);
    BingMapsMapImagery.b9 = "http://dev.virtualearth.net/REST/v1/Imagery/Metadata/";
    BingMapsMapImagery.$$p = markDep(DependencyProperty, PropertyMetadata, BingMapsMapImagery, 'cj', ['ApiKey', [2, stringEmpty()], 'CultureName', [2, "en-US"], 'ImageryStyle', [BingMapsImageryStyle_$type, enumGetBox(BingMapsImageryStyle_$type, 1)], 'IsDeferredLoad', [0, false], 'SubDomains', [SubDomainsCollection.$, null], 'TilePath', [2, null]]);
    return BingMapsMapImagery;
}(GeographicMapImagery));
export { BingMapsMapImagery };
//# sourceMappingURL=BingMapsMapImageryView_combined.js.map
