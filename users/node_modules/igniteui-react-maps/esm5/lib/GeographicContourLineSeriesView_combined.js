/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { GeographicXYTriangulatingSeriesView } from "./GeographicXYTriangulatingSeriesView";
import { ScatterContourSeries } from "igniteui-react-charts";
import { markType, runOn, delegateCombine, markDep } from "igniteui-react-core";
import { GeographicXYTriangulatingSeries } from "./GeographicXYTriangulatingSeries";
import { DependencyProperty } from "igniteui-react-core";
import { ValueBrushScale } from "igniteui-react-charts";
import { ContourValueResolver } from "igniteui-react-charts";
import { PropertyMetadata } from "igniteui-react-core";
/**
 * @hidden
 */
var GeographicContourLineSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicContourLineSeriesView, _super);
    function GeographicContourLineSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b8 = null;
        _this.b8 = a;
        return _this;
    }
    GeographicContourLineSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        if (this.b8.l3 != null) {
            this.b8.mv.nl = this.b8.mx;
            this.b8.mv.nq = this.b8.m0;
        }
    };
    GeographicContourLineSeriesView.prototype.b9 = function () {
        if (this.b8.mv != null) {
            this.b8.mv.nl = this.b8.mx;
        }
    };
    GeographicContourLineSeriesView.prototype.ca = function () {
        if (this.b8.mv != null) {
            this.b8.mv.nq = this.b8.m0;
        }
    };
    GeographicContourLineSeriesView.$t = markType(GeographicContourLineSeriesView, 'GeographicContourLineSeriesView', GeographicXYTriangulatingSeriesView.$);
    return GeographicContourLineSeriesView;
}(GeographicXYTriangulatingSeriesView));
export { GeographicContourLineSeriesView };
/**
 * @hidden
 */
var GeographicContourLineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicContourLineSeries, _super);
    function GeographicContourLineSeries() {
        var _this = _super.call(this) || this;
        _this.triangulationStatusChanged = null;
        _this.ab = GeographicContourLineSeries.$;
        return _this;
    }
    GeographicContourLineSeries.prototype.l8 = function () {
        _super.prototype.l8.call(this);
    };
    GeographicContourLineSeries.prototype.l2 = function () {
        this.mv = new ScatterContourSeries();
        var a = this.mv;
        a.triangulationStatusChanged = delegateCombine(a.triangulationStatusChanged, runOn(this, this.m3));
        return this.mv;
    };
    GeographicContourLineSeries.prototype.m3 = function (a, b) {
        if (this.triangulationStatusChanged != null) {
            this.triangulationStatusChanged(this, b);
        }
    };
    GeographicContourLineSeries.prototype.bf = function () {
        return new GeographicContourLineSeriesView(this);
    };
    GeographicContourLineSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.my = a;
    };
    GeographicContourLineSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case GeographicContourLineSeries.$$p[0]:
                this.my.b9();
                break;
            case GeographicContourLineSeries.$$p[1]:
                this.my.ca();
                break;
            case GeographicContourLineSeries.$$p[2]:
                this.mv.nj = this.mu;
                break;
            case "Thickness":
                this.mv.ey = this.ey;
                break;
            case "DashArray":
                this.mv.lc = this.lc;
                break;
            case "DashCap":
                this.mv.ld = this.ld;
                break;
            case "MiterLimit":
                this.mv.es = this.es;
                break;
        }
    };
    GeographicContourLineSeries.$t = markType(GeographicContourLineSeries, 'GeographicContourLineSeries', GeographicXYTriangulatingSeries.$);
    GeographicContourLineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicContourLineSeries, 'raisePropertyChanged', ['FillScale:mx:m4', [ValueBrushScale.$, null], 'ValueMemberPath:m0:m5', [2, "value"], 'ValueResolver:mu:m6', [ContourValueResolver.$, null]]);
    return GeographicContourLineSeries;
}(GeographicXYTriangulatingSeries));
export { GeographicContourLineSeries };
//# sourceMappingURL=GeographicContourLineSeriesView_combined.js.map
