/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { GeographicMapSeriesHost } from "./GeographicMapSeriesHost";
import { DependencyProperty } from "igniteui-react-core";
import { runOn, delegateRemove, delegateCombine, markType, markDep } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { HostSeriesView } from "./HostSeriesView";
/**
 * @hidden
 */
var GeographicShapeSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicShapeSeriesBase, _super);
    function GeographicShapeSeriesBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mc = null;
        _this.me = false;
        return _this;
    }
    GeographicShapeSeriesBase.prototype.bf = function () {
        return new GeographicShapeSeriesBaseView(this);
    };
    GeographicShapeSeriesBase.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.mb = a;
    };
    GeographicShapeSeriesBase.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.mb.b3();
                break;
            case "ActualBrush":
                this.mb.b1();
                break;
            case "ActualOutline":
                this.mb.b2();
                break;
            case "ShapeMemberPath":
                this.mb.b5();
                break;
            case "Thickness":
                this.mb.b6();
                break;
            case GeographicShapeSeriesBase.$$p[0]:
                this.mb.b4();
                break;
            case "ShapefileDataSource":
                if (c != null) {
                    var e = c;
                    if (this.me) {
                        e.importCompleted = delegateRemove(e.importCompleted, runOn(this, this.mk));
                    }
                }
                if (d != null) {
                    var f = d;
                    if (f.count > 0) {
                        this.ml();
                        break;
                    }
                    this.me = true;
                    f.importCompleted = delegateCombine(f.importCompleted, runOn(this, this.mk));
                }
                break;
        }
    };
    GeographicShapeSeriesBase.prototype.mk = function (a, b) {
        this.ml();
    };
    GeographicShapeSeriesBase.prototype.ml = function () {
        var sds_ = this.md;
        var ext_ = sds_.externalObject;
        this.itemsSource = (ext_.getPointData());
    };
    Object.defineProperty(GeographicShapeSeriesBase.prototype, "md", {
        get: function () {
            return this.mc;
        },
        set: function (a) {
            var b = this.mc;
            this.mc = a;
            if (b != this.mc) {
                this.raisePropertyChanged("ShapefileDataSource", b, this.mc);
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicShapeSeriesBase.prototype.get_dq = function () {
        return true;
    };
    GeographicShapeSeriesBase.prototype.set_dq = function (a) {
        _super.prototype.set_dq.call(this, a);
    };
    GeographicShapeSeriesBase.$t = markType(GeographicShapeSeriesBase, 'GeographicShapeSeriesBase', GeographicMapSeriesHost.$);
    GeographicShapeSeriesBase.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicShapeSeriesBase, 'raisePropertyChanged', ['ShapeFilterResolution:mf:mm', [1, 2], 'ShapeMemberPath:mi:mn', [2, "points"]]);
    return GeographicShapeSeriesBase;
}(GeographicMapSeriesHost));
export { GeographicShapeSeriesBase };
/**
 * @hidden
 */
var GeographicShapeSeriesBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicShapeSeriesBaseView, _super);
    function GeographicShapeSeriesBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicShapeSeriesBaseView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        this.b0.l3.mv = this.b0.mi;
        this.b0.l3.k6 = this.b0.k4;
        this.b0.l3.k9 = this.b0.k5;
    };
    GeographicShapeSeriesBaseView.prototype.b3 = function () {
        var a = this.b0.l3;
        if (this.b0.bs == null) {
            a.l7 = null;
            a.l9 = null;
            return;
        }
        a.l7 = this.b0.bs.nc;
        a.l9 = this.b0.bs.ne;
    };
    GeographicShapeSeriesBaseView.prototype.b1 = function () {
        this.b0.l3.k6 = this.b0.k4;
    };
    GeographicShapeSeriesBaseView.prototype.b2 = function () {
        this.b0.l3.k9 = this.b0.k5;
    };
    GeographicShapeSeriesBaseView.prototype.b5 = function () {
        this.b0.l3.mv = this.b0.mi;
    };
    GeographicShapeSeriesBaseView.prototype.b6 = function () {
        this.b0.l3.ey = this.b0.ey;
    };
    GeographicShapeSeriesBaseView.prototype.b4 = function () {
        this.b0.l3.mp = this.b0.mf;
    };
    GeographicShapeSeriesBaseView.$t = markType(GeographicShapeSeriesBaseView, 'GeographicShapeSeriesBaseView', HostSeriesView.$);
    return GeographicShapeSeriesBaseView;
}(HostSeriesView));
export { GeographicShapeSeriesBaseView };
//# sourceMappingURL=GeographicShapeSeriesBase_combined.js.map
