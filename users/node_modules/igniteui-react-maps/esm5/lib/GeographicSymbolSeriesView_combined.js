/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { HostSeriesView } from "./HostSeriesView";
import { GeographicMapSeriesHost } from "./GeographicMapSeriesHost";
import { ScatterSeries } from "igniteui-react-charts";
import { markType, enumGetBox, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { MarkerType_$type } from "igniteui-react-charts";
import { CollisionAvoidanceType_$type } from "igniteui-react-charts";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
/**
 * @hidden
 */
var GeographicSymbolSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicSymbolSeriesView, _super);
    function GeographicSymbolSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicSymbolSeriesView.prototype.bv = function () {
        var a = this.b0.l3;
        _super.prototype.bv.call(this);
        a.nv = this.b0.mk;
        a.nz = this.b0.mi;
        a.l2 = this.b0.mc;
        a.mn = this.b0.mu;
        a.l7 = this.b0.mg;
    };
    GeographicSymbolSeriesView.prototype.b2 = function () {
        this.b0.l3.nv = this.b0.mk;
    };
    GeographicSymbolSeriesView.prototype.b1 = function () {
        this.b0.l3.nz = this.b0.mi;
    };
    GeographicSymbolSeriesView.prototype.b8 = function () {
        this.b0.l3.l2 = this.b0.mc;
    };
    GeographicSymbolSeriesView.prototype.b6 = function () {
        this.b0.l3.mn = this.b0.mu;
    };
    GeographicSymbolSeriesView.prototype.b7 = function () {
        this.b0.l3.l7 = this.b0.mg;
    };
    GeographicSymbolSeriesView.prototype.b9 = function () {
        this.b0.l3.no = this.b0.mh;
    };
    GeographicSymbolSeriesView.prototype.cb = function () {
        this.b0.l3.xAxis = this.b0.bs.nc;
    };
    GeographicSymbolSeriesView.prototype.cc = function () {
        this.b0.l3.yAxis = this.b0.bs.ne;
    };
    GeographicSymbolSeriesView.prototype.ca = function () {
        var a = this.b0.l3;
        if (this.b0.bs == null) {
            a.xAxis = null;
            a.yAxis = null;
            return;
        }
        a.xAxis = this.b0.bs.nc;
        a.yAxis = this.b0.bs.ne;
    };
    GeographicSymbolSeriesView.prototype.b4 = function () {
        this.b0.l3.m5 = this.b0.mb;
    };
    GeographicSymbolSeriesView.prototype.b3 = function () {
        this.b0.l3.m1 = this.b0.m5;
    };
    GeographicSymbolSeriesView.prototype.b5 = function () {
        this.b0.l3.m2 = this.b0.m6;
    };
    GeographicSymbolSeriesView.$t = markType(GeographicSymbolSeriesView, 'GeographicSymbolSeriesView', HostSeriesView.$);
    return GeographicSymbolSeriesView;
}(HostSeriesView));
export { GeographicSymbolSeriesView };
/**
 * @hidden
 */
var GeographicSymbolSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicSymbolSeries, _super);
    function GeographicSymbolSeries() {
        var _this = _super.call(this) || this;
        _this.md = null;
        _this.ab = GeographicSymbolSeries.$;
        return _this;
    }
    GeographicSymbolSeries.prototype.bf = function () {
        return new GeographicSymbolSeriesView(this);
    };
    GeographicSymbolSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.me = a;
    };
    GeographicSymbolSeries.prototype.l2 = function () {
        return new ScatterSeries();
    };
    GeographicSymbolSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.me.ca();
                break;
            case GeographicSymbolSeries.$$p[1]:
                this.me.b2();
                break;
            case GeographicSymbolSeries.$$p[0]:
                this.me.b1();
                break;
            case GeographicSymbolSeries.$$p[3]:
                this.me.b4();
                break;
            case GeographicSymbolSeries.$$p[7]:
                this.me.b8();
                break;
            case GeographicSymbolSeries.$$p[5]:
                this.me.b6();
                break;
            case GeographicSymbolSeries.$$p[6]:
                this.me.b7();
                break;
            case GeographicSymbolSeries.$$p[8]:
                this.me.b9();
                break;
            case "XAxis":
                this.me.cb();
                break;
            case "YAxis":
                this.me.cc();
                break;
            case GeographicSymbolSeries.$$p[2]:
                this.me.b3();
                break;
            case GeographicSymbolSeries.$$p[4]:
                this.me.b5();
                break;
        }
    };
    GeographicSymbolSeries.$t = markType(GeographicSymbolSeries, 'GeographicSymbolSeries', GeographicMapSeriesHost.$);
    GeographicSymbolSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicSymbolSeries, 'raisePropertyChanged', ['LatitudeMemberPath:mi:mv', [2, null], 'LongitudeMemberPath:mk:mw', [2, null], 'MarkerBrush:m5:mx', [Brush.$], 'MarkerCollisionAvoidance:mb:my', [CollisionAvoidanceType_$type, enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerOutline:m6:mz', [Brush.$], 'MarkerTemplate:mu:m0', [DataTemplate.$, null], 'MarkerThickness:mg:m1', [1, DeviceUtils.g(2)], 'MarkerType:mc:m2', [MarkerType_$type, enumGetBox(MarkerType_$type, 2)], 'MaximumMarkers:mh:m3', [1, 400], 'UseLightweightMarkers:mf:m4', [0, false]]);
    return GeographicSymbolSeries;
}(GeographicMapSeriesHost));
export { GeographicSymbolSeries };
//# sourceMappingURL=GeographicSymbolSeriesView_combined.js.map
