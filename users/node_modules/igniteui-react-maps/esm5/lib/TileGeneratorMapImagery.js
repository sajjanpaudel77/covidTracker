/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { GeographicMapImagery } from "./GeographicMapImagery";
import { ITileGenerator_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { TileGeneratorTileSource } from "igniteui-react-core";
import { runOn, delegateCombine, markType, markDep } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { stringReplace } from "igniteui-react-core";
/**
 * @hidden
 */
var TileGeneratorMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(TileGeneratorMapImagery, _super);
    function TileGeneratorMapImagery() {
        var _this = _super.call(this, new TileGeneratorTileSource()) || this;
        _this.downloadingImage = delegateCombine(_this.downloadingImage, runOn(_this, _this.bo));
        _this.cancellingImage = delegateCombine(_this.cancellingImage, runOn(_this, _this.bn));
        return _this;
    }
    TileGeneratorMapImagery.prototype.bn = function (a, b) {
        var c = b.uri.toString().split('/');
        var d = parseInt(stringReplace(c[3], "/", ""));
        var e = parseInt(stringReplace(c[4], "/", ""));
        var f = parseInt(stringReplace(stringReplace(c[5], "/", ""), ".png", ""));
        if (this.tileGenerator != null) {
            this.tileGenerator.cancelTile(d, e, f);
        }
    };
    TileGeneratorMapImagery.prototype.bo = function (a, b) {
        var _this = this;
        var c = b.uri.toString().split('/');
        var d = parseInt(stringReplace(c[3], "/", ""));
        var e = parseInt(stringReplace(c[4], "/", ""));
        var f = parseInt(stringReplace(stringReplace(c[5], "/", ""), ".png", ""));
        b.uri = null;
        var img_ = b.image;
        if (this.tileGenerator != null) {
            this.tileGenerator.getTile(d, e, f, function (g, h) { return _this.deferralHandler.deferAction(function () { return img_.src = h.url; }); }, function (g, h) {
            }, function (g, h) {
            }, img_);
        }
    };
    TileGeneratorMapImagery.$t = markType(TileGeneratorMapImagery, 'TileGeneratorMapImagery', GeographicMapImagery.$);
    TileGeneratorMapImagery.$$p = markDep(DependencyProperty, PropertyMetadata, TileGeneratorMapImagery, 'a8', ['TileGenerator', [ITileGenerator_$type, null]]);
    return TileGeneratorMapImagery;
}(GeographicMapImagery));
export { TileGeneratorMapImagery };
//# sourceMappingURL=TileGeneratorMapImagery.js.map
