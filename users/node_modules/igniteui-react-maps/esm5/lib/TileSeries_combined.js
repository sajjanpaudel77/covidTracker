/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { ShapeSeriesBase } from "igniteui-react-charts";
import { IMapRenderDeferralHandler_$type } from "igniteui-react-core";
import { EventArgs, runOn, delegateRemove, delegateCombine, typeCast, markType } from "igniteui-react-core";
import { XamGeographicMap } from "./XamGeographicMap";
import { ShapeSeriesViewBase } from "igniteui-react-charts";
import { RenderingContext } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
/**
 * @hidden
 */
var TileSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(TileSeries, _super);
    function TileSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ne = null;
        _this.nd = null;
        _this.imageTilesReady = null;
        _this.nh = null;
        _this.ni = false;
        return _this;
    }
    TileSeries.prototype.bf = function () {
        return new TileSeriesView(this);
    };
    TileSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.nc = a;
    };
    TileSeries.prototype.get_mi = function () {
        return false;
    };
    Object.defineProperty(TileSeries.prototype, "ng", {
        get: function () {
            return this.ne;
        },
        set: function (a) {
            var b = a != this.ng;
            if (b) {
                var c = this.ng;
                this.ne = a;
                this.raisePropertyChanged("TileImagery", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TileSeries.prototype, "nf", {
        get: function () {
            return this.nd;
        },
        set: function (a) {
            var b = this.nd;
            this.nd = a;
            this.raisePropertyChanged("ActualTileImagery", b, this.nd);
        },
        enumerable: true,
        configurable: true
    });
    TileSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        var e;
        var f;
        switch (b) {
            case "TileImagery":
                e = c;
                f = d;
                if (e != null) {
                    e.propertyChanged = delegateRemove(e.propertyChanged, runOn(this, this.nl));
                }
                if (f != null) {
                    f.propertyChanged = delegateCombine(f.propertyChanged, runOn(this, this.nl));
                }
                this.nc.c5(e, f);
                this.je(false);
                this.il();
                break;
            case "ActualTileImagery":
                e = c;
                f = d;
                if (e != null) {
                    e.imageTilesReady = delegateRemove(e.imageTilesReady, runOn(this, this.nm));
                    e.deferralHandler = null;
                }
                if (f != null) {
                    f.imageTilesReady = delegateCombine(f.imageTilesReady, runOn(this, this.nm));
                    f.deferralHandler = this;
                }
                this.nc.c4(e, f);
                if (f != null && typeCast(XamGeographicMap.$, this.bs) !== null) {
                    f.geographicMap = this.bs;
                    this.no(this.bi);
                    this.nc.c1(this.bs.mr);
                }
                this.il();
                break;
            case "ActualWindowRect":
                this.nc.c1(d);
                break;
            case "WorldRect":
                this.nc.c8(d);
                break;
            case "SeriesViewer":
                var g = c;
                var h = d;
                if (g != null && this.nf != null) {
                    this.nf.bc(null);
                }
                if (h != null && this.nf != null) {
                    this.nf.bc(this.bi.t);
                }
                break;
        }
    };
    TileSeries.prototype.nl = function (a, b) {
        if (b.propertyName == "MultiScaleImage") {
            this.no(this.bi);
        }
    };
    TileSeries.prototype.nm = function (a, b) {
        if (this.imageTilesReady != null) {
            this.imageTilesReady(this, new EventArgs());
        }
        if (!this.ni) {
            this.nc.c6();
        }
    };
    TileSeries.prototype.register = function (a, b) {
        this.nh = b;
    };
    TileSeries.prototype.unRegister = function (a) {
        this.nh = null;
    };
    TileSeries.prototype.deferredRefresh = function () {
        this.je(false);
    };
    TileSeries.prototype.deferAction = function (a) {
        if (this.e4 != null) {
            this.e4.setTimeout(a, 0);
        }
        else {
            window.setTimeout(a, 0);
        }
    };
    TileSeries.prototype.jt = function (a, b) {
        this.nc.c7();
        _super.prototype.jt.call(this, a, b);
    };
    TileSeries.prototype.jf = function (a) {
        _super.prototype.jf.call(this, a);
        this.nn(a, this.bi);
    };
    TileSeries.prototype.nn = function (a, b) {
        var c;
        var d;
        var e = b;
        var f = b.getViewInfo(c, d);
        c = f.p0;
        d = f.p1;
        this.no(b);
        if (this.nh != null) {
            this.ni = true;
            this.nh(a);
            this.ni = false;
        }
        e.c6();
    };
    TileSeries.prototype.jd = function (a, b, c, d, e) {
        _super.prototype.jd.call(this, a, b, c, d, e);
        var f = this.dz.item(d);
        f.ay(c);
        if (this.cc(f)) {
            return;
        }
        this.m1(f);
    };
    TileSeries.prototype.no = function (a) {
        var b;
        var c;
        var d = a.getViewInfo(b, c);
        b = d.p0;
        c = d.p1;
        if (this.ng != null && this.ng.ao != null) {
            if (this.ng != this.nf) {
                this.nf = this.ng;
            }
            if (this.nf != null && !b.isEmpty) {
                if (this.nf.width != b.width) {
                    this.nf.width = b.width;
                }
                if (this.nf.height != b.height) {
                    this.nf.height = b.height;
                }
            }
        }
    };
    TileSeries.prototype.hw = function (a, b) {
        _super.prototype.hw.call(this, a, b);
        b.c2();
    };
    TileSeries.$t = markType(TileSeries, 'TileSeries', ShapeSeriesBase.$, [IMapRenderDeferralHandler_$type]);
    return TileSeries;
}(ShapeSeriesBase));
export { TileSeries };
/**
 * @hidden
 */
var TileSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(TileSeriesView, _super);
    function TileSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.cy = null;
        _this.c9 = new GeometryGroup();
        _this.c0 = null;
        _this.cz = null;
        _this.cy = a;
        return _this;
    }
    TileSeriesView.prototype.ca = function (a, b) {
        if (b.c.count > 0) {
            this.c9.d.add(b);
        }
    };
    TileSeriesView.prototype.cu = function (a, b) {
        return this.cv(a, b, true);
    };
    TileSeriesView.prototype.ct = function (a, b) {
        return null;
    };
    TileSeriesView.prototype.ce = function (a) {
    };
    TileSeriesView.prototype.cc = function (a, b) {
    };
    TileSeriesView.prototype.cj = function () {
        _super.prototype.cj.call(this);
        this.c9.d.clear();
    };
    TileSeriesView.prototype.ci = function () {
        _super.prototype.ci.call(this);
        this.an();
    };
    TileSeriesView.prototype.c1 = function (a) {
        if (this.cy.ng != null) {
            this.cy.ng.windowRect = a;
        }
    };
    TileSeriesView.prototype.c4 = function (a, b) {
        if (this.c0 == null) {
            this.c0 = this.e.e4.createElement("canvas");
            var c = this.e.e4.get2DCanvasContext(this.c0);
            this.cz = new RenderingContext(new CanvasViewRenderer(), c);
            this.c0.setAttribute("width", this.br.width.toString());
            this.c0.setAttribute("height", this.br.height.toString());
        }
        if (a != null) {
            a.bb(null);
            a.bc(null);
            a.imagesChanged = delegateRemove(a.imagesChanged, runOn(this, this.c3));
        }
        if (b != null) {
            if (this.t != null) {
                b.bc(this.t);
            }
            b.bb(this.cz);
            b.bd(this.br);
            b.imagesChanged = delegateCombine(b.imagesChanged, runOn(this, this.c3));
        }
    };
    TileSeriesView.prototype.c3 = function (a, b) {
        this.an();
    };
    TileSeriesView.prototype.c5 = function (a, b) {
    };
    TileSeriesView.prototype.c7 = function () {
        if (this.c0 != null) {
            this.c0.setAttribute("width", this.br.width.toString());
            this.c0.setAttribute("height", this.br.height.toString());
        }
        if (this.cy.ng != null) {
            this.cy.ng.bd(this.br);
        }
    };
    TileSeriesView.prototype.a3 = function (a, b) {
        _super.prototype.a3.call(this, a, b);
        if (b) {
            return;
        }
        if (this.c0 == null) {
            return;
        }
        var c = false;
        if (this.c9.d.count > 0) {
            c = true;
            this.h.z();
            this.h.q(this.c9);
            var d = this.h.g();
            d.clip();
        }
        var e = truncate(Math.round(this.br.left));
        var f = truncate(Math.round(this.br.top));
        var g = truncate(Math.round(this.br.width));
        var h = truncate(Math.round(this.br.height));
        this.h.n(this.c0.getNativeElement(), 1, e, f, g, h, e, f, g, h);
        if (c) {
            this.h.y();
        }
    };
    TileSeriesView.prototype.c6 = function () {
        this.an();
    };
    TileSeriesView.prototype.c2 = function () {
    };
    TileSeriesView.prototype.c8 = function (a) {
        if (this.cy.ng != null) {
            this.cy.ng.a4();
        }
    };
    TileSeriesView.$t = markType(TileSeriesView, 'TileSeriesView', ShapeSeriesViewBase.$);
    return TileSeriesView;
}(ShapeSeriesViewBase));
export { TileSeriesView };
//# sourceMappingURL=TileSeries_combined.js.map
