/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { SeriesViewer } from "igniteui-react-charts";
import { IMapRenderDeferralHandler_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { MapResizeBehavior_$type } from "./MapResizeBehavior";
import { Rect } from "igniteui-react-core";
import { Base, typeCast, enumGetBox, Point_$type, fromEnum, runOn, delegateRemove, delegateCombine, markType, markDep, INotifyPropertyChanged_$type, PropertyChangedEventArgs, String_$type, IEnumerable_$type } from "igniteui-react-core";
import { NumericXAxis } from "igniteui-react-charts";
import { NumericYAxis } from "igniteui-react-charts";
import { SphericalMercatorVerticalScaler } from "./SphericalMercatorVerticalScaler";
import { Control } from "igniteui-react-core";
import { SphericalMercatorHorizontalScaler } from "./SphericalMercatorHorizontalScaler";
import { ScalerParams } from "igniteui-react-charts";
import { Brush } from "igniteui-react-core";
import { SeriesViewerView } from "igniteui-react-charts";
import { MathUtil } from "igniteui-react-core";
import { ImageTilesReadyEventArgs } from "./ImageTilesReadyEventArgs";
import { ItfConverter } from "igniteui-react-core";
import { ChartVisualData } from "igniteui-react-charts";
import { RectData } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, intDivide, isNaN_ } from "igniteui-react-core";
import { XamMultiScaleImage } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { ImagesChangedEventArgs } from "./ImagesChangedEventArgs";
import { HostSeriesView } from "./HostSeriesView";
import { GeographicMapSeriesHost } from "./GeographicMapSeriesHost";
import { ScatterAreaSeries } from "igniteui-react-charts";
import { OpenStreetMapTileSource } from "igniteui-react-core";
/**
 * @hidden
 */
var XamGeographicMap = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(XamGeographicMap, _super);
    function XamGeographicMap() {
        var _this = _super.call(this) || this;
        _this.nv = null;
        _this.nr = 0;
        _this.oy = null;
        _this.nf = null;
        _this.nb = null;
        _this.nd = null;
        _this.nh = null;
        _this.ou = { $type: Point_$type, x: NaN, y: NaN };
        _this.o1 = null;
        _this.nq = 1;
        _this.imageTilesReady = null;
        _this.nl = null;
        _this.o0 = Rect.empty;
        _this.nr = SphericalMercatorVerticalScaler.am(XamGeographicMap.oz.bottom) - SphericalMercatorVerticalScaler.am(XamGeographicMap.oz.top);
        _this.ab = XamGeographicMap.$;
        _this.backgroundContent = new OpenStreetMapImagery();
        var a = ((function () {
            var $ret = new NumericXAxis();
            $ret.bh = _this;
            return $ret;
        })());
        a.b8 = true;
        _this.nc = a;
        _this.nc.ln = new SphericalMercatorHorizontalScaler();
        var b = ((function () {
            var $ret = new NumericYAxis();
            $ret.bh = _this;
            return $ret;
        })());
        b.b8 = true;
        _this.ne = b;
        _this.ne.ln = new SphericalMercatorVerticalScaler();
        _this.ob();
        _this.oi();
        _this.hs();
        return _this;
    }
    XamGeographicMap.prototype.provideContainer = function (a) {
        _super.prototype.provideContainer.call(this, a);
        this.nc.provideRenderer(a);
        this.ne.provideRenderer(a);
    };
    XamGeographicMap.prototype.hs = function () {
        _super.prototype.hs.call(this);
        this.nk.fm(this.ea);
    };
    XamGeographicMap.prototype.c3 = function () {
        return this.no;
    };
    XamGeographicMap.prototype.c4 = function () {
        return this.no;
    };
    Object.defineProperty(XamGeographicMap.prototype, "o3", {
        get: function () {
            return this.oy;
        },
        set: function (a) {
            var b = Rect.l_op_Inequality(this.oy, a);
            if (b) {
                var c = this.oy;
                this.oy = a;
                this.ji("ActualWorldRect", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.prototype.o7 = function () {
        return this.o3;
    };
    XamGeographicMap.prototype.ob = function () {
        if (this.pf.isEmpty) {
            return;
        }
        this.o3 = this.pd(this.pf, true);
    };
    XamGeographicMap.prototype.pd = function (a, b) {
        var c = a.top;
        var d = a.left;
        var e = a.width;
        var f = a.height;
        var g = SphericalMercatorVerticalScaler.am(a.bottom);
        var h = SphericalMercatorVerticalScaler.am(a.top);
        var i = g - h;
        var j = a.width / XamGeographicMap.oz.width;
        var k = SphericalMercatorVerticalScaler.am(XamGeographicMap.oz.top);
        var l = i / j;
        if (i / j > this.nr) {
            var m = i / this.nr;
            var n = m - j;
            d = d - (n / 2) * XamGeographicMap.oz.width;
            e = m * XamGeographicMap.oz.width;
            if (b) {
                if (d < XamGeographicMap.oz.left) {
                    d += (XamGeographicMap.oz.left - d);
                }
                else if ((d + e) > XamGeographicMap.oz.right) {
                    d -= ((d + e) - XamGeographicMap.oz.right);
                }
            }
        }
        else if (i / j < this.nr) {
            var o = this.nr * j;
            var p = o - i;
            var q = h - (p / 2);
            var r = g + (p / 2);
            if (b) {
                if (q < k) {
                    q += (k - q);
                    r += (k - q);
                }
                else if (r > (k + this.nr)) {
                    q -= ((r) - (k + this.nr));
                    r -= ((r) - (k + this.nr));
                }
            }
            c = SphericalMercatorVerticalScaler.aq(q);
            f = SphericalMercatorVerticalScaler.aq(r) - c;
        }
        var s = new Rect(0, d, c, e, f);
        return s;
    };
    Object.defineProperty(XamGeographicMap.prototype, "backgroundContent", {
        get: function () {
            return this.nf;
        },
        set: function (a) {
            var b = a != this.backgroundContent;
            if (b) {
                var c = this.backgroundContent;
                this.nf = a;
                this.ji("BackgroundContent", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamGeographicMap.prototype, "nc", {
        get: function () {
            return this.nb;
        },
        set: function (a) {
            var b = a != this.nc;
            if (b) {
                var c = this.nc;
                this.nb = a;
                this.ji("XAxis", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamGeographicMap.prototype, "ne", {
        get: function () {
            return this.nd;
        },
        set: function (a) {
            var b = a != this.ne;
            if (b) {
                var c = this.ne;
                this.nd = a;
                this.ji("YAxis", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.prototype.getZoomRectFromGeoRect = function (a) {
        return this.getZoomFromGeographicRect(a);
    };
    XamGeographicMap.prototype.ol = function (a) {
        this.m6 = a;
    };
    XamGeographicMap.prototype.ok = function (a) {
        this.pf = a;
    };
    XamGeographicMap.prototype.getZoomFromGeographicRect = function (a) {
        return this.o5(a, true, 0);
    };
    XamGeographicMap.prototype.o4 = function (a, b) {
        return this.o5(a, false, b);
    };
    XamGeographicMap.prototype.o5 = function (a, b, c) {
        var d = a;
        if (b) {
            d = this.pd(a, false);
        }
        var e = this.nc;
        var f = this.ne;
        var g = new ScalerParams(1, XamGeographicMap.o2, this.m5, e.ca);
        g.c = this.mv;
        var h = new ScalerParams(1, XamGeographicMap.o2, this.m5, f.ca);
        h.c = this.mv;
        var i = this.nc.dy(d.left, g);
        var j = this.nc.dy(d.right, g);
        var k = this.ne.dy(d.top, h);
        var l = this.ne.dy(d.bottom, h);
        var m = (i - c) / this.m5.width;
        var n = (l - c) / this.m5.height;
        var o = (j - i + (c * 2)) / this.m5.width;
        var p = (k - l + (c * 2)) / this.m5.height;
        var q = new Rect(0, m, n, o, p);
        q.intersect(XamGeographicMap.o2);
        if (q.isEmpty) {
            q = XamGeographicMap.o2;
        }
        return q;
    };
    XamGeographicMap.prototype.getZoomFromGeographicPoints = function (a, b) {
        var c = a.x;
        var d = b.y;
        var e = b.x - a.x;
        var f = a.y - b.y;
        if (e < 0 || f < 0) {
            return XamGeographicMap.o2;
        }
        else {
            var g = new Rect(0, c, d, e, f);
            return this.getZoomFromGeographicRect(g);
        }
    };
    XamGeographicMap.prototype.o9 = function (a) {
        var b = this.nc;
        var c = this.ne;
        var d = new ScalerParams(1, a, this.m5, b.ca);
        d.c = this.mv;
        var e = new ScalerParams(1, a, this.m5, c.ca);
        e.c = this.mv;
        var f = this.mu;
        var g = b.d1(f.left, d);
        var h = c.d1(f.top, e);
        var i = b.d1(f.right, d);
        var j = c.d1(f.bottom, e);
        var k = i - g;
        var l = h - j;
        var m = new Rect(0, g, j, k, l);
        m.intersect(XamGeographicMap.oz);
        if (m.isEmpty) {
            m = XamGeographicMap.oz;
        }
        return m;
    };
    XamGeographicMap.prototype.ov = function (a) {
        var b = this.nc.km(a.x);
        var c = this.ne.km(a.y);
        return { $type: Point_$type, x: b, y: c };
    };
    XamGeographicMap.prototype.ow = function (a) {
        var b = this.nc.ed(a.x);
        var c = this.ne.ed(a.y);
        return { $type: Point_$type, x: b, y: c };
    };
    XamGeographicMap.prototype.ox = function (a) {
        return this.ow(a);
    };
    XamGeographicMap.prototype.n8 = function () {
        var a = typeCast(GeographicMapImagery.$, this.backgroundContent);
        if (a != null) {
            a.clearTileCache();
        }
    };
    XamGeographicMap.prototype.oe = function (a) {
    };
    XamGeographicMap.prototype.mb = function (a) {
        return this.nk.fq(a);
    };
    XamGeographicMap.prototype.mc = function (a) {
        return this.nk.fr(a);
    };
    XamGeographicMap.prototype.dh = function () {
        return true;
    };
    XamGeographicMap.prototype.og = function () {
        var e_1, _a;
        this.nk.d7();
        try {
            for (var _b = tslib_1.__values(fromEnum(this.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var a = _c.value;
                a.jn();
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    XamGeographicMap.prototype.oj = function () {
        if (this.nj == 2) {
            if (!this.m5.isEmpty && this.m5.width > 0 && this.m5.height > 0) {
                var a = this.nc.km(this.m5.left + (this.m5.width / 2));
                var b = this.ne.km(this.m5.top + (this.m5.height / 2));
                this.ou = { $type: Point_$type, x: a, y: b };
            }
        }
        else {
            if (!this.m5.isEmpty && this.m5.width > 0 && this.m5.height > 0) {
                var c = this.nc.km(this.m5.left);
                var d = this.ne.km(this.m5.top);
                this.ou = { $type: Point_$type, x: c, y: d };
            }
        }
    };
    XamGeographicMap.prototype.of = function () {
        if (isNaN_(this.ou.x) || isNaN_(this.ou.y)) {
            this.oj();
        }
        var a = this.ou.x;
        var b = this.ou.y;
        if (!isNaN_(a) && !isNaN_(b)) {
            var c = this.mr.left;
            var d = this.mr.top;
            var e = this.mr.width;
            var f = this.mr.height;
            if (e > this.o1.width) {
            }
            else {
                var g = new ScalerParams(1, XamGeographicMap.o2, this.m5, this.nc.ca);
                g.c = this.mv;
                var h = this.nc.dy(a, g);
                if (this.nj == 2) {
                    var i = h / this.m5.width;
                    c = i - (e / 2);
                }
                else {
                    c = h / this.m5.width;
                }
                if (c + e > this.o1.right) {
                    c = this.o1.right - e;
                }
                else if (c < this.o1.left) {
                    c = this.o1.left;
                }
            }
            if (f > this.o1.height) {
            }
            else {
                var j = new ScalerParams(1, XamGeographicMap.o2, this.m5, this.ne.ca);
                j.c = this.mv;
                var k = this.ne.dy(b, j);
                if (this.nj == 2) {
                    var l = k / this.m5.height;
                    d = l - (f / 2);
                }
                else {
                    d = k / this.m5.height;
                }
                if (d + f > this.o1.bottom) {
                    d = this.o1.bottom - f;
                }
                else if (d < this.o1.top) {
                    d = this.o1.top;
                }
            }
            this.km(new Rect(0, c, d, e, f), false);
        }
    };
    XamGeographicMap.prototype.get_cx = function () {
        return true;
    };
    XamGeographicMap.prototype.ms = function () {
        var a = _super.prototype.ms.call(this);
        if (this.nc == null || this.ne == null) {
            return a;
        }
        var b = new ScalerParams(1, XamGeographicMap.o2, this.m5, this.nc.ca);
        b.c = this.mv;
        var c = new ScalerParams(1, XamGeographicMap.o2, this.m5, this.ne.ca);
        c.c = this.mv;
        var d = this.nc.dy(XamGeographicMap.oz.left, b);
        var e = this.nc.dy(XamGeographicMap.oz.right, b);
        var f = this.ne.dy(XamGeographicMap.oz.top, c);
        var g = this.ne.dy(XamGeographicMap.oz.bottom, c);
        this.o1 = new Rect(0, d / this.m5.width, g / this.m5.height, (e - d) / this.m5.width, (f - g) / this.m5.height);
        var h = a.left;
        var i = a.top;
        if (this.m6.width > this.o1.width) {
            h = 0.5 - (this.m6.width / 2);
        }
        else if (h + a.width > this.o1.right) {
            h = this.o1.right - this.m6.width;
        }
        else if (h < this.o1.left) {
            h = this.o1.left;
        }
        if (this.m6.height > this.o1.height) {
            i = 0.5 - (this.m6.height / 2);
        }
        else if (i + this.m6.height > this.o1.bottom) {
            i = this.o1.bottom - this.m6.height;
        }
        else if (i < this.o1.top) {
            i = this.o1.top;
        }
        var j = new Rect(0, h, i, a.width, a.height);
        if (this.nn) {
            var k = this.o4(this.pf, 1);
            k = this.o6(k);
            var l = j.left + j.width / 2;
            var m = j.top + j.height / 2;
            if (j.width > k.width) {
                var n = j.height / j.width;
                var o = k.width;
                var p = n * o;
                j = new Rect(0, l - o / 2, m - p / 2, o, p);
            }
            if (j.height > k.height) {
                var q = j.width / j.height;
                var r = k.height;
                var s = q * r;
                j = new Rect(0, l - s / 2, m - r / 2, s, r);
            }
            if (j.left < k.left) {
                j = new Rect(0, k.left, j.top, j.width, j.height);
            }
            if (j.top < k.top) {
                j = new Rect(0, j.left, k.top, j.width, j.height);
            }
            if (j.right > k.right) {
                j = new Rect(0, k.right - j.width, j.top, j.width, j.height);
            }
            if (j.bottom > k.bottom) {
                j = new Rect(0, j.left, k.bottom - j.height, j.width, j.height);
            }
        }
        return j;
    };
    XamGeographicMap.prototype.o6 = function (a) {
        var b = this.ex;
        var c = 0.5 * (a.left + a.right);
        var d = 0.5 * (a.top + a.bottom);
        var e = a.width;
        var f = a.height;
        var g = MathUtil.b(a.width, b, 1);
        var h = MathUtil.b(a.height, b, 1);
        var i = this.m5;
        var j = i.width / i.height;
        var k = g * i.width;
        var l = h * i.height;
        var m = k / l;
        if (m != j) {
            if (l * j > k) {
                k = l * j;
                g = k / i.width;
            }
            else {
                l = k / j;
                h = l / i.height;
            }
        }
        var n = g != e;
        var o = h != f;
        var p = n ? c - 0.5 * g : a.left;
        var q = o ? d - 0.5 * h : a.top;
        var r = n ? c + 0.5 * g : a.right;
        var s = o ? d + 0.5 * h : a.bottom;
        if (p < 0) {
            p = 0;
            r = p + g;
        }
        if (r > 1) {
            r = 1;
            p = r - g;
        }
        if (q < 0) {
            q = 0;
            s = q + h;
        }
        if (s > 1) {
            s = 1;
            q = s - h;
        }
        return new Rect(0, p, q, r - p, s - q);
    };
    XamGeographicMap.prototype.mt = function (a) {
        _super.prototype.mt.call(this, this.m5);
        if (a.isEmpty) {
            return Rect.empty;
        }
        var b;
        if (a.width > a.height) {
            var c = intDivide(truncate((a.width - a.height)), 2);
            b = new Rect(0, a.left + c, a.top, a.height, a.height);
        }
        else {
            var d = intDivide(truncate((a.height - a.width)), 2);
            b = new Rect(0, a.left, a.top + d, a.width, a.width);
        }
        return b;
    };
    XamGeographicMap.prototype.o8 = function (a) {
        return this.mt(a);
    };
    XamGeographicMap.prototype.bm = function () {
        return new XamGeographicMapView(this);
    };
    XamGeographicMap.prototype.l7 = function (a) {
        return this.nk.fp(a);
    };
    XamGeographicMap.prototype.md = function (a) {
        return this.nk.fs(a);
    };
    XamGeographicMap.prototype.oa = function (a) {
        if (a != null) {
            a.bh = this;
        }
    };
    XamGeographicMap.prototype.i2 = function (a) {
        _super.prototype.i2.call(this, a);
        this.nk = a;
    };
    XamGeographicMap.prototype.jd = function (a, b) {
        _super.prototype.jd.call(this, a, b);
        this.kb(this.nc);
        this.kb(this.ne);
        if (Rect.l_op_Inequality(a, b)) {
            this.of();
        }
        if (this.nn) {
            this.mr = this.ms();
        }
        this.om();
    };
    Object.defineProperty(XamGeographicMap.prototype, "ns", {
        get: function () {
            return this.nq;
        },
        set: function (a) {
            var b = this.nq;
            this.nq = a;
            this.ji("ActualWindowScale", b, this.nq);
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.prototype.eg = function () {
        return this.ns;
    };
    XamGeographicMap.prototype.eh = function () {
        return this.ns;
    };
    XamGeographicMap.prototype.ka = function () {
        _super.prototype.ka.call(this);
        var a = Math.min(this.mr.width, this.mr.height);
        this.ns = a;
    };
    XamGeographicMap.prototype.je = function (a, b, c, d) {
        var e_2, _a;
        _super.prototype.je.call(this, a, b, c, d);
        switch (b) {
            case "WindowRect":
                this.oj();
                break;
            case XamGeographicMap.$$p[2]:
                this.mr = this.ms();
                break;
            case "BackgroundContent":
                if (this.nh != null) {
                    var e = this.nh;
                    e.imageTilesReady = delegateRemove(e.imageTilesReady, runOn(this, this.oc));
                    this.nh.deferralHandler = null;
                }
                this.nh = typeCast(GeographicMapImagery.$, this.backgroundContent);
                if (this.nh != null) {
                    var f = this.nh;
                    f.imageTilesReady = delegateCombine(f.imageTilesReady, runOn(this, this.oc));
                    this.nh.deferralHandler = this;
                }
                this.nk.fl(typeCast(GeographicMapImagery.$, c), typeCast(GeographicMapImagery.$, d));
                if (this.nh != null) {
                    this.nh.geographicMap = this;
                    this.nk.fi(this.mr);
                    this.nk.fm(this.ea);
                }
                break;
            case "YAxis":
            case "XAxis":
                this.oh(c);
                this.oa(d);
                break;
            case XamGeographicMap.$$p[4]:
                if (!this.nm) {
                    this.m6 = XamGeographicMap.o2;
                }
                this.ob();
                this.oi();
                this.oj();
                this.mr = this.ms();
                this.nk.fj();
                break;
            case "ActualWindowRect":
                this.nk.fi(this.mr);
                break;
            case "ActualWorldRect":
                try {
                    for (var _b = tslib_1.__values(fromEnum(this.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var g = _c.value;
                        g.je(false);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                break;
            case XamGeographicMap.$$p[3]:
                this.ns = this.nt;
                break;
            case "ActualWindowScale":
                if (!this.dg) {
                    this.kl(this.eg(), this.eh());
                }
                break;
            case "ActualPixelScalingRatio":
                this.nk.fm(this.ea);
                break;
            case XamGeographicMap.$$p[5]:
                this.kh();
                break;
        }
    };
    XamGeographicMap.prototype.oc = function (a, b) {
        if (this.imageTilesReady != null) {
            this.imageTilesReady(this, new ImageTilesReadyEventArgs());
        }
    };
    XamGeographicMap.prototype.oh = function (a) {
        if (a != null) {
            a.bh = null;
        }
    };
    XamGeographicMap.prototype.oi = function () {
        if (this.nc != null) {
            this.nc.kj = this.o3.left;
            this.nc.ki = this.o3.right;
        }
        if (this.ne != null) {
            this.ne.kj = this.o3.top;
            this.ne.ki = this.o3.bottom;
        }
        this.nc.co(true);
        this.ne.co(true);
    };
    XamGeographicMap.prototype.getFontInfo = function () {
        this.nl = this.nk.ff;
        return this.nl;
    };
    XamGeographicMap.prototype.l6 = function () {
        return this.nk.fn;
    };
    XamGeographicMap.prototype.getFontBrush = function () {
        return this.nk.fo;
    };
    XamGeographicMap.prototype.j5 = function (a, b) {
        if (typeCast(ItfConverter.$, b) !== null) {
            var c = b;
            var d = a;
            d.itemsSource = c.triangulationSource.points;
            d.mc = c.triangulationSource.triangles;
        }
        else {
            _super.prototype.j5.call(this, a, b);
        }
    };
    XamGeographicMap.prototype.register = function (a, b) {
        this.jv(a, b);
    };
    XamGeographicMap.prototype.unRegister = function (a) {
        this.j9(a);
    };
    XamGeographicMap.prototype.deferredRefresh = function () {
        this.hh();
    };
    XamGeographicMap.prototype.deferAction = function (a) {
        if (this.nv != null) {
            this.nv.setTimeout(a, 0);
        }
        else {
            window.setTimeout(a, 0);
        }
    };
    XamGeographicMap.prototype.n9 = function (a) {
        this.kg(a);
    };
    XamGeographicMap.prototype.nw = function () {
        var a = new ChartVisualData();
        var b = this.nc.e5();
        var c = this.ne.e5();
        a.axes.add1(b);
        a.axes.add1(c);
        for (var d = 0; d < this.series.count; d++) {
            var e = this.series._inner[d].fo();
            a.series.add1(e);
        }
        a.name = this.name;
        a.contentArea = RectData.b(this.m5);
        a.centralArea = RectData.b(this.m5);
        a.plotArea = RectData.b(this.m5);
        return a;
    };
    XamGeographicMap.prototype.my = function (a, b, c) {
        return a;
    };
    XamGeographicMap.prototype.od = function () {
    };
    Object.defineProperty(XamGeographicMap.prototype, "pe", {
        get: function () {
            return this.o0;
        },
        set: function (a) {
            this.o0 = a;
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.prototype.on = function (a) {
        this.pe = a;
        this.om();
    };
    XamGeographicMap.prototype.om = function () {
        if (this.np && !this.pe.isEmpty) {
            var a = this.getZoomFromGeographicRect(this.pe);
            this.pe = Rect.empty;
            this.km(a, false);
        }
    };
    Object.defineProperty(XamGeographicMap.prototype, "np", {
        get: function () {
            return !this.m5.isEmpty && !this.mv.isEmpty;
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.$t = markType(XamGeographicMap, 'XamGeographicMap', SeriesViewer.$, [IMapRenderDeferralHandler_$type]);
    XamGeographicMap.ni = 0;
    XamGeographicMap.oz = new Rect(2, { $type: Point_$type, x: -180, y: -85.05112878 }, { $type: Point_$type, x: 180, y: 85.05112878 });
    XamGeographicMap.o2 = new Rect(0, 0, 0, 1, 1);
    XamGeographicMap.$$p = markDep(DependencyProperty, PropertyMetadata, XamGeographicMap, 'ji', ['ResizeBehavior:nj:oo', [MapResizeBehavior_$type, enumGetBox(MapResizeBehavior_$type, XamGeographicMap.ni)], 'SuppressZoomResetOnWorldRectChange:nm:op', [0, false], 'UseWorldRectForZoomBounds:nn:oq', [0, false], 'WindowScale:nt:or', [1, NaN], 'WorldRect:pf:os', [Rect.$, XamGeographicMap.oz], 'Zoomable:no:ot', [0, true]]);
    return XamGeographicMap;
}(SeriesViewer));
export { XamGeographicMap };
/**
 * @hidden
 */
var GeographicMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicMapImagery, _super);
    function GeographicMapImagery(a) {
        var _this = _super.call(this) || this;
        _this.ak = null;
        _this.imageTilesReady = null;
        _this.an = null;
        _this.ap = null;
        _this.propertyChanged = null;
        _this.imagesChanged = null;
        _this.cancellingImage = null;
        _this.downloadingImage = null;
        _this.ab = GeographicMapImagery.$;
        _this.ap = a;
        _this.aj = _this.ai();
        _this.a9(_this.aj);
        return _this;
    }
    GeographicMapImagery.prototype.a9 = function (a) {
    };
    GeographicMapImagery.prototype.ai = function () {
        return new GeographicMapImageryView(this);
    };
    Object.defineProperty(GeographicMapImagery.prototype, "deferralHandler", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            if (this.ao != null) {
                this.ao.al = a;
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImagery.prototype.a3 = function (a, b) {
        if (this.imageTilesReady != null) {
            this.imageTilesReady(this, new ImageTilesReadyEventArgs());
        }
    };
    GeographicMapImagery.prototype.a7 = function () {
        var a = this.ao;
        a.imageTilesReady = delegateCombine(a.imageTilesReady, runOn(this, this.a3));
        this.ao.al = this.deferralHandler;
        var b = this.ao;
        b.imagesChanged = delegateCombine(b.imagesChanged, runOn(this, this.a2));
        var c = this.ao;
        c.downloadingImage = delegateCombine(c.downloadingImage, runOn(this, this.a1));
        var d = this.ao;
        d.cancellingImage = delegateCombine(d.cancellingImage, runOn(this, this.a0));
        this.ao.bc = this.referer;
        this.ao.bg = this.userAgent;
    };
    GeographicMapImagery.prototype.a1 = function (a, b) {
        if (this.downloadingImage != null) {
            this.downloadingImage(this, b);
        }
    };
    GeographicMapImagery.prototype.a0 = function (a, b) {
        if (this.cancellingImage != null) {
            this.cancellingImage(this, b);
        }
    };
    GeographicMapImagery.prototype.be = function () {
        if (this.ao != null) {
            this.aj.e();
        }
    };
    GeographicMapImagery.prototype.a8 = function (a, b, c) {
        switch (a) {
            case GeographicMapImagery.$$p[2]:
                this.be();
                break;
            case "GeographicMap":
                this.aj.e();
                break;
            case GeographicMapImagery.$$p[0]:
                if (this.ao != null) {
                    this.ao.bc = this.referer;
                }
                break;
            case GeographicMapImagery.$$p[1]:
                if (this.ao != null) {
                    this.ao.bg = this.userAgent;
                }
                break;
        }
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
    };
    Object.defineProperty(GeographicMapImagery.prototype, "geographicMap", {
        get: function () {
            return this.c(GeographicMapImagery.geographicMapProperty);
        },
        set: function (a) {
            this.h(GeographicMapImagery.geographicMapProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImagery.a6 = function (a, b) {
        a.a5(b.oldValue, b.newValue);
    };
    GeographicMapImagery.prototype.a5 = function (a, b) {
        this.a8("GeographicMap", a, b);
    };
    GeographicMapImagery.prototype.clearTileCache = function () {
        if (this.ao != null) {
            this.ao.bp(0, 0, 0, 0);
        }
    };
    Object.defineProperty(GeographicMapImagery.prototype, "ao", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs("MultiScaleImage"));
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImagery.prototype.bk = function (a) {
        if (this.geographicMap == null || a.width < 1 || a.height < 1) {
            return a;
        }
        var b = new Rect(0, 0, 0, a.width, a.height);
        var c = this.geographicMap.o8(b);
        var d = XamGeographicMap.oz;
        var e = this.geographicMap.o3;
        var f = Math.min(this.windowRect.height, this.windowRect.width);
        var g = e.width / d.width;
        this.ao.a3 = (b.width / c.width) * f * g;
        var h = this.geographicMap.nc;
        var i = this.geographicMap.ne;
        var j = new ScalerParams(1, this.windowRect, b, h.ca);
        j.c = c;
        var k = new ScalerParams(1, this.windowRect, b, i.ca);
        k.c = c;
        var l = h.dy(d.left, j);
        var m = i.dy(d.bottom, k);
        var n = (-l / b.width) * this.ao.a3;
        var o = (-m / b.height) * this.ao.a3 * (b.height / b.width);
        this.ao.ci = { $type: Point_$type, x: n, y: o };
        return a;
    };
    GeographicMapImagery.prototype.bb = function (a) {
        this.aj.f(a);
    };
    GeographicMapImagery.prototype.bd = function (a) {
        this.aj.h(a);
    };
    GeographicMapImagery.prototype.bc = function (a) {
        this.aj.g(a);
    };
    GeographicMapImagery.prototype.a2 = function (a, b) {
        if (this.imagesChanged != null) {
            this.imagesChanged(this, new ImagesChangedEventArgs());
        }
    };
    GeographicMapImagery.prototype.a4 = function () {
        this.aj.e();
    };
    GeographicMapImagery.prototype.ba = function (a) {
        this.aj.i(a);
    };
    GeographicMapImagery.prototype.v = function () {
        _super.prototype.v.call(this);
        this.ap.m = this._opacity;
    };
    GeographicMapImagery.$t = markType(GeographicMapImagery, 'GeographicMapImagery', Control.$, [INotifyPropertyChanged_$type]);
    GeographicMapImagery.geographicMapProperty = DependencyProperty.i("GeographicMap", XamGeographicMap.$, GeographicMapImagery.$, new PropertyMetadata(2, null, GeographicMapImagery.a6));
    GeographicMapImagery.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicMapImagery, 'a8', ['Referer', [2, null], 'UserAgent', [2, null], 'WindowRect', [Rect.$, Rect.empty]]);
    return GeographicMapImagery;
}(Control));
export { GeographicMapImagery };
/**
 * @hidden
 */
var GeographicMapImageryView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicMapImageryView, _super);
    function GeographicMapImageryView(a) {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.j = null;
        _this.d = null;
        _this.b = 1;
        _this.j = Rect.empty;
        _this.a = a;
        _this.a.ao = new XamMultiScaleImage();
        _this.a.ao.ao = _this.a.ap;
        _this.a.a7();
        return _this;
    }
    GeographicMapImageryView.prototype.e = function () {
        if (this.j.isEmpty) {
            return;
        }
        this.a.bk(new Size(1, this.j.width, this.j.height));
    };
    GeographicMapImageryView.prototype.f = function (a) {
        this.a.ao.by(a);
    };
    GeographicMapImageryView.prototype.g = function (a) {
        this.d = a;
        this.a.ao.bz(a);
    };
    GeographicMapImageryView.prototype.h = function (a) {
        this.j = a;
        this.a.ao.b0(a);
        this.a.a4();
    };
    Object.defineProperty(GeographicMapImageryView.prototype, "c", {
        get: function () {
            return this.b;
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImageryView.prototype.i = function (a) {
        this.b = a;
        this.a.ao.bw(a);
    };
    GeographicMapImageryView.$t = markType(GeographicMapImageryView, 'GeographicMapImageryView');
    return GeographicMapImageryView;
}(Base));
export { GeographicMapImageryView };
/**
 * @hidden
 */
var GeographicXYTriangulatingSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicXYTriangulatingSeriesView, _super);
    function GeographicXYTriangulatingSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicXYTriangulatingSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        var a = this.b0.l3;
        a.mz = this.b0.mf;
        a.m3 = this.b0.md;
        a.trianglesSource = this.b0.mc;
        a.mr = this.b0.mi;
        a.mt = this.b0.mk;
        a.mv = this.b0.mm;
    };
    GeographicXYTriangulatingSeriesView.prototype.b3 = function () {
        var a = this.b0.l3;
        if (this.b0.bs == null) {
            a.l1 = null;
            a.l2 = null;
            return;
        }
        a.l1 = this.b0.bs.nc;
        a.l2 = this.b0.bs.ne;
    };
    GeographicXYTriangulatingSeriesView.prototype.b2 = function () {
        this.b0.l3.mz = this.b0.mf;
    };
    GeographicXYTriangulatingSeriesView.prototype.b1 = function () {
        this.b0.l3.m3 = this.b0.md;
    };
    GeographicXYTriangulatingSeriesView.prototype.b4 = function () {
        this.b0.l3.trianglesSource = this.b0.mc;
    };
    GeographicXYTriangulatingSeriesView.prototype.b5 = function () {
        this.b0.l3.mr = this.b0.mi;
    };
    GeographicXYTriangulatingSeriesView.prototype.b6 = function () {
        this.b0.l3.mt = this.b0.mk;
    };
    GeographicXYTriangulatingSeriesView.prototype.b7 = function () {
        this.b0.l3.mv = this.b0.mm;
    };
    GeographicXYTriangulatingSeriesView.$t = markType(GeographicXYTriangulatingSeriesView, 'GeographicXYTriangulatingSeriesView', HostSeriesView.$);
    return GeographicXYTriangulatingSeriesView;
}(HostSeriesView));
export { GeographicXYTriangulatingSeriesView };
/**
 * @hidden
 */
var GeographicScatterAreaSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicScatterAreaSeriesView, _super);
    function GeographicScatterAreaSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b8 = null;
        _this.b8 = a;
        return _this;
    }
    GeographicScatterAreaSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        if (this.b8.mw != null) {
            this.b8.mw.nu = this.b8.mz;
            this.b8.mw.nm = this.b8.mv;
        }
    };
    GeographicScatterAreaSeriesView.prototype.b9 = function () {
        if (this.b8.mw != null) {
            this.b8.mw.nu = this.b8.mz;
        }
    };
    GeographicScatterAreaSeriesView.prototype.ca = function () {
        if (this.b8.mw != null) {
            this.b8.mw.nm = this.b8.mv;
        }
    };
    GeographicScatterAreaSeriesView.$t = markType(GeographicScatterAreaSeriesView, 'GeographicScatterAreaSeriesView', GeographicXYTriangulatingSeriesView.$);
    return GeographicScatterAreaSeriesView;
}(GeographicXYTriangulatingSeriesView));
export { GeographicScatterAreaSeriesView };
/**
 * @hidden
 */
var XamGeographicMapView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(XamGeographicMapView, _super);
    function XamGeographicMapView(a) {
        var _this = _super.call(this, a) || this;
        _this.fe = null;
        _this.fu = null;
        _this.fo = null;
        _this.fn = null;
        _this.ff = null;
        _this.fg = NaN;
        _this.fu = Rect.empty;
        _this.fe = a;
        _this.fe.l1 = 2;
        _this.fe.ex = 5E-06;
        return _this;
    }
    XamGeographicMapView.prototype.k = function (a) {
        return 2;
    };
    XamGeographicMapView.prototype.bi = function (a) {
        this.i.bv(a);
        this.fe.n9(a);
        this.ee();
    };
    XamGeographicMapView.prototype.get_an = function () {
        return true;
    };
    XamGeographicMapView.prototype.dx = function () {
        var a;
        var b;
        var c;
        var d;
        var e;
        var f = this.i.a7(a, b, c, d, e);
        a = f.p0;
        b = f.p1;
        c = f.p2;
        d = f.p3;
        e = f.p4;
        this.fo = c;
        this.ff = d;
        this.fn = e;
    };
    XamGeographicMapView.prototype.fq = function (a) {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgba(0,0,0,1)";
            return $ret;
        })());
    };
    XamGeographicMapView.prototype.fr = function (a) {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "white";
            return $ret;
        })());
    };
    XamGeographicMapView.prototype.fp = function (a) {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgba(50,50,50,.5)";
            return $ret;
        })());
    };
    XamGeographicMapView.prototype.fs = function (a) {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "white";
            return $ret;
        })());
    };
    XamGeographicMapView.prototype.dm = function (a) {
        _super.prototype.dm.call(this, a);
        if (this.fe.backgroundContent != null) {
            var b = this.fe.backgroundContent;
            b.bc(this.i.ae);
            b.bb(a);
        }
    };
    XamGeographicMapView.prototype.dn = function (a) {
        _super.prototype.dn.call(this, a);
        this.fu = a;
        if (this.fe.backgroundContent != null) {
            var b = this.fe.backgroundContent;
            b.bd(this.fu);
        }
    };
    XamGeographicMapView.prototype.ft = function () {
        return new Rect(0, 0, 0, this.fu.width, this.fu.height);
    };
    XamGeographicMapView.prototype.fj = function () {
        if (this.fe.backgroundContent != null) {
            var a = this.fe.backgroundContent;
            a.a4();
        }
    };
    XamGeographicMapView.prototype.fi = function (a) {
        if (this.fe.nh != null) {
            this.fe.nh.windowRect = a;
        }
    };
    XamGeographicMapView.prototype.fl = function (a, b) {
        if (this.fe.nh != null) {
            this.fe.nh.windowRect = this.fe.mr;
        }
        if (a != null) {
            var c = a.ao;
            if (c != null) {
                this.fe.ah.e.remove(c.ag);
            }
            a.bb(null);
            a.bc(null);
        }
        if (b != null) {
            var d = b.ao;
            if (d != null) {
                this.fe.ah.e.add(d.ag);
            }
            if (!this.fu.isEmpty) {
                this.dn(this.fu);
            }
            if (this.u != null) {
                this.dm(this.u);
            }
        }
        if (b == null) {
            this.fk(this.u);
        }
    };
    XamGeographicMapView.prototype.fk = function (a) {
        var b = this.fe.ea;
        if (b != 1) {
            a.z();
            a.aa(b, b);
        }
        a.k(this.fu.left, this.fu.top, this.fu.width, this.fu.height);
        if (b != 1) {
            a.y();
        }
    };
    XamGeographicMapView.prototype.du = function () {
        this.e6.ac = 1;
        this.e7.ac = 1;
        this.e6._stroke = this.fo;
        this.e7._stroke = this.fo;
        _super.prototype.du.call(this);
    };
    XamGeographicMapView.prototype.fm = function (a) {
        this.fg = a;
        if (this.fe.backgroundContent != null) {
            this.fe.backgroundContent.ba(a);
        }
    };
    Object.defineProperty(XamGeographicMapView.prototype, "fh", {
        get: function () {
            return this.fg;
        },
        set: function (a) {
            this.fg = a;
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMapView.$t = markType(XamGeographicMapView, 'XamGeographicMapView', SeriesViewerView.$);
    return XamGeographicMapView;
}(SeriesViewerView));
export { XamGeographicMapView };
/**
 * @hidden
 */
var OpenStreetMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(OpenStreetMapImagery, _super);
    function OpenStreetMapImagery() {
        return _super.call(this, new OpenStreetMapTileSource()) || this;
    }
    Object.defineProperty(OpenStreetMapImagery.prototype, "tilePath", {
        get: function () {
            return this.c(OpenStreetMapImagery.tilePathProperty);
        },
        set: function (a) {
            this.h(OpenStreetMapImagery.tilePathProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    OpenStreetMapImagery.bo = function (a, b) {
        a.bn("TilePath", b.oldValue, b.newValue);
    };
    OpenStreetMapImagery.prototype.bn = function (a, b, c) {
        switch (a) {
            case "TilePath":
                this.ap.setTilePathUrl(c == null ? null : c);
                this.aj.e();
                break;
        }
        _super.prototype.a8.call(this, a, b, c);
    };
    OpenStreetMapImagery.$t = markType(OpenStreetMapImagery, 'OpenStreetMapImagery', GeographicMapImagery.$);
    OpenStreetMapImagery.tilePathProperty = DependencyProperty.i("TilePath", String_$type, OpenStreetMapImagery.$, new PropertyMetadata(2, null, OpenStreetMapImagery.bo));
    return OpenStreetMapImagery;
}(GeographicMapImagery));
export { OpenStreetMapImagery };
/**
 * @hidden
 */
var GeographicXYTriangulatingSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicXYTriangulatingSeries, _super);
    function GeographicXYTriangulatingSeries() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicXYTriangulatingSeries.prototype.bf = function () {
        return new GeographicXYTriangulatingSeriesView(this);
    };
    GeographicXYTriangulatingSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.mb = a;
    };
    GeographicXYTriangulatingSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.mb.b3();
                break;
            case GeographicXYTriangulatingSeries.$$p[1]:
                this.mb.b2();
                break;
            case GeographicXYTriangulatingSeries.$$p[0]:
                this.mb.b1();
                break;
            case GeographicXYTriangulatingSeries.$$p[2]:
                this.mb.b4();
                break;
            case GeographicXYTriangulatingSeries.$$p[3]:
                this.mb.b5();
                break;
            case GeographicXYTriangulatingSeries.$$p[4]:
                this.mb.b6();
                break;
            case GeographicXYTriangulatingSeries.$$p[5]:
                this.mb.b7();
                break;
        }
    };
    GeographicXYTriangulatingSeries.$t = markType(GeographicXYTriangulatingSeries, 'GeographicXYTriangulatingSeries', GeographicMapSeriesHost.$);
    GeographicXYTriangulatingSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicXYTriangulatingSeries, 'raisePropertyChanged', ['LatitudeMemberPath:md:mo', [2, "pointY"], 'LongitudeMemberPath:mf:mp', [2, "pointX"], 'TrianglesSource:mc:mq', [IEnumerable_$type, null], 'TriangleVertexMemberPath1:mi:mr', [2, "v1"], 'TriangleVertexMemberPath2:mk:ms', [2, "v2"], 'TriangleVertexMemberPath3:mm:mt', [2, "v3"]]);
    return GeographicXYTriangulatingSeries;
}(GeographicMapSeriesHost));
export { GeographicXYTriangulatingSeries };
/**
 * @hidden
 */
var GeographicScatterAreaSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GeographicScatterAreaSeries, _super);
    function GeographicScatterAreaSeries() {
        var _this = _super.call(this) || this;
        _this.mu = null;
        _this.triangulationStatusChanged = null;
        _this.ab = GeographicScatterAreaSeries.$;
        return _this;
    }
    Object.defineProperty(GeographicScatterAreaSeries.prototype, "mv", {
        get: function () {
            return this.mu;
        },
        set: function (a) {
            var b = this.mu != a;
            if (b) {
                var c = this.mu;
                this.mu = a;
                this.raisePropertyChanged("ColorScale", c, this.mu);
                if (this.mw != null) {
                    this.mw.nm = a;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicScatterAreaSeries.prototype.l2 = function () {
        this.mw = new ScatterAreaSeries();
        var a = this.mw;
        a.triangulationStatusChanged = delegateCombine(a.triangulationStatusChanged, runOn(this, this.m2));
        return this.mw;
    };
    GeographicScatterAreaSeries.prototype.m2 = function (a, b) {
        if (this.triangulationStatusChanged != null) {
            this.triangulationStatusChanged(this, b);
        }
    };
    GeographicScatterAreaSeries.prototype.bf = function () {
        return new GeographicScatterAreaSeriesView(this);
    };
    GeographicScatterAreaSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.my = a;
    };
    GeographicScatterAreaSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case GeographicScatterAreaSeries.$$p[0]:
                this.my.b9();
                break;
            case "ColorScale":
                this.my.ca();
                break;
        }
    };
    GeographicScatterAreaSeries.prototype.get_dq = function () {
        return true;
    };
    GeographicScatterAreaSeries.prototype.set_dq = function (a) {
        _super.prototype.set_dq.call(this, a);
    };
    GeographicScatterAreaSeries.$t = markType(GeographicScatterAreaSeries, 'GeographicScatterAreaSeries', GeographicXYTriangulatingSeries.$);
    GeographicScatterAreaSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicScatterAreaSeries, 'raisePropertyChanged', ['ColorMemberPath:mz:m3', [2, "value"]]);
    return GeographicScatterAreaSeries;
}(GeographicXYTriangulatingSeries));
export { GeographicScatterAreaSeries };
//# sourceMappingURL=XamGeographicMap_combined.js.map
