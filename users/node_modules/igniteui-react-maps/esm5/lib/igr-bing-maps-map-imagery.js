import * as tslib_1 from "tslib";
import { IgrSubDomainsCollection } from "./igr-sub-domains-collection";
import { BingMapsImageryStyle_$type } from "./BingMapsImageryStyle";
import { IgrGeographicMapImagery } from "./igr-geographic-map-imagery";
import { BingMapsMapImagery as BingMapsMapImagery_internal } from "./BingMapsMapImagery";
import { ensureBool, ensureEnum } from "igniteui-react-core";
import { SubDomainsCollection as SubDomainsCollection_internal } from "./SubDomainsCollection";
import { String_$type } from "igniteui-react-core";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
/**
 * UI element class used to display BingMapsMap imagery in the IgxGeographicMap.Component
*/
var IgrBingMapsMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrBingMapsMapImagery, _super);
    function IgrBingMapsMapImagery() {
        var _this = _super.call(this) || this;
        _this._subDomains = null;
        _this._actualSubDomains = null;
        return _this;
    }
    IgrBingMapsMapImagery.prototype.createImplementation = function () {
        return new BingMapsMapImagery_internal();
    };
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "isInitialized", {
        /**
         * Gets a status whether the Bing Maps service is initialized.
        */
        get: function () {
            return this.i.isInitialized;
        },
        set: function (v) {
            this.i.isInitialized = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "isDeferredLoad", {
        /**
         * Gets or sets whether the Bing Maps service should be auto-initialized upon valid property values.
        */
        get: function () {
            return this.i.isDeferredLoad;
        },
        set: function (v) {
            this.i.isDeferredLoad = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "tilePath", {
        /**
         * Gets or sets the map tile image uri.
        */
        get: function () {
            return this.i.tilePath;
        },
        set: function (v) {
            this.i.tilePath = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "actualTilePath", {
        /**
         * Gets or sets the actual map tile image uri.
        */
        get: function () {
            return this.i.actualTilePath;
        },
        set: function (v) {
            this.i.actualTilePath = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "subDomains", {
        /**
         * Gets or sets the collection of image uri subdomains.
        */
        get: function () {
            if (this._subDomains === null) {
                var coll = new IgrSubDomainsCollection();
                var innerColl = this.i.subDomains;
                if (!innerColl) {
                    innerColl = new SubDomainsCollection_internal(0);
                }
                this._subDomains = coll._fromInner(innerColl);
                this.i.subDomains = innerColl;
            }
            return this._subDomains;
        },
        set: function (v) {
            if (this._subDomains !== null) {
                this._subDomains._setSyncTarget(null);
                this._subDomains = null;
            }
            var coll = new IgrSubDomainsCollection();
            this._subDomains = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(String_$type);
            var innerColl = this.i.subDomains;
            if (!innerColl) {
                innerColl = new SubDomainsCollection_internal(0);
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._subDomains._setSyncTarget(syncColl);
            this.i.subDomains = innerColl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "actualSubDomains", {
        /**
         * Gets or sets the actual collection of image uri subdomains.
        */
        get: function () {
            if (this._actualSubDomains === null) {
                var coll = new IgrSubDomainsCollection();
                var innerColl = this.i.actualSubDomains;
                if (!innerColl) {
                    innerColl = new SubDomainsCollection_internal(0);
                }
                this._actualSubDomains = coll._fromInner(innerColl);
                this.i.actualSubDomains = innerColl;
            }
            return this._actualSubDomains;
        },
        set: function (v) {
            if (this._actualSubDomains !== null) {
                this._actualSubDomains._setSyncTarget(null);
                this._actualSubDomains = null;
            }
            var coll = new IgrSubDomainsCollection();
            this._actualSubDomains = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(String_$type);
            var innerColl = this.i.actualSubDomains;
            if (!innerColl) {
                innerColl = new SubDomainsCollection_internal(0);
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._actualSubDomains._setSyncTarget(syncColl);
            this.i.actualSubDomains = innerColl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "bingImageryRestUri", {
        /**
         * Gets or sets the Bing Imagery Rest Uri.
        */
        get: function () {
            return this.i.bingImageryRestUri;
        },
        set: function (v) {
            this.i.bingImageryRestUri = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "actualBingImageryRestUri", {
        /**
         * Gets or sets the Actual Bing Imagery Rest Uri.
        */
        get: function () {
            return this.i.actualBingImageryRestUri;
        },
        set: function (v) {
            this.i.actualBingImageryRestUri = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "cultureName", {
        /**
         * Gets or sets the culture name for this tile source.
        */
        get: function () {
            return this.i.cultureName;
        },
        set: function (v) {
            this.i.cultureName = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "apiKey", {
        /**
         * Gets or sets an API key required by the Bing Maps imagery service.
         * This key must be obtained from the http://www.bingmapsportal.com website.
        */
        get: function () {
            return this.i.apiKey;
        },
        set: function (v) {
            this.i.apiKey = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "imageryStyle", {
        /**
         * Gets or sets a map style of the Bing Maps imagery tiles.  For example: Aerial, AerialWithLabels, or Road map style.
        */
        get: function () {
            return this.i.imageryStyle;
        },
        set: function (v) {
            this.i.imageryStyle = ensureEnum(BingMapsImageryStyle_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Will Connect to the Bing Rest API and retrieve the required TilePath and Subdomains from the service.  This requires a valid API key to already be set.
    
    */
    IgrBingMapsMapImagery.prototype.requestMapSettings = function () {
        this.i.requestMapSettings();
    };
    return IgrBingMapsMapImagery;
}(IgrGeographicMapImagery));
export { IgrBingMapsMapImagery };
//# sourceMappingURL=igr-bing-maps-map-imagery.js.map
