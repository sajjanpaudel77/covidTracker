import * as tslib_1 from "tslib";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrValueBrushScale } from "igniteui-react-charts";
import { IgrContourValueResolver } from "igniteui-react-charts";
import { IgrTriangulationStatusEventArgs } from "igniteui-react-core";
import { IgrGeographicXYTriangulatingSeries } from "./igr-geographic-xy-triangulating-series";
import { GeographicContourLineSeries } from "./GeographicContourLineSeries";
/**
 * Represents a class for Geographic Contour Series displayed on a map.
*/
var IgrGeographicContourLineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrGeographicContourLineSeries, _super);
    function IgrGeographicContourLineSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._triangulationStatusChanged = null;
        _this._triangulationStatusChanged_wrapped = null;
        return _this;
    }
    IgrGeographicContourLineSeries.prototype.createImplementation = function () {
        return new GeographicContourLineSeries();
    };
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "valueMemberPath", {
        /**
         * The name of the property from which to retrieve the numeric values from the ItemsSource items.
        */
        get: function () {
            return this.i.m0;
        },
        set: function (v) {
            this.i.m0 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "fillScale", {
        /**
         * The ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
        */
        get: function () {
            if (this.i.mx == null) {
                return null;
            }
            if (!this.i.mx.externalObject) {
                var e = IgrValueBrushScale._createFromInternal(this.i.mx);
                if (e) {
                    e._implementation = this.i.mx;
                }
                this.i.mx.externalObject = e;
            }
            return this.i.mx.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.mx = null : this.i.mx = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "valueResolver", {
        /**
         * The ContourValueResolver used to determine the numeric values of contours.
        */
        get: function () {
            if (this.i.mu == null) {
                return null;
            }
            if (!this.i.mu.externalObject) {
                var e = IgrContourValueResolver._createFromInternal(this.i.mu);
                if (e) {
                    e._implementation = this.i.mu;
                }
                this.i.mu.externalObject = e;
            }
            return this.i.mu.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.mu = null : this.i.mu = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicContourLineSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        if (this.valueResolver && this.valueResolver.name && this.valueResolver.name == name) {
            return this.valueResolver;
        }
        return null;
    };
    IgrGeographicContourLineSeries.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        if (this.valueResolver && this.valueResolver._styling) {
            this.valueResolver._styling(container, component, this);
        }
        this._inStyling = false;
    };
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "triangulationStatusChanged", {
        /**
         * Raised when the status of an ongoing Triangulation has changed.
        */
        get: function () {
            return this._triangulationStatusChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._triangulationStatusChanged_wrapped !== null) {
                this.i.triangulationStatusChanged = delegateRemove(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
                this._triangulationStatusChanged_wrapped = null;
                this._triangulationStatusChanged = null;
            }
            this._triangulationStatusChanged = ev;
            this._triangulationStatusChanged_wrapped = function (o, e) {
                var outerArgs = new IgrTriangulationStatusEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeTriangulationStatusChanged) {
                    _this.beforeTriangulationStatusChanged(_this, outerArgs);
                }
                if (_this._triangulationStatusChanged) {
                    _this._triangulationStatusChanged(_this, outerArgs);
                }
            };
            this.i.triangulationStatusChanged = delegateCombine(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicContourLineSeries;
}(IgrGeographicXYTriangulatingSeries));
export { IgrGeographicContourLineSeries };
//# sourceMappingURL=igr-geographic-contour-line-series.js.map
