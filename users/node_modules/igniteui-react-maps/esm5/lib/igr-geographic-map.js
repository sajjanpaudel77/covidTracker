/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { IgrSeriesViewer } from "igniteui-react-charts";
import { ReactRenderer, ReactWrapper } from "igniteui-react-core";
import { TypeRegistrar, delegateCombine, delegateRemove } from "igniteui-react-core";
import { XamGeographicMap } from './XamGeographicMap';
import { CollectionAdapter, toPoint, fromPoint, toRect, fromRect, ensureBool, ensureEnum, NamePatcher } from "igniteui-react-core";
import { DataChartStylingDefaults } from "igniteui-react-charts";
import { IgrDataContext } from "igniteui-react-core";
import { IgrSeriesCollection } from "igniteui-react-charts";
import { NotifyCollectionChangedAction } from "igniteui-react-core";
import { IgrNumericXAxis } from "igniteui-react-charts";
import { IgrNumericYAxis } from "igniteui-react-charts";
import { ContentChildrenManager } from "igniteui-react-core";
import { IgrImageTilesReadyEventArgs } from './igr-image-tiles-ready-event-args';
import { MapResizeBehavior_$type } from './MapResizeBehavior';
/**
 * Represents the Infragistics IgxGeographicMapComponent control.
*/
var IgrGeographicMap = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrGeographicMap, _super);
    function IgrGeographicMap(props) {
        var _this = _super.call(this, props) || this;
        _this.contentSeries = [];
        /**
         * The series actually present in the chart. Do not directly modify this array.
         * This array's contents can be modified by causing React to reproject the child content.
         * Or adding and removing series from the manual series collection on the series property.
         */
        _this.actualSeries = [];
        _this._series = null;
        _this._initialized = false;
        _this._seriesAdapter = null;
        _this._defaultTooltips = null;
        _this._uniqueTooltipId = 0;
        _this._imageTilesReady = null;
        _this._imageTilesReady_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        _this._tooltipRef = _this._tooltipRef.bind(_this);
        _this._activeTooltipElements = new Map();
        _this._activeTooltips = new Map();
        _this._currentTooltips = [];
        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });
        if (document) {
            _this._container = document.createElement("div");
            _this._container.style.display = "block";
            _this._container.style.width = "100%";
            _this._container.style.height = "100%";
        }
        var root;
        root = _this._container;
        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);
        _this._wrapper = ren;
        var chart = _this.i;
        _this._chart = chart;
        _this._seriesAdapter = new CollectionAdapter(_this.contentSeries, _this.i.series, _this.actualSeries, function (c) { return c.i; }, function (i) {
            i.owner = _this;
            i._provideRenderer(_this._dataSource);
            i.provideData(_this._dataSource);
            if (_this._container && _this._container.parentElement) {
                i._styling(_this._container, _this, _this);
            }
            _this._ensureDefaultTooltip(i);
            _this._ensureTooltipCreated(i);
        }, function (i) { i._provideRenderer(null); i.provideData(null); });
        chart.provideContainer(ren);
        ren.addSizeWatcher(function () {
            _this._chart.notifyContainerResized();
        });
        _this._initialized = true;
        return _this;
    }
    Object.defineProperty(IgrGeographicMap.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this._chart.notifyContainerResized();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "legend", {
        /**
         * Gets or sets the legend used for the current chart.
        */
        get: function () {
            if (this.i.legend != null)
                return this.i.legend.externalObject;
        },
        set: function (v) {
            if (v != undefined && v != null)
                this.i.legend = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMap.prototype._updateContentChildren = function () {
        this.contentSeries.length = 0;
        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (var i = 0; i < contentChildrenActual.length; i++) {
            this.contentSeries.push(contentChildrenActual[i]);
        }
        if (this._seriesAdapter !== null) {
            this._seriesAdapter.notifyContentChanged();
        }
    };
    IgrGeographicMap.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    IgrGeographicMap.prototype.render = function () {
        // if (!this._childrenDiffer(this.props.children)) {
        // 	let div = React.createElement("div", {
        // 		ref: (ref) => {
        // 			this._elRef = ref;
        // 		},
        // 		children: this.props.children
        // 	});
        // 	return div;
        // } else {
        var children = this._contentChildrenManager.getChildren(this.props.children);
        if (this._currentTooltips && this._currentTooltips.length > 0) {
            //children = React.Children.toArray(this.props.children);
            for (var i = 0; i < this._currentTooltips.length; i++) {
                var t = this._currentTooltips[i];
                if (this._activeTooltipElements.has(t)) {
                    children.push(this._activeTooltipElements.get(t));
                }
                else {
                    if (!TypeRegistrar.isRegistered("IgrTooltipContainer")) {
                        continue;
                    }
                    var Tooltip = TypeRegistrar.get("IgrTooltipContainer");
                    var tEle = React.createElement(Tooltip, {
                        ref: this._tooltipRef,
                        key: this._currentTooltips[i].key,
                        owner: this._currentTooltips[i]
                    });
                    var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);
                    this._activeTooltipElements.set(t, portal);
                    children.push(portal);
                }
            }
        }
        var div = React.createElement("div", {
            className: "ig-geographic-map igr-geographic-map",
            ref: this._getMainRef,
            children: children
        });
        return div;
        //}
    };
    IgrGeographicMap.prototype._tooltipRef = function (t) {
        //console.log(t);
        if (t === null) {
            return;
        }
        if (t.currentOwner &&
            t.currentOwner.tooltipTemplate) {
            t.template = t.currentOwner.tooltipTemplate;
        }
        this._activeTooltips.set(t.currentOwner, t);
    };
    IgrGeographicMap.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._elRef.appendChild(this._container);
        this._chart.notifyContainerResized();
        this.initializeContent();
    };
    Object.defineProperty(IgrGeographicMap.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            if (this._elRef) {
                this._elRef.style.width = value;
                this._chart.notifyContainerResized();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "series", {
        /**
         * A collection or manually added series for the chart.
        */
        get: function () {
            var _this = this;
            if (this._series === null) {
                var coll = new IgrSeriesCollection();
                var inner = coll._innerColl;
                inner.addListener(function (sender, e) {
                    switch (e.action) {
                        case NotifyCollectionChangedAction.Add:
                            _this._seriesAdapter.addManualItem(e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);
                            break;
                        case NotifyCollectionChangedAction.Replace:
                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);
                            _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Reset:
                            _this._seriesAdapter.clearManualItems();
                            break;
                    }
                });
                this._series = coll;
            }
            return this._series;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMap.prototype.componentWillUnmount = function () {
        this._chart.destroy();
        this._wrapper.destroy();
    };
    IgrGeographicMap.prototype.createImplementation = function () {
        return new XamGeographicMap();
    };
    Object.defineProperty(IgrGeographicMap.prototype, "dataSource", {
        get: function () {
            return this._dataSource;
        },
        set: function (value) {
            this._dataSource = value;
            this.bindData();
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMap.prototype.bindData = function () {
        if (this.actualSeries && this.actualSeries.length > 0) {
            var currSeries = this.actualSeries;
            for (var i = 0; i < currSeries.length; i++) {
                currSeries[i].provideData(this._dataSource);
            }
        }
    };
    IgrGeographicMap.prototype.initializeContent = function () {
        if (TypeRegistrar.isRegistered("IgrDataChartDefaultTooltips")) {
            var d = TypeRegistrar.create("IgrDataChartDefaultTooltips");
            this._defaultTooltips = d;
            this._onDefaultTooltipsReady(d);
            //this._container.appendChild(cr.location.nativeElement);
        }
        this._styling(this._container, this);
        if (this.actualSeries && this.actualSeries.length > 0) {
            var currSeries = this.actualSeries;
            for (var i = 0; i < currSeries.length; i++) {
                currSeries[i]._styling(this._container, this, this);
            }
        }
        this.i.notifyContainerResized();
    };
    IgrGeographicMap.prototype._ensureTooltipCreated = function (series) {
        var _this = this;
        series._ensureTooltipCreated(function () { return _this.createTooltip(); }, function (ele) {
            var wrapper = new ReactWrapper(ele, _this._wrapper);
            wrapper.updateToolTip = ele.updateToolTip;
            wrapper.hideToolTip = ele.hideToolTip;
            if (_this._activeTooltips.has(ele)) {
                var tCont = _this._activeTooltips.get(ele);
                tCont.template = ele.tooltipTemplate;
            }
            return wrapper;
        });
    };
    IgrGeographicMap.prototype._ensureDefaultTooltip = function (series) {
        if (this._defaultTooltips == null) {
            return;
        }
        this._defaultTooltips["ensureDefaultTooltip"](series);
    };
    IgrGeographicMap.prototype._onDefaultTooltipsReady = function (cr) {
        if (this.actualSeries && this.actualSeries.length > 0) {
            var currSeries = this.actualSeries;
            for (var i = 0; i < currSeries.length; i++) {
                if (currSeries[i].showDefaultTooltip) {
                    this._ensureDefaultTooltip(currSeries[i]);
                }
            }
        }
    };
    IgrGeographicMap.prototype.createTooltip = function () {
        // if (!TypeRegistrar.isRegistered("IgrTooltipContainer")) {
        // 	return null;
        // }
        // let Tooltip = TypeRegistrar.get("IgrTooltipContainer");
        var wrapper = this._wrapper.createElement("div");
        var ele = wrapper.getNativeElement();
        ele.key = "__tooltip_" + this._uniqueTooltipId;
        this._uniqueTooltipId++;
        this._currentTooltips = this._currentTooltips.slice(0);
        this._currentTooltips.push(ele);
        //let element = React.createElement(Tooltip,  );
        //let portal = ReactDOM.createPortal(element, ele);
        var self = this;
        ele.updateToolTip = function (c, isSubContent) {
            if (c.externalObject) {
                c = c.externalObject;
            }
            else {
                var ext = new IgrDataContext();
                ext._implementation = c;
                c = ext;
            }
            if (!isSubContent) {
                if (ele.parentElement != self._container) {
                    if (ele.parentElement != null) {
                        ele.parentElement.removeChild(ele);
                    }
                    self._container.appendChild(ele);
                }
            }
            else {
                c.isSubContent = true;
            }
            if (self._activeTooltips.has(ele)) {
                var t = self._activeTooltips.get(ele);
                t.dataContext = c;
            }
            ele.style.display = "block";
            return true;
        };
        ele.hideToolTip = function () {
            ele.style.display = "none";
        };
        ele.style.display = "none";
        this._updateTooltipState();
        return ele;
    };
    IgrGeographicMap.prototype._updateTooltipState = function () {
        if (this._initialized) {
            this.setState({ tooltips: this._currentTooltips });
        }
    };
    Object.defineProperty(IgrGeographicMap.prototype, "backgroundContent", {
        /**
         * An imagery to display behind all series, inside the viewport of the IgrGeographicMapComponent control.
        */
        get: function () {
            if (this.i.backgroundContent != null) {
                return this.i.backgroundContent.externalObject;
            }
            else {
                return null;
            }
        },
        set: function (v) {
            if (v != undefined && v != null) {
                this.i.backgroundContent = v.i;
            }
            else {
                this.i.backgroundContent = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "i", {
        /**
                                 * @hidden
                                 */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "zoomable", {
        /**
     * Gets or sets zoomability of the current control
    */
        get: function () {
            return this.i.no;
        },
        set: function (v) {
            this.i.no = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "resizeBehavior", {
        /**
         * Gets or sets the behavior to use during resize.
        */
        get: function () {
            return this.i.nj;
        },
        set: function (v) {
            this.i.nj = ensureEnum(MapResizeBehavior_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "useWorldRectForZoomBounds", {
        /**
         * Gets or sets whether to use the uncoerced world rect to constrain the zoom bounds.
        */
        get: function () {
            return this.i.nn;
        },
        set: function (v) {
            this.i.nn = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "suppressZoomResetOnWorldRectChange", {
        /**
         * Gets or sets whether skip resetting the zoom when the world rect changes.
        */
        get: function () {
            return this.i.nm;
        },
        set: function (v) {
            this.i.nm = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "worldRect", {
        /**
         * Gets or sets the world bounding rectangle.
        */
        get: function () {
            return fromRect(this.i.pf);
        },
        set: function (v) {
            this.i.pf = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "actualWorldRect", {
        /**
         * Gets the actual value of the WorldRect.
        */
        get: function () {
            return fromRect(this.i.o3);
        },
        set: function (v) {
            this.i.o3 = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "xAxis", {
        /**
         * The X-axis for this IgxGeographicMap.Component
         * Under normal circumstances, this property should not be set in application code.  By default, it will be set to a numeric axis with a spherical mercator scaler.
        */
        get: function () {
            if (this.i.nc == null) {
                return null;
            }
            if (!this.i.nc.externalObject) {
                var e = IgrNumericXAxis._createFromInternal(this.i.nc);
                if (e) {
                    e._implementation = this.i.nc;
                }
                this.i.nc.externalObject = e;
            }
            return this.i.nc.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.nc = null : this.i.nc = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "yAxis", {
        /**
         * The Y-axis for this IgxGeographicMap.Component
         * Under normal circumstances, this property should not be set in application code.  By default, it will be set to a numeric axis with a spherical mercator scaler.
        */
        get: function () {
            if (this.i.ne == null) {
                return null;
            }
            if (!this.i.ne.externalObject) {
                var e = IgrNumericYAxis._createFromInternal(this.i.ne);
                if (e) {
                    e._implementation = this.i.ne;
                }
                this.i.ne.externalObject = e;
            }
            return this.i.ne.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.ne = null : this.i.ne = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "isMap", {
        /**
         * Indicates if this SeriesViewer is a map.
        */
        get: function () {
            return this.i.cx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "windowScale", {
        /**
         * A number between 0 and 1 determining the scale of the horizontal/vertical zoom.
         * This property is effectively a shortcut to the Width/Height of the WindowRect property.
        */
        get: function () {
            return this.i.nt;
        },
        set: function (v) {
            this.i.nt = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "actualWindowScale", {
        /**
         * A number between 0 and 1 determining the scale of the horizontal/vertical zoom.
         * This property is effectively a shortcut to the Width/Height of the ActualWindowRect property.
        */
        get: function () {
            return this.i.ns;
        },
        set: function (v) {
            this.i.ns = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "zoomIsReady", {
        /**
         * Gets whether or not the control is ready for zooming
        */
        get: function () {
            return this.i.np;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMap.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.backgroundContent && this.backgroundContent.name && this.backgroundContent.name == name) {
            return this.backgroundContent;
        }
        return null;
    };
    IgrGeographicMap.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.xAxis && this.xAxis._styling) {
            this.xAxis._styling(container, component, this);
        }
        if (this.yAxis && this.yAxis._styling) {
            this.yAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgrGeographicMap.prototype.getCurrentActualWorldRect = function () {
        var iv = this.i.o7();
        return fromRect(iv);
    };
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
    
    * @param geographic  * The geographic area.
    */
    IgrGeographicMap.prototype.getZoomRectFromGeoRect = function (geographic) {
        var iv = this.i.getZoomRectFromGeoRect(toRect(geographic));
        return fromRect(iv);
    };
    IgrGeographicMap.prototype.updateZoomWindow = function (zoomWindow) {
        this.i.ol(toRect(zoomWindow));
    };
    IgrGeographicMap.prototype.updateWorldRect = function (worldRect) {
        this.i.ok(toRect(worldRect));
    };
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
    
    * @param geographic  * The geographic area.
    */
    IgrGeographicMap.prototype.getZoomFromGeographicRect = function (geographic) {
        var iv = this.i.getZoomFromGeographicRect(toRect(geographic));
        return fromRect(iv);
    };
    IgrGeographicMap.prototype.convertGeographicToZoom = function (geographic, extraPixelPadding) {
        var iv = this.i.o4(toRect(geographic), extraPixelPadding);
        return fromRect(iv);
    };
    IgrGeographicMap.prototype.getZoomFromGeographicPoints = function (northWest, southEast) {
        var iv = this.i.getZoomFromGeographicPoints(toPoint(northWest), toPoint(southEast));
        return fromRect(iv);
    };
    /**
     * Given a WindowRect and the current plot area, get the geographic region represented by that WindowRect.
    
    * @param windowRect  * The zoom area.
    */
    IgrGeographicMap.prototype.getGeographicFromZoom = function (windowRect) {
        var iv = this.i.o9(toRect(windowRect));
        return fromRect(iv);
    };
    /**
     * Convert a pixel-based coordinate to a geographic coordinate.
    
    * @param pixelCoordinate  * A pixel-based coordinate
    */
    IgrGeographicMap.prototype.getGeographicPoint = function (pixelCoordinate) {
        var iv = this.i.ov(toPoint(pixelCoordinate));
        return fromPoint(iv);
    };
    /**
     * Convert a geographic coordinate to a pixel-based coordinate.
    
    * @param geographicCoordinate  * A geographic coordinate
    */
    IgrGeographicMap.prototype.getPixelPoint = function (geographicCoordinate) {
        var iv = this.i.ow(toPoint(geographicCoordinate));
        return fromPoint(iv);
    };
    /**
     * Convert a geographic coordinate to a pixel-based coordinate.
    
    * @param geographicCoordinate  * A geographic coordinate
    */
    IgrGeographicMap.prototype.getWindowPoint = function (geographicCoordinate) {
        var iv = this.i.ox(toPoint(geographicCoordinate));
        return fromPoint(iv);
    };
    /**
     * Removes all cached tile images from the map imagery assigned to the map's background content.
    
    */
    IgrGeographicMap.prototype.clearTileCache = function () {
        this.i.n8();
    };
    /**
     * Notifies the chart that the CSS styles in effect have been updated.
    
    */
    IgrGeographicMap.prototype.styleUpdated = function () {
        this.i.og();
    };
    /**
     * Gets actual window scale for horizontal dimension of the control
    
    */
    IgrGeographicMap.prototype.getActualWindowScaleHorizontal = function () {
        var iv = this.i.eg();
        return (iv);
    };
    /**
     * Gets actual window scale for vertical dimension of the control
    
    */
    IgrGeographicMap.prototype.getActualWindowScaleVertical = function () {
        var iv = this.i.eh();
        return (iv);
    };
    /**
     * Calls for a deferred refresh to the GeographicMap's background.
    
    */
    IgrGeographicMap.prototype.deferredRefresh = function () {
        this.i.deferredRefresh();
    };
    /**
     * Returns the chart visuals expressed as a ChartVisualData object.
    
    */
    IgrGeographicMap.prototype.exportVisualData = function () {
        var iv = this.i.nw();
        return (iv);
    };
    /**
     * Zoom in to the geographic region specified, when possible (may need to wait for map to be initialized).
    
    * @param geographic  * The geographic region to zoom to.
    */
    IgrGeographicMap.prototype.zoomToGeographic = function (geographic) {
        this.i.on(toRect(geographic));
    };
    Object.defineProperty(IgrGeographicMap.prototype, "imageTilesReady", {
        /**
         * This event is fired whenever the image tiles transition from a loading state (e.g. some are fading in) to a loaded state.
        */
        get: function () {
            return this._imageTilesReady;
        },
        set: function (ev) {
            var _this = this;
            if (this._imageTilesReady_wrapped !== null) {
                this.i.imageTilesReady = delegateRemove(this.i.imageTilesReady, this._imageTilesReady_wrapped);
                this._imageTilesReady_wrapped = null;
                this._imageTilesReady = null;
            }
            this._imageTilesReady = ev;
            this._imageTilesReady_wrapped = function (o, e) {
                var outerArgs = new IgrImageTilesReadyEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeImageTilesReady) {
                    _this.beforeImageTilesReady(_this, outerArgs);
                }
                if (_this._imageTilesReady) {
                    _this._imageTilesReady(_this, outerArgs);
                }
            };
            this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, this._imageTilesReady_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicMap;
}(IgrSeriesViewer));
export { IgrGeographicMap };
//# sourceMappingURL=igr-geographic-map.js.map
