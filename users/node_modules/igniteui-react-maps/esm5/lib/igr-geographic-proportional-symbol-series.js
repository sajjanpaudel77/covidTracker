import * as tslib_1 from "tslib";
import { MarkerType_$type } from "igniteui-react-charts";
import { IgrSizeScale } from "igniteui-react-charts";
import { IgrBrushScale } from "igniteui-react-charts";
import { IgrGeographicMapSeriesHost } from "./igr-geographic-map-series-host";
import { GeographicProportionalSymbolSeries } from "./GeographicProportionalSymbolSeries";
import { ensureEnum, brushToString, stringToBrush, ensureBool } from "igniteui-react-core";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a ScatterSeries.
*/
var IgrGeographicProportionalSymbolSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrGeographicProportionalSymbolSeries, _super);
    function IgrGeographicProportionalSymbolSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrGeographicProportionalSymbolSeries.prototype.createImplementation = function () {
        return new GeographicProportionalSymbolSeries();
    };
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "latitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mt;
        },
        set: function (v) {
            this.i.mt = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "longitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mv;
        },
        set: function (v) {
            this.i.mv = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.md;
        },
        set: function (v) {
            this.i.md = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.na;
        },
        set: function (v) {
            this.i.na = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.nt);
        },
        set: function (v) {
            this.i.nt = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.nu);
        },
        set: function (v) {
            this.i.nu = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "maximumMarkers", {
        /**
         * Gets or sets the maximum number of markerItems displayed by the current series.
         * If more than the specified number of markerItems are visible, the series will automatically
         * choose a representative set.
        */
        get: function () {
            return this.i.mm;
        },
        set: function (v) {
            this.i.mm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "radiusMemberPath", {
        /**
         * Gets or sets the radius mapping property for the current series object.
        */
        get: function () {
            return this.i.m6;
        },
        set: function (v) {
            this.i.m6 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "radiusScale", {
        /**
         * Gets or sets the radius size scale for the bubbles.
        */
        get: function () {
            if (this.i.me == null) {
                return null;
            }
            if (!this.i.me.externalObject) {
                var e = IgrSizeScale._createFromInternal(this.i.me);
                if (e) {
                    e._implementation = this.i.me;
                }
                this.i.me.externalObject = e;
            }
            return this.i.me.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.me = null : this.i.me = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "labelMemberPath", {
        /**
         * Gets or sets the Label mapping property for the current series object.
        */
        get: function () {
            return this.i.mr;
        },
        set: function (v) {
            this.i.mr = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "fillMemberPath", {
        /**
         * Gets or sets the fill mapping property for the current series object.
        */
        get: function () {
            return this.i.mn;
        },
        set: function (v) {
            this.i.mn = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "fillScale", {
        /**
         * Gets or sets the brush scale for the marker brush.
        */
        get: function () {
            if (this.i.mb == null) {
                return null;
            }
            if (!this.i.mb.externalObject) {
                var e = IgrBrushScale._createFromInternal(this.i.mb);
                if (e) {
                    e._implementation = this.i.mb;
                }
                this.i.mb.externalObject = e;
            }
            return this.i.mb.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.mb = null : this.i.mb = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "fillScaleUseGlobalValues", {
        /**
         * Gets or sets the whether or not the FillScale uses global values of FillMemberPath of multiple series.
         * This setting applies only if multiple series are using the same FillScale.
        */
        get: function () {
            return this.i.mg;
        },
        set: function (v) {
            this.i.mg = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerOutlineUsesFillScale", {
        /**
         * Gets or sets whether or not the marker outline should use FillScale like the marker fill does.
         * This setting applies only if the current series has a FillScale set and it overrides MarkerOutline setting.
        */
        get: function () {
            return this.i.mh;
        },
        set: function (v) {
            this.i.mh = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerOutlineBrightness", {
        /**
         * Gets or sets brightness of the marker outline. Using negative value will change marker outline to darker color and positive value will change marker outline to brighter color
         * Note you can use any values between minimum value of -1 (darkest outline) and maximum value of 1 (brightest outline)
        */
        get: function () {
            return this.i.mk;
        },
        set: function (v) {
            this.i.mk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerBrushBrightness", {
        /**
         * Gets or sets brightness of the marker fill. Using negative value will change marker fill to darker color and positive value will change marker fill to brighter color
         * Note you can use any values between minimum value of -1 (darkest fill) and maximum value of 1 (brightest fill)
        */
        get: function () {
            return this.i.mj;
        },
        set: function (v) {
            this.i.mj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.ml;
        },
        set: function (v) {
            this.i.ml = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "radiusScaleUseGlobalValues", {
        /**
         * Gets or sets the whether or not the RadiusScale uses global values of RadiusMemberPath of multiple series.
         * This setting applies only if multiple series are using the same RadiusScale.
        */
        get: function () {
            return this.i.mi;
        },
        set: function (v) {
            this.i.mi = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicProportionalSymbolSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.radiusScale && this.radiusScale.name && this.radiusScale.name == name) {
            return this.radiusScale;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        return null;
    };
    IgrGeographicProportionalSymbolSeries.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.radiusScale && this.radiusScale._styling) {
            this.radiusScale._styling(container, component, this);
        }
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        this._inStyling = false;
    };
    return IgrGeographicProportionalSymbolSeries;
}(IgrGeographicMapSeriesHost));
export { IgrGeographicProportionalSymbolSeries };
//# sourceMappingURL=igr-geographic-proportional-symbol-series.js.map
