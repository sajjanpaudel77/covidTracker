import * as tslib_1 from "tslib";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { MarkerType_$type } from "igniteui-react-charts";
import { CollisionAvoidanceType_$type } from "igniteui-react-charts";
import { IgrStyleShapeEventArgs } from "igniteui-react-charts";
import { IgrGeographicShapeSeriesBase } from "./igr-geographic-shape-series-base";
import { GeographicShapeSeries } from "./GeographicShapeSeries";
import { Style } from "igniteui-react-core";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Series class which renders polygons as Paths, in a geographic context, based on lists of points in the ItemsSource.
*/
var IgrGeographicShapeSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrGeographicShapeSeries, _super);
    function IgrGeographicShapeSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._styleShape = null;
        _this._styleShape_wrapped = null;
        return _this;
    }
    IgrGeographicShapeSeries.prototype.createImplementation = function () {
        return new GeographicShapeSeries();
    };
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "shapeFill", {
        /**
         * Gets or sets the fill brush.
        */
        get: function () {
            return this.i.nh ? this.i.nh.fill : null;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.nh.fill = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "shapeStroke", {
        /**
         * Gets or sets the stroke brush.
        */
        get: function () {
            return this.i.nh ? this.i.nh.stroke : null;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.nh.stroke = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "shapeStrokeThickness", {
        /**
         * Gets or sets the stroke thickness.
        */
        get: function () {
            return this.i.nh ? this.i.nh.strokeThickness : NaN;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.nh.strokeThickness = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "shapeOpacity", {
        /**
         * Gets or sets the opacity.
        */
        get: function () {
            return this.i.nh ? this.i.nh.opacity : NaN;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.nh.opacity = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicShapeSeries.prototype.ensureShapeStyle = function () {
        if (this.i.nh) {
            return;
        }
        this.i.nh = new Style();
    };
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.mp;
        },
        set: function (v) {
            this.i.mp = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.m4;
        },
        set: function (v) {
            this.i.m4 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.ne);
        },
        set: function (v) {
            this.i.ne = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.nf);
        },
        set: function (v) {
            this.i.nf = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.ms;
        },
        set: function (v) {
            this.i.ms = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get: function () {
            return this.i.mo;
        },
        set: function (v) {
            this.i.mo = ensureEnum(CollisionAvoidanceType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "styleShape", {
        get: function () {
            return this._styleShape;
        },
        set: function (ev) {
            var _this = this;
            if (this._styleShape_wrapped !== null) {
                this.i.styleShape = delegateRemove(this.i.styleShape, this._styleShape_wrapped);
                this._styleShape_wrapped = null;
                this._styleShape = null;
            }
            this._styleShape = ev;
            this._styleShape_wrapped = function (o, e) {
                var outerArgs = new IgrStyleShapeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeStyleShape) {
                    _this.beforeStyleShape(_this, outerArgs);
                }
                if (_this._styleShape) {
                    _this._styleShape(_this, outerArgs);
                }
            };
            this.i.styleShape = delegateCombine(this.i.styleShape, this._styleShape_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicShapeSeries;
}(IgrGeographicShapeSeriesBase));
export { IgrGeographicShapeSeries };
//# sourceMappingURL=igr-geographic-shape-series.js.map
