import * as tslib_1 from "tslib";
import { MarkerType_$type } from "igniteui-react-charts";
import { CollisionAvoidanceType_$type } from "igniteui-react-charts";
import { IgrGeographicMapSeriesHost } from "./igr-geographic-map-series-host";
import { GeographicSymbolSeries } from "./GeographicSymbolSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a ScatterSeries.
*/
var IgrGeographicSymbolSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrGeographicSymbolSeries, _super);
    function IgrGeographicSymbolSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrGeographicSymbolSeries.prototype.createImplementation = function () {
        return new GeographicSymbolSeries();
    };
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "latitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mi;
        },
        set: function (v) {
            this.i.mi = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "longitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mk;
        },
        set: function (v) {
            this.i.mk = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.mc;
        },
        set: function (v) {
            this.i.mc = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get: function () {
            return this.i.mb;
        },
        set: function (v) {
            this.i.mb = ensureEnum(CollisionAvoidanceType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.mu;
        },
        set: function (v) {
            this.i.mu = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.m5);
        },
        set: function (v) {
            this.i.m5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.m6);
        },
        set: function (v) {
            this.i.m6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "maximumMarkers", {
        /**
         * Gets or sets the maximum number of markerItems displayed by the current series.
         * If more than the specified number of markerItems are visible, the series will automatically
         * choose a representative set.
        */
        get: function () {
            return this.i.mh;
        },
        set: function (v) {
            this.i.mh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.mg;
        },
        set: function (v) {
            this.i.mg = +v;
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicSymbolSeries;
}(IgrGeographicMapSeriesHost));
export { IgrGeographicSymbolSeries };
//# sourceMappingURL=igr-geographic-symbol-series.js.map
