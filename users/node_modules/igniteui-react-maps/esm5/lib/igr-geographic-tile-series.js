import * as tslib_1 from "tslib";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrImageTilesReadyEventArgs } from "./igr-image-tiles-ready-event-args";
import { IgrGeographicShapeSeriesBase } from "./igr-geographic-shape-series-base";
import { GeographicTileSeries } from "./GeographicTileSeries";
/**
 * Series class used for displaying a tile set, and using shapes to define the areas that should be rendered.
*/
var IgrGeographicTileSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrGeographicTileSeries, _super);
    function IgrGeographicTileSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._imageTilesReady = null;
        _this._imageTilesReady_wrapped = null;
        return _this;
    }
    IgrGeographicTileSeries.prototype.createImplementation = function () {
        return new GeographicTileSeries();
    };
    Object.defineProperty(IgrGeographicTileSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicTileSeries.prototype, "tileImagery", {
        /**
         * The MapImagery which is used to provide the tiles for display.
        */
        get: function () {
            if (this.i.mq == null) {
                return null;
            }
            return this.i.mq.externalObject;
        },
        set: function (v) {
            v == null ? this.i.mq = null : this.i.mq = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicTileSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.tileImagery && this.tileImagery.name && this.tileImagery.name == name) {
            return this.tileImagery;
        }
        return null;
    };
    /**
     * Removes all cached tile Imagery from the
    
    */
    IgrGeographicTileSeries.prototype.clearTileCache = function () {
        this.i.mu();
    };
    Object.defineProperty(IgrGeographicTileSeries.prototype, "imageTilesReady", {
        /**
         * This event is fired whenever the image tiles transition from a loading state (e.g. some are fading in) to a loaded state.
        */
        get: function () {
            return this._imageTilesReady;
        },
        set: function (ev) {
            var _this = this;
            if (this._imageTilesReady_wrapped !== null) {
                this.i.imageTilesReady = delegateRemove(this.i.imageTilesReady, this._imageTilesReady_wrapped);
                this._imageTilesReady_wrapped = null;
                this._imageTilesReady = null;
            }
            this._imageTilesReady = ev;
            this._imageTilesReady_wrapped = function (o, e) {
                var outerArgs = new IgrImageTilesReadyEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeImageTilesReady) {
                    _this.beforeImageTilesReady(_this, outerArgs);
                }
                if (_this._imageTilesReady) {
                    _this._imageTilesReady(_this, outerArgs);
                }
            };
            this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, this._imageTilesReady_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicTileSeries;
}(IgrGeographicShapeSeriesBase));
export { IgrGeographicTileSeries };
//# sourceMappingURL=igr-geographic-tile-series.js.map
