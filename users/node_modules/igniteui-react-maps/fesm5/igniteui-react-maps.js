import { __extends, __values } from 'tslib';
import { createElement } from 'react';
import { createPortal } from 'react-dom';
import { VerticalLinearScaler, HorizontalLinearScaler, SeriesViewer, Series, SeriesView, NumericXAxis, NumericYAxis, ScalerParams, ChartVisualData, SeriesViewerView, ScatterAreaSeries, DataChartStylingDefaults, IgrSeriesCollection, IgrNumericXAxis, IgrNumericYAxis, IgrSeriesViewer, IgrSeries, ScatterPolygonSeries, CollisionAvoidanceType_$type, MarkerType_$type, StyleSelector, IgrStyleShapeEventArgs, IgrScatterPolygonSeriesModule, ScatterPolylineSeries, IgrScatterPolylineSeriesModule, ShapeSeriesBase, ShapeSeriesViewBase, IgrShapeSeriesBase, BubbleSeries, BrushScale, SizeScale, IgrSizeScale, IgrBrushScale, IgrBubbleSeriesModule, ScatterSeries, IgrScatterSeriesModule, IgrColorScale, IgrScatterAreaSeriesModule, HighDensityScatterSeries, IgrProgressiveLoadStatusEventArgs, IgrHighDensityScatterSeriesModule, ScatterContourSeries, ValueBrushScale, ContourValueResolver, IgrValueBrushScale, IgrContourValueResolver, IgrScatterContourSeriesModule, IgrSizeScaleModule, IgrValueBrushScaleModule, IgrCustomPaletteColorScaleModule } from 'igniteui-react-charts';
import { markEnum, Rect, markType, EventArgs, TypeRegistrar, PlatformConstants, typeCast, delegateRemove, runOn, delegateCombine, isNaN_, DependencyProperty, Number_$type, PropertyMetadata, Point_$type, fromEnum, MathUtil, intDivide, truncate, ItfConverter, RectData, IMapRenderDeferralHandler_$type, markDep, enumGetBox, PropertyChangedEventArgs, Control, INotifyPropertyChanged_$type, XamMultiScaleImage, Size, Base, Brush, OpenStreetMapTileSource, String_$type, IEnumerable_$type, NamePatcher, ContentChildrenManager, ReactRenderer, CollectionAdapter, NotifyCollectionChangedAction, ReactWrapper, IgrDataContext, ensureBool, ensureEnum, fromRect, toRect, toPoint, fromPoint, SyncableObservableCollection$2, IgCollection, IgrCancellingMultiScaleImageEventArgs, IgrDownloadingMultiScaleImageEventArgs, ObservableCollection$1, BingMapsTileSource, stringIsNullOrEmpty, Uri, HttpRequestUtil, List$1, stringEmpty, SyncableObservableCollection$1, IgrGetTileImageUriArgs, ArcGISOnlineTileSource, stringFormat1, stringRemove, stringFormat, Boolean_$type, IgrShapeDataSource, Style, DataTemplate, DeviceUtils, brushToString, stringToBrush, TileGeneratorTileSource, stringReplace, ITileGenerator_$type, GeometryGroup, RenderingContext, CanvasViewRenderer, IgrTriangulationDataSource, IgrTriangulationStatusEventArgs, Color, colorToString, stringToColor, IgrHeatTileGeneratorModule, IgrShapeDataSourceModule } from 'igniteui-react-core';

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the desired behavior for the map on resizing.
 */
var MapResizeBehavior = /*@__PURE__*/ (function (MapResizeBehavior) {
    /**
     * Indicates that the map should decide the desired resize mode automatically.
     */
    MapResizeBehavior[MapResizeBehavior["Auto"] = 0] = "Auto";
    /**
     * Map will attempt to keep the top left position static during resize.
     */
    MapResizeBehavior[MapResizeBehavior["MaintainTopLeftPosition"] = 1] = "MaintainTopLeftPosition";
    /**
     * Map will attempt to keep the center position static during resize.
     */
    MapResizeBehavior[MapResizeBehavior["MaintainCenterPosition"] = 2] = "MaintainCenterPosition";
    return MapResizeBehavior;
})({});
/**
 * @hidden
 */
var MapResizeBehavior_$type = /*@__PURE__*/ markEnum('MapResizeBehavior', 'Auto,0|MaintainTopLeftPosition,1|MaintainCenterPosition,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var SphericalMercatorVerticalScaler = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SphericalMercatorVerticalScaler, _super);
    function SphericalMercatorVerticalScaler() {
        var _this = _super.call(this) || this;
        _this.au = null;
        _this.ai = 0;
        _this.aj = 0;
        _this.au = new Rect(0, 0, 0, 1, 1);
        return _this;
    }
    SphericalMercatorVerticalScaler.prototype.q = function (a, b) {
        if (!b.c.isEmpty) {
            var c = a * b.e.height + b.e.top * b.d.height;
            var d = this.getMercatorUnscaledValue(c, this.au, b.c, b.a);
            return d;
        }
        else {
            return this.getMercatorUnscaledValue(a, b.e, b.d, b.a);
        }
    };
    SphericalMercatorVerticalScaler.prototype.p = function (a, b) {
        if (!b.c.isEmpty) {
            var c = this.getMercatorScaledValue1(a, this.au, b.c, b.a);
            c = (c - (b.e.top * b.d.height)) / b.e.height;
            return c;
        }
        else {
            return this.getMercatorScaledValue1(a, b.e, b.d, b.a);
        }
    };
    SphericalMercatorVerticalScaler.prototype.af = function (values_) {
        var a = (Array.isArray(values_) ? values_ : null);
        return a;
        return null;
    };
    SphericalMercatorVerticalScaler.prototype.v = function (a, b, c, d) {
        var e;
        var f = d.e;
        var g = d.d;
        var h = d.c;
        var i = d.a;
        var j = !h.isEmpty;
        var k = this.m;
        var l = this.o;
        var m = h.top;
        var n = h.height;
        var o = f.top;
        var p = f.height;
        var q = g.top;
        var r = g.height;
        var s = this.au.top;
        var t = this.au.height;
        var u = this.af(a);
        var v = 0.017453292519943295;
        var w;
        var x;
        var y;
        var z;
        var aa;
        var ab = false;
        if (u != null) {
            ab = true;
        }
        for (var ac = b; ac < c; ac++) {
            if (ab) {
                e = u[ac];
            }
            else {
                e = a.item(ac);
            }
            if (j) {
                if (e < SphericalMercatorVerticalScaler.ah) {
                    e = SphericalMercatorVerticalScaler.ah;
                }
                if (e > SphericalMercatorVerticalScaler.ag) {
                    e = SphericalMercatorVerticalScaler.ag;
                }
                w = e * (v);
                x = Math.sin(w);
                y = 0.5 * Math.log((1 + x) / (1 - x));
                z = (this.ai - y) * n / this.aj;
                z = m + z;
                aa = (z - s * n) / t;
                z = (aa - (o * r)) / p;
                if (ab) {
                    u[ac] = z;
                }
                else {
                    a.item(ac, z);
                }
            }
            else {
                if (e < SphericalMercatorVerticalScaler.ah) {
                    e = SphericalMercatorVerticalScaler.ah;
                }
                if (e > SphericalMercatorVerticalScaler.ag) {
                    e = SphericalMercatorVerticalScaler.ag;
                }
                w = e * (v);
                x = Math.sin(w);
                y = 0.5 * Math.log((1 + x) / (1 - x));
                z = (this.ai - y) * r / this.aj;
                z = q + z;
                z = (z - o * r) / p;
                if (ab) {
                    u[ac] = z;
                }
                else {
                    a.item(ac, z);
                }
            }
        }
    };
    SphericalMercatorVerticalScaler.prototype.t = function (a, b, c, d, e) {
        d = this.ak(a.kj);
        e = this.ak(a.ki);
        return {
            p3: d,
            p4: e
        };
    };
    SphericalMercatorVerticalScaler.prototype.w = function (a, b, c) {
        _super.prototype.w.call(this, a, b, c);
        switch (a) {
            case "ActualMinimumValue":
            case "ActualMaximumValue":
                this.ai = SphericalMercatorVerticalScaler.am(this.n);
                this.aj = SphericalMercatorVerticalScaler.am(this.n) - SphericalMercatorVerticalScaler.am(this.o);
                break;
        }
    };
    Object.defineProperty(SphericalMercatorVerticalScaler, "as", {
        get: function () {
            return SphericalMercatorVerticalScaler.ag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SphericalMercatorVerticalScaler, "at", {
        get: function () {
            return SphericalMercatorVerticalScaler.ah;
        },
        enumerable: true,
        configurable: true
    });
    SphericalMercatorVerticalScaler.prototype.getMercatorUnscaledValue = function (a, b, c, d) {
        var e = (a - c.top) * b.width + b.top * c.height;
        e = SphericalMercatorVerticalScaler.am(this.n) - e / (c.height / this.aj);
        return SphericalMercatorVerticalScaler.aq(e);
    };
    SphericalMercatorVerticalScaler.prototype.getMercatorScaledValue1 = function (a, b, c, d) {
        var e = c.top + this.getMercatorScaledValue3(a, c.height);
        return (e - b.top * c.height) / b.width;
    };
    SphericalMercatorVerticalScaler.prototype.getMercatorScaledValue2 = function (a, b, c, d, e) {
        var f = this.getMercatorScaledValue3(a, d.height);
        return (f - b.top * c.height) / b.width;
    };
    SphericalMercatorVerticalScaler.prototype.getMercatorScaledValue3 = function (a, b) {
        a = a > SphericalMercatorVerticalScaler.ah ? (a < SphericalMercatorVerticalScaler.ag ? a : SphericalMercatorVerticalScaler.ag) : SphericalMercatorVerticalScaler.ah;
        var c = SphericalMercatorVerticalScaler.am(a);
        var d = (this.ai - c) * b / this.aj;
        return (d);
    };
    SphericalMercatorVerticalScaler.am = function (a) {
        var b = a * (0.017453292519943295);
        var c = Math.sin(b);
        var d = 0.5 * Math.log((1 + c) / (1 - c));
        return d;
    };
    SphericalMercatorVerticalScaler.aq = function (a) {
        a = Math.exp(2 * a);
        return Math.asin((a - 1) / (a + 1)) / 0.017453292519943295;
    };
    SphericalMercatorVerticalScaler.prototype.ak = function (a) {
        if (a < SphericalMercatorVerticalScaler.ah) {
            return SphericalMercatorVerticalScaler.ah;
        }
        if (a > SphericalMercatorVerticalScaler.ag) {
            return SphericalMercatorVerticalScaler.ag;
        }
        return a;
    };
    SphericalMercatorVerticalScaler.$t = markType(SphericalMercatorVerticalScaler, 'SphericalMercatorVerticalScaler', VerticalLinearScaler.$);
    SphericalMercatorVerticalScaler.ag = 85.05112878;
    SphericalMercatorVerticalScaler.ah = -85.05112878;
    return SphericalMercatorVerticalScaler;
}(VerticalLinearScaler));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var SphericalMercatorHorizontalScaler = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SphericalMercatorHorizontalScaler, _super);
    function SphericalMercatorHorizontalScaler() {
        var _this = _super.call(this) || this;
        _this.aj = null;
        _this.aj = new Rect(0, 0, 0, 1, 1);
        return _this;
    }
    SphericalMercatorHorizontalScaler.prototype.q = function (a, b) {
        if (!b.c.isEmpty) {
            var c = a * b.e.width + b.e.left * b.d.width;
            var d = this.getMercatorUnscaledValue(c, this.aj, b.c, b.a);
            return d;
        }
        else {
            return this.getMercatorUnscaledValue(a, b.e, b.d, b.a);
        }
    };
    SphericalMercatorHorizontalScaler.prototype.p = function (a, b) {
        if (!b.c.isEmpty) {
            var c = this.getMercatorScaledValue1(a, this.aj, b.c, b.a);
            var d = (c - (b.e.left * b.d.width)) / b.e.width;
            return d;
        }
        else {
            return this.getMercatorScaledValue1(a, b.e, b.d, b.a);
        }
    };
    SphericalMercatorHorizontalScaler.prototype.af = function (values_) {
        var a = (Array.isArray(values_) ? values_ : null);
        return a;
        return null;
    };
    SphericalMercatorHorizontalScaler.prototype.v = function (a, b, c, d) {
        var e;
        var f = d.e;
        var g = d.d;
        var h = d.c;
        var i = d.a;
        var j = !h.isEmpty;
        var k = this.m;
        var l = this.o;
        var m = h.left;
        var n = h.width;
        var o = f.left;
        var p = f.width;
        var q = g.left;
        var r = g.width;
        var s = this.aj.left;
        var t = this.aj.width;
        var u = this.af(a);
        var v = false;
        if (u != null) {
            v = true;
        }
        for (var w = b; w < c; w++) {
            if (v) {
                e = u[w];
            }
            else {
                e = a.item(w);
            }
            if (j) {
                var x = (e - l) / (k);
                if (i) {
                    x = 1 - x;
                }
                x = m + n * (x - s) / t;
                var y = (x - (o * r)) / p;
                if (v) {
                    u[w] = y;
                }
                else {
                    a.item(w, y);
                }
            }
            else {
                var z = (e - l) / (k);
                if (i) {
                    z = 1 - z;
                }
                z = q + r * (z - o) / p;
                if (v) {
                    u[w] = z;
                }
                else {
                    a.item(w, z);
                }
            }
        }
    };
    SphericalMercatorHorizontalScaler.prototype.t = function (a, b, c, d, e) {
        d = a.kj;
        e = a.ki;
        return {
            p3: d,
            p4: e
        };
    };
    SphericalMercatorHorizontalScaler.prototype.getMercatorUnscaledValue = function (a, b, c, d) {
        var e = b.left + b.width * (a - c.left) / c.width;
        if (d) {
            e = 1 - e;
        }
        return this.o + e * (this.m);
    };
    SphericalMercatorHorizontalScaler.prototype.getMercatorScaledValue1 = function (a, b, c, d) {
        var e = (a - this.o) / (this.m);
        if (d) {
            e = 1 - e;
        }
        return c.left + c.width * (e - b.left) / b.width;
    };
    SphericalMercatorHorizontalScaler.prototype.getMercatorScaledValue2 = function (a, b, c, d, e) {
        var f = (a - this.o) / (this.m);
        if (e) {
            f = 1 - f;
        }
        return c.left + c.width * (f - b.left) / b.width;
    };
    SphericalMercatorHorizontalScaler.$t = markType(SphericalMercatorHorizontalScaler, 'SphericalMercatorHorizontalScaler', HorizontalLinearScaler.$);
    return SphericalMercatorHorizontalScaler;
}(HorizontalLinearScaler));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var ImageTilesReadyEventArgs = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ImageTilesReadyEventArgs, _super);
    function ImageTilesReadyEventArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageTilesReadyEventArgs.$t = markType(ImageTilesReadyEventArgs, 'ImageTilesReadyEventArgs', EventArgs.$);
    return ImageTilesReadyEventArgs;
}(EventArgs));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var ImagesChangedEventArgs = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ImagesChangedEventArgs, _super);
    function ImagesChangedEventArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImagesChangedEventArgs.$t = markType(ImagesChangedEventArgs, 'ImagesChangedEventArgs', EventArgs.$);
    return ImagesChangedEventArgs;
}(EventArgs));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicMapSeriesHost = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicMapSeriesHost, _super);
    function GeographicMapSeriesHost() {
        var _this = _super.call(this) || this;
        _this.l1 = null;
        _this.l3 = _this.l2();
        return _this;
    }
    GeographicMapSeriesHost.prototype.get_ct = function () {
        return true;
    };
    GeographicMapSeriesHost.prototype.fs = function (a, b) {
        var c = this.gv(b);
        if (c == "LatitudeMemberPath") {
            c = "YMemberPath";
        }
        if (c == "LongitudeMemberPath") {
            c = "XMemberPath";
        }
        return this.l3.fs(a, b);
    };
    GeographicMapSeriesHost.prototype.ch = function (a, b, c) {
        return this.l3.ch(a, b, c);
    };
    GeographicMapSeriesHost.prototype.ag = function () {
        return this.l3.ag();
    };
    GeographicMapSeriesHost.prototype.a5 = function () {
        return this.l3;
    };
    Object.defineProperty(GeographicMapSeriesHost.prototype, "l3", {
        get: function () {
            return this.l1;
        },
        set: function (a) {
            var b = this.l3 != a;
            if (b) {
                this.l1 = a;
                this.l8();
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapSeriesHost.prototype.l8 = function () {
        if (this.l1 != null) {
            var hostedSeries_ = this.l1;
            hostedSeries_.externalObject = TypeRegistrar.createFromInternal(hostedSeries_, PlatformConstants.Prefix, PlatformConstants.Postfix);
            hostedSeries_.externalObject._implementation = hostedSeries_;
        }
        this.h1(this.l3);
        this.l4.bv();
    };
    GeographicMapSeriesHost.prototype.fp = function (a) {
        return this.fu(this.l3, a);
    };
    GeographicMapSeriesHost.prototype.bf = function () {
        return new HostSeriesView(this);
    };
    GeographicMapSeriesHost.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.l4 = typeCast(HostSeriesView.$, a);
    };
    Object.defineProperty(GeographicMapSeriesHost.prototype, "l5", {
        get: function () {
            return this.c(GeographicMapSeriesHost.ma);
        },
        set: function (a) {
            this.h(GeographicMapSeriesHost.ma, a);
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapSeriesHost.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.l3.bs = this.bs;
                if (c != null) {
                    c.jy(this.l3);
                }
                if (d != null) {
                    this.bs.hc(this.l3);
                }
                this.l3.i3(this.lz);
                this.l3.fh = this.fh;
                this.h6(this.l3);
                this.fk = this.l3.fk;
                var e = typeCast(SeriesViewer.$, c);
                if (e != null) {
                    e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.l9));
                }
                if (this.bs != null) {
                    var f = this.bs;
                    f.actualWindowRectChanged = delegateCombine(f.actualWindowRectChanged, runOn(this, this.l9));
                }
                this.l7();
                break;
            case "SyncLink":
                this.l3.bn = this.bn;
                break;
            case "VisibleFromScale":
                this.l7();
                break;
            case "Index":
                this.l3.fh = this.fh;
                break;
            case "ItemsSource":
                this.l4.bw();
                break;
            case "Resolution":
                this.l4.by();
                break;
            case "TransitionDuration":
                this.l4.bz();
                break;
            case "Opacity":
                this.l4.bx();
                break;
            case "Visibility":
                var hs_ = this.l3;
                var v_ = this._visibility;
                hs_.visibility = v_;
                break;
            case "MouseOverEnabled":
                this.l3.c7 = this.c7;
                break;
            case "ExpectFunctions":
                this.l3.expectFunctions = this.expectFunctions;
                break;
        }
    };
    GeographicMapSeriesHost.prototype.l7 = function () {
        if (this.bs == null || this.l3 == null) {
            return;
        }
        if (!isNaN_(this.l5)) {
            if (this.bs.mr.width > this.l5) {
                var hs_ = this.l3;
                var v_ = 1;
                hs_.visibility = v_;
            }
            else {
                var hs2_ = this.l3;
                var v2_ = 0;
                hs2_.visibility = v2_;
            }
        }
    };
    GeographicMapSeriesHost.prototype.l9 = function (a, b) {
        this.l7();
    };
    GeographicMapSeriesHost.prototype.je = function (a) {
        _super.prototype.je.call(this, a);
        if (this.l3 != null) {
            this.l3.je(a);
        }
    };
    GeographicMapSeriesHost.prototype.jd = function (a, b, c, d, e) {
        if (this.l3 != null) {
            this.l3.jd(a, b, c, d, e);
        }
    };
    GeographicMapSeriesHost.prototype.ar = function (a, b) {
        return this.l3.ar(a, b);
    };
    GeographicMapSeriesHost.prototype.jn = function () {
        _super.prototype.jn.call(this);
        this.l3.jn();
    };
    GeographicMapSeriesHost.prototype.get_coercionMethods = function () {
        return this._coercionMethods;
    };
    GeographicMapSeriesHost.prototype.set_coercionMethods = function (a) {
        this._coercionMethods = a;
        this.l3.coercionMethods = a;
    };
    GeographicMapSeriesHost.prototype.h5 = function (a) {
        _super.prototype.h5.call(this, a);
        if (this.l3 != null) {
            var b = this.l3.fo();
            this.hy(a, b);
        }
    };
    GeographicMapSeriesHost.$t = markType(GeographicMapSeriesHost, 'GeographicMapSeriesHost', Series.$);
    GeographicMapSeriesHost.ma = DependencyProperty.i("VisibleFromScale", Number_$type, GeographicMapSeriesHost.$, new PropertyMetadata(2, 1, function (a, b) {
        var c = a;
        c.raisePropertyChanged("VisibleFromScale", b.oldValue, b.newValue);
    }));
    return GeographicMapSeriesHost;
}(Series));
/**
 * @hidden
 */
var HostSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(HostSeriesView, _super);
    function HostSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.bu = null;
        _this.bu = a;
        return _this;
    }
    HostSeriesView.prototype.ao = function (a, b) {
        _super.prototype.ao.call(this, a, b);
    };
    HostSeriesView.prototype.bv = function () {
        this.bu.l3.itemsSource = this.bu.itemsSource;
        this.bu.l3.fh = this.bu.fh;
        this.bu.l3.k6 = this.bu.k6;
        this.bu.l3.k9 = this.bu.k9;
        this.bu.l3.eu = this.bu.eu;
        this.bu.l3.fi = this.bu.fi;
        this.bu.l3._opacity = this.bu._opacity;
    };
    HostSeriesView.prototype.bw = function () {
        this.bu.l3.itemsSource = this.bu.itemsSource;
    };
    HostSeriesView.prototype.by = function () {
        this.bu.l3.eu = this.bu.eu;
    };
    HostSeriesView.prototype.bz = function () {
        this.bu.l3.fi = this.bu.fi;
    };
    HostSeriesView.prototype.bx = function () {
        this.bu.l3._opacity = this.bu._opacity;
    };
    HostSeriesView.$t = markType(HostSeriesView, 'HostSeriesView', SeriesView.$);
    return HostSeriesView;
}(SeriesView));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var XamGeographicMap = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(XamGeographicMap, _super);
    function XamGeographicMap() {
        var _this = _super.call(this) || this;
        _this.nv = null;
        _this.nr = 0;
        _this.oy = null;
        _this.nf = null;
        _this.nb = null;
        _this.nd = null;
        _this.nh = null;
        _this.ou = { $type: Point_$type, x: NaN, y: NaN };
        _this.o1 = null;
        _this.nq = 1;
        _this.imageTilesReady = null;
        _this.nl = null;
        _this.o0 = Rect.empty;
        _this.nr = SphericalMercatorVerticalScaler.am(XamGeographicMap.oz.bottom) - SphericalMercatorVerticalScaler.am(XamGeographicMap.oz.top);
        _this.ab = XamGeographicMap.$;
        _this.backgroundContent = new OpenStreetMapImagery();
        var a = ((function () {
            var $ret = new NumericXAxis();
            $ret.bh = _this;
            return $ret;
        })());
        a.b8 = true;
        _this.nc = a;
        _this.nc.ln = new SphericalMercatorHorizontalScaler();
        var b = ((function () {
            var $ret = new NumericYAxis();
            $ret.bh = _this;
            return $ret;
        })());
        b.b8 = true;
        _this.ne = b;
        _this.ne.ln = new SphericalMercatorVerticalScaler();
        _this.ob();
        _this.oi();
        _this.hs();
        return _this;
    }
    XamGeographicMap.prototype.provideContainer = function (a) {
        _super.prototype.provideContainer.call(this, a);
        this.nc.provideRenderer(a);
        this.ne.provideRenderer(a);
    };
    XamGeographicMap.prototype.hs = function () {
        _super.prototype.hs.call(this);
        this.nk.fm(this.ea);
    };
    XamGeographicMap.prototype.c3 = function () {
        return this.no;
    };
    XamGeographicMap.prototype.c4 = function () {
        return this.no;
    };
    Object.defineProperty(XamGeographicMap.prototype, "o3", {
        get: function () {
            return this.oy;
        },
        set: function (a) {
            var b = Rect.l_op_Inequality(this.oy, a);
            if (b) {
                var c = this.oy;
                this.oy = a;
                this.ji("ActualWorldRect", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.prototype.o7 = function () {
        return this.o3;
    };
    XamGeographicMap.prototype.ob = function () {
        if (this.pf.isEmpty) {
            return;
        }
        this.o3 = this.pd(this.pf, true);
    };
    XamGeographicMap.prototype.pd = function (a, b) {
        var c = a.top;
        var d = a.left;
        var e = a.width;
        var f = a.height;
        var g = SphericalMercatorVerticalScaler.am(a.bottom);
        var h = SphericalMercatorVerticalScaler.am(a.top);
        var i = g - h;
        var j = a.width / XamGeographicMap.oz.width;
        var k = SphericalMercatorVerticalScaler.am(XamGeographicMap.oz.top);
        var l = i / j;
        if (i / j > this.nr) {
            var m = i / this.nr;
            var n = m - j;
            d = d - (n / 2) * XamGeographicMap.oz.width;
            e = m * XamGeographicMap.oz.width;
            if (b) {
                if (d < XamGeographicMap.oz.left) {
                    d += (XamGeographicMap.oz.left - d);
                }
                else if ((d + e) > XamGeographicMap.oz.right) {
                    d -= ((d + e) - XamGeographicMap.oz.right);
                }
            }
        }
        else if (i / j < this.nr) {
            var o = this.nr * j;
            var p = o - i;
            var q = h - (p / 2);
            var r = g + (p / 2);
            if (b) {
                if (q < k) {
                    q += (k - q);
                    r += (k - q);
                }
                else if (r > (k + this.nr)) {
                    q -= ((r) - (k + this.nr));
                    r -= ((r) - (k + this.nr));
                }
            }
            c = SphericalMercatorVerticalScaler.aq(q);
            f = SphericalMercatorVerticalScaler.aq(r) - c;
        }
        var s = new Rect(0, d, c, e, f);
        return s;
    };
    Object.defineProperty(XamGeographicMap.prototype, "backgroundContent", {
        get: function () {
            return this.nf;
        },
        set: function (a) {
            var b = a != this.backgroundContent;
            if (b) {
                var c = this.backgroundContent;
                this.nf = a;
                this.ji("BackgroundContent", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamGeographicMap.prototype, "nc", {
        get: function () {
            return this.nb;
        },
        set: function (a) {
            var b = a != this.nc;
            if (b) {
                var c = this.nc;
                this.nb = a;
                this.ji("XAxis", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XamGeographicMap.prototype, "ne", {
        get: function () {
            return this.nd;
        },
        set: function (a) {
            var b = a != this.ne;
            if (b) {
                var c = this.ne;
                this.nd = a;
                this.ji("YAxis", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.prototype.getZoomRectFromGeoRect = function (a) {
        return this.getZoomFromGeographicRect(a);
    };
    XamGeographicMap.prototype.ol = function (a) {
        this.m6 = a;
    };
    XamGeographicMap.prototype.ok = function (a) {
        this.pf = a;
    };
    XamGeographicMap.prototype.getZoomFromGeographicRect = function (a) {
        return this.o5(a, true, 0);
    };
    XamGeographicMap.prototype.o4 = function (a, b) {
        return this.o5(a, false, b);
    };
    XamGeographicMap.prototype.o5 = function (a, b, c) {
        var d = a;
        if (b) {
            d = this.pd(a, false);
        }
        var e = this.nc;
        var f = this.ne;
        var g = new ScalerParams(1, XamGeographicMap.o2, this.m5, e.ca);
        g.c = this.mv;
        var h = new ScalerParams(1, XamGeographicMap.o2, this.m5, f.ca);
        h.c = this.mv;
        var i = this.nc.dy(d.left, g);
        var j = this.nc.dy(d.right, g);
        var k = this.ne.dy(d.top, h);
        var l = this.ne.dy(d.bottom, h);
        var m = (i - c) / this.m5.width;
        var n = (l - c) / this.m5.height;
        var o = (j - i + (c * 2)) / this.m5.width;
        var p = (k - l + (c * 2)) / this.m5.height;
        var q = new Rect(0, m, n, o, p);
        q.intersect(XamGeographicMap.o2);
        if (q.isEmpty) {
            q = XamGeographicMap.o2;
        }
        return q;
    };
    XamGeographicMap.prototype.getZoomFromGeographicPoints = function (a, b) {
        var c = a.x;
        var d = b.y;
        var e = b.x - a.x;
        var f = a.y - b.y;
        if (e < 0 || f < 0) {
            return XamGeographicMap.o2;
        }
        else {
            var g = new Rect(0, c, d, e, f);
            return this.getZoomFromGeographicRect(g);
        }
    };
    XamGeographicMap.prototype.o9 = function (a) {
        var b = this.nc;
        var c = this.ne;
        var d = new ScalerParams(1, a, this.m5, b.ca);
        d.c = this.mv;
        var e = new ScalerParams(1, a, this.m5, c.ca);
        e.c = this.mv;
        var f = this.mu;
        var g = b.d1(f.left, d);
        var h = c.d1(f.top, e);
        var i = b.d1(f.right, d);
        var j = c.d1(f.bottom, e);
        var k = i - g;
        var l = h - j;
        var m = new Rect(0, g, j, k, l);
        m.intersect(XamGeographicMap.oz);
        if (m.isEmpty) {
            m = XamGeographicMap.oz;
        }
        return m;
    };
    XamGeographicMap.prototype.ov = function (a) {
        var b = this.nc.km(a.x);
        var c = this.ne.km(a.y);
        return { $type: Point_$type, x: b, y: c };
    };
    XamGeographicMap.prototype.ow = function (a) {
        var b = this.nc.ed(a.x);
        var c = this.ne.ed(a.y);
        return { $type: Point_$type, x: b, y: c };
    };
    XamGeographicMap.prototype.ox = function (a) {
        return this.ow(a);
    };
    XamGeographicMap.prototype.n8 = function () {
        var a = typeCast(GeographicMapImagery.$, this.backgroundContent);
        if (a != null) {
            a.clearTileCache();
        }
    };
    XamGeographicMap.prototype.oe = function (a) {
    };
    XamGeographicMap.prototype.mb = function (a) {
        return this.nk.fq(a);
    };
    XamGeographicMap.prototype.mc = function (a) {
        return this.nk.fr(a);
    };
    XamGeographicMap.prototype.dh = function () {
        return true;
    };
    XamGeographicMap.prototype.og = function () {
        var e_1, _a;
        this.nk.d7();
        try {
            for (var _b = __values(fromEnum(this.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var a = _c.value;
                a.jn();
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    XamGeographicMap.prototype.oj = function () {
        if (this.nj == 2) {
            if (!this.m5.isEmpty && this.m5.width > 0 && this.m5.height > 0) {
                var a = this.nc.km(this.m5.left + (this.m5.width / 2));
                var b = this.ne.km(this.m5.top + (this.m5.height / 2));
                this.ou = { $type: Point_$type, x: a, y: b };
            }
        }
        else {
            if (!this.m5.isEmpty && this.m5.width > 0 && this.m5.height > 0) {
                var c = this.nc.km(this.m5.left);
                var d = this.ne.km(this.m5.top);
                this.ou = { $type: Point_$type, x: c, y: d };
            }
        }
    };
    XamGeographicMap.prototype.of = function () {
        if (isNaN_(this.ou.x) || isNaN_(this.ou.y)) {
            this.oj();
        }
        var a = this.ou.x;
        var b = this.ou.y;
        if (!isNaN_(a) && !isNaN_(b)) {
            var c = this.mr.left;
            var d = this.mr.top;
            var e = this.mr.width;
            var f = this.mr.height;
            if (e > this.o1.width) {
            }
            else {
                var g = new ScalerParams(1, XamGeographicMap.o2, this.m5, this.nc.ca);
                g.c = this.mv;
                var h = this.nc.dy(a, g);
                if (this.nj == 2) {
                    var i = h / this.m5.width;
                    c = i - (e / 2);
                }
                else {
                    c = h / this.m5.width;
                }
                if (c + e > this.o1.right) {
                    c = this.o1.right - e;
                }
                else if (c < this.o1.left) {
                    c = this.o1.left;
                }
            }
            if (f > this.o1.height) {
            }
            else {
                var j = new ScalerParams(1, XamGeographicMap.o2, this.m5, this.ne.ca);
                j.c = this.mv;
                var k = this.ne.dy(b, j);
                if (this.nj == 2) {
                    var l = k / this.m5.height;
                    d = l - (f / 2);
                }
                else {
                    d = k / this.m5.height;
                }
                if (d + f > this.o1.bottom) {
                    d = this.o1.bottom - f;
                }
                else if (d < this.o1.top) {
                    d = this.o1.top;
                }
            }
            this.km(new Rect(0, c, d, e, f), false);
        }
    };
    XamGeographicMap.prototype.get_cx = function () {
        return true;
    };
    XamGeographicMap.prototype.ms = function () {
        var a = _super.prototype.ms.call(this);
        if (this.nc == null || this.ne == null) {
            return a;
        }
        var b = new ScalerParams(1, XamGeographicMap.o2, this.m5, this.nc.ca);
        b.c = this.mv;
        var c = new ScalerParams(1, XamGeographicMap.o2, this.m5, this.ne.ca);
        c.c = this.mv;
        var d = this.nc.dy(XamGeographicMap.oz.left, b);
        var e = this.nc.dy(XamGeographicMap.oz.right, b);
        var f = this.ne.dy(XamGeographicMap.oz.top, c);
        var g = this.ne.dy(XamGeographicMap.oz.bottom, c);
        this.o1 = new Rect(0, d / this.m5.width, g / this.m5.height, (e - d) / this.m5.width, (f - g) / this.m5.height);
        var h = a.left;
        var i = a.top;
        if (this.m6.width > this.o1.width) {
            h = 0.5 - (this.m6.width / 2);
        }
        else if (h + a.width > this.o1.right) {
            h = this.o1.right - this.m6.width;
        }
        else if (h < this.o1.left) {
            h = this.o1.left;
        }
        if (this.m6.height > this.o1.height) {
            i = 0.5 - (this.m6.height / 2);
        }
        else if (i + this.m6.height > this.o1.bottom) {
            i = this.o1.bottom - this.m6.height;
        }
        else if (i < this.o1.top) {
            i = this.o1.top;
        }
        var j = new Rect(0, h, i, a.width, a.height);
        if (this.nn) {
            var k = this.o4(this.pf, 1);
            k = this.o6(k);
            var l = j.left + j.width / 2;
            var m = j.top + j.height / 2;
            if (j.width > k.width) {
                var n = j.height / j.width;
                var o = k.width;
                var p = n * o;
                j = new Rect(0, l - o / 2, m - p / 2, o, p);
            }
            if (j.height > k.height) {
                var q = j.width / j.height;
                var r = k.height;
                var s = q * r;
                j = new Rect(0, l - s / 2, m - r / 2, s, r);
            }
            if (j.left < k.left) {
                j = new Rect(0, k.left, j.top, j.width, j.height);
            }
            if (j.top < k.top) {
                j = new Rect(0, j.left, k.top, j.width, j.height);
            }
            if (j.right > k.right) {
                j = new Rect(0, k.right - j.width, j.top, j.width, j.height);
            }
            if (j.bottom > k.bottom) {
                j = new Rect(0, j.left, k.bottom - j.height, j.width, j.height);
            }
        }
        return j;
    };
    XamGeographicMap.prototype.o6 = function (a) {
        var b = this.ex;
        var c = 0.5 * (a.left + a.right);
        var d = 0.5 * (a.top + a.bottom);
        var e = a.width;
        var f = a.height;
        var g = MathUtil.b(a.width, b, 1);
        var h = MathUtil.b(a.height, b, 1);
        var i = this.m5;
        var j = i.width / i.height;
        var k = g * i.width;
        var l = h * i.height;
        var m = k / l;
        if (m != j) {
            if (l * j > k) {
                k = l * j;
                g = k / i.width;
            }
            else {
                l = k / j;
                h = l / i.height;
            }
        }
        var n = g != e;
        var o = h != f;
        var p = n ? c - 0.5 * g : a.left;
        var q = o ? d - 0.5 * h : a.top;
        var r = n ? c + 0.5 * g : a.right;
        var s = o ? d + 0.5 * h : a.bottom;
        if (p < 0) {
            p = 0;
            r = p + g;
        }
        if (r > 1) {
            r = 1;
            p = r - g;
        }
        if (q < 0) {
            q = 0;
            s = q + h;
        }
        if (s > 1) {
            s = 1;
            q = s - h;
        }
        return new Rect(0, p, q, r - p, s - q);
    };
    XamGeographicMap.prototype.mt = function (a) {
        _super.prototype.mt.call(this, this.m5);
        if (a.isEmpty) {
            return Rect.empty;
        }
        var b;
        if (a.width > a.height) {
            var c = intDivide(truncate((a.width - a.height)), 2);
            b = new Rect(0, a.left + c, a.top, a.height, a.height);
        }
        else {
            var d = intDivide(truncate((a.height - a.width)), 2);
            b = new Rect(0, a.left, a.top + d, a.width, a.width);
        }
        return b;
    };
    XamGeographicMap.prototype.o8 = function (a) {
        return this.mt(a);
    };
    XamGeographicMap.prototype.bm = function () {
        return new XamGeographicMapView(this);
    };
    XamGeographicMap.prototype.l7 = function (a) {
        return this.nk.fp(a);
    };
    XamGeographicMap.prototype.md = function (a) {
        return this.nk.fs(a);
    };
    XamGeographicMap.prototype.oa = function (a) {
        if (a != null) {
            a.bh = this;
        }
    };
    XamGeographicMap.prototype.i2 = function (a) {
        _super.prototype.i2.call(this, a);
        this.nk = a;
    };
    XamGeographicMap.prototype.jd = function (a, b) {
        _super.prototype.jd.call(this, a, b);
        this.kb(this.nc);
        this.kb(this.ne);
        if (Rect.l_op_Inequality(a, b)) {
            this.of();
        }
        if (this.nn) {
            this.mr = this.ms();
        }
        this.om();
    };
    Object.defineProperty(XamGeographicMap.prototype, "ns", {
        get: function () {
            return this.nq;
        },
        set: function (a) {
            var b = this.nq;
            this.nq = a;
            this.ji("ActualWindowScale", b, this.nq);
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.prototype.eg = function () {
        return this.ns;
    };
    XamGeographicMap.prototype.eh = function () {
        return this.ns;
    };
    XamGeographicMap.prototype.ka = function () {
        _super.prototype.ka.call(this);
        var a = Math.min(this.mr.width, this.mr.height);
        this.ns = a;
    };
    XamGeographicMap.prototype.je = function (a, b, c, d) {
        var e_2, _a;
        _super.prototype.je.call(this, a, b, c, d);
        switch (b) {
            case "WindowRect":
                this.oj();
                break;
            case XamGeographicMap.$$p[2]:
                this.mr = this.ms();
                break;
            case "BackgroundContent":
                if (this.nh != null) {
                    var e = this.nh;
                    e.imageTilesReady = delegateRemove(e.imageTilesReady, runOn(this, this.oc));
                    this.nh.deferralHandler = null;
                }
                this.nh = typeCast(GeographicMapImagery.$, this.backgroundContent);
                if (this.nh != null) {
                    var f = this.nh;
                    f.imageTilesReady = delegateCombine(f.imageTilesReady, runOn(this, this.oc));
                    this.nh.deferralHandler = this;
                }
                this.nk.fl(typeCast(GeographicMapImagery.$, c), typeCast(GeographicMapImagery.$, d));
                if (this.nh != null) {
                    this.nh.geographicMap = this;
                    this.nk.fi(this.mr);
                    this.nk.fm(this.ea);
                }
                break;
            case "YAxis":
            case "XAxis":
                this.oh(c);
                this.oa(d);
                break;
            case XamGeographicMap.$$p[4]:
                if (!this.nm) {
                    this.m6 = XamGeographicMap.o2;
                }
                this.ob();
                this.oi();
                this.oj();
                this.mr = this.ms();
                this.nk.fj();
                break;
            case "ActualWindowRect":
                this.nk.fi(this.mr);
                break;
            case "ActualWorldRect":
                try {
                    for (var _b = __values(fromEnum(this.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var g = _c.value;
                        g.je(false);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                break;
            case XamGeographicMap.$$p[3]:
                this.ns = this.nt;
                break;
            case "ActualWindowScale":
                if (!this.dg) {
                    this.kl(this.eg(), this.eh());
                }
                break;
            case "ActualPixelScalingRatio":
                this.nk.fm(this.ea);
                break;
            case XamGeographicMap.$$p[5]:
                this.kh();
                break;
        }
    };
    XamGeographicMap.prototype.oc = function (a, b) {
        if (this.imageTilesReady != null) {
            this.imageTilesReady(this, new ImageTilesReadyEventArgs());
        }
    };
    XamGeographicMap.prototype.oh = function (a) {
        if (a != null) {
            a.bh = null;
        }
    };
    XamGeographicMap.prototype.oi = function () {
        if (this.nc != null) {
            this.nc.kj = this.o3.left;
            this.nc.ki = this.o3.right;
        }
        if (this.ne != null) {
            this.ne.kj = this.o3.top;
            this.ne.ki = this.o3.bottom;
        }
        this.nc.co(true);
        this.ne.co(true);
    };
    XamGeographicMap.prototype.getFontInfo = function () {
        this.nl = this.nk.ff;
        return this.nl;
    };
    XamGeographicMap.prototype.l6 = function () {
        return this.nk.fn;
    };
    XamGeographicMap.prototype.getFontBrush = function () {
        return this.nk.fo;
    };
    XamGeographicMap.prototype.j5 = function (a, b) {
        if (typeCast(ItfConverter.$, b) !== null) {
            var c = b;
            var d = a;
            d.itemsSource = c.triangulationSource.points;
            d.mc = c.triangulationSource.triangles;
        }
        else {
            _super.prototype.j5.call(this, a, b);
        }
    };
    XamGeographicMap.prototype.register = function (a, b) {
        this.jv(a, b);
    };
    XamGeographicMap.prototype.unRegister = function (a) {
        this.j9(a);
    };
    XamGeographicMap.prototype.deferredRefresh = function () {
        this.hh();
    };
    XamGeographicMap.prototype.deferAction = function (a) {
        if (this.nv != null) {
            this.nv.setTimeout(a, 0);
        }
        else {
            window.setTimeout(a, 0);
        }
    };
    XamGeographicMap.prototype.n9 = function (a) {
        this.kg(a);
    };
    XamGeographicMap.prototype.nw = function () {
        var a = new ChartVisualData();
        var b = this.nc.e5();
        var c = this.ne.e5();
        a.axes.add1(b);
        a.axes.add1(c);
        for (var d = 0; d < this.series.count; d++) {
            var e = this.series._inner[d].fo();
            a.series.add1(e);
        }
        a.name = this.name;
        a.contentArea = RectData.b(this.m5);
        a.centralArea = RectData.b(this.m5);
        a.plotArea = RectData.b(this.m5);
        return a;
    };
    XamGeographicMap.prototype.my = function (a, b, c) {
        return a;
    };
    XamGeographicMap.prototype.od = function () {
    };
    Object.defineProperty(XamGeographicMap.prototype, "pe", {
        get: function () {
            return this.o0;
        },
        set: function (a) {
            this.o0 = a;
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.prototype.on = function (a) {
        this.pe = a;
        this.om();
    };
    XamGeographicMap.prototype.om = function () {
        if (this.np && !this.pe.isEmpty) {
            var a = this.getZoomFromGeographicRect(this.pe);
            this.pe = Rect.empty;
            this.km(a, false);
        }
    };
    Object.defineProperty(XamGeographicMap.prototype, "np", {
        get: function () {
            return !this.m5.isEmpty && !this.mv.isEmpty;
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMap.$t = markType(XamGeographicMap, 'XamGeographicMap', SeriesViewer.$, [IMapRenderDeferralHandler_$type]);
    XamGeographicMap.ni = 0;
    XamGeographicMap.oz = new Rect(2, { $type: Point_$type, x: -180, y: -85.05112878 }, { $type: Point_$type, x: 180, y: 85.05112878 });
    XamGeographicMap.o2 = new Rect(0, 0, 0, 1, 1);
    XamGeographicMap.$$p = markDep(DependencyProperty, PropertyMetadata, XamGeographicMap, 'ji', ['ResizeBehavior:nj:oo', [MapResizeBehavior_$type, enumGetBox(MapResizeBehavior_$type, XamGeographicMap.ni)], 'SuppressZoomResetOnWorldRectChange:nm:op', [0, false], 'UseWorldRectForZoomBounds:nn:oq', [0, false], 'WindowScale:nt:or', [1, NaN], 'WorldRect:pf:os', [Rect.$, XamGeographicMap.oz], 'Zoomable:no:ot', [0, true]]);
    return XamGeographicMap;
}(SeriesViewer));
/**
 * @hidden
 */
var GeographicMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicMapImagery, _super);
    function GeographicMapImagery(a) {
        var _this = _super.call(this) || this;
        _this.ak = null;
        _this.imageTilesReady = null;
        _this.an = null;
        _this.ap = null;
        _this.propertyChanged = null;
        _this.imagesChanged = null;
        _this.cancellingImage = null;
        _this.downloadingImage = null;
        _this.ab = GeographicMapImagery.$;
        _this.ap = a;
        _this.aj = _this.ai();
        _this.a9(_this.aj);
        return _this;
    }
    GeographicMapImagery.prototype.a9 = function (a) {
    };
    GeographicMapImagery.prototype.ai = function () {
        return new GeographicMapImageryView(this);
    };
    Object.defineProperty(GeographicMapImagery.prototype, "deferralHandler", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            if (this.ao != null) {
                this.ao.al = a;
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImagery.prototype.a3 = function (a, b) {
        if (this.imageTilesReady != null) {
            this.imageTilesReady(this, new ImageTilesReadyEventArgs());
        }
    };
    GeographicMapImagery.prototype.a7 = function () {
        var a = this.ao;
        a.imageTilesReady = delegateCombine(a.imageTilesReady, runOn(this, this.a3));
        this.ao.al = this.deferralHandler;
        var b = this.ao;
        b.imagesChanged = delegateCombine(b.imagesChanged, runOn(this, this.a2));
        var c = this.ao;
        c.downloadingImage = delegateCombine(c.downloadingImage, runOn(this, this.a1));
        var d = this.ao;
        d.cancellingImage = delegateCombine(d.cancellingImage, runOn(this, this.a0));
        this.ao.bc = this.referer;
        this.ao.bg = this.userAgent;
    };
    GeographicMapImagery.prototype.a1 = function (a, b) {
        if (this.downloadingImage != null) {
            this.downloadingImage(this, b);
        }
    };
    GeographicMapImagery.prototype.a0 = function (a, b) {
        if (this.cancellingImage != null) {
            this.cancellingImage(this, b);
        }
    };
    GeographicMapImagery.prototype.be = function () {
        if (this.ao != null) {
            this.aj.e();
        }
    };
    GeographicMapImagery.prototype.a8 = function (a, b, c) {
        switch (a) {
            case GeographicMapImagery.$$p[2]:
                this.be();
                break;
            case "GeographicMap":
                this.aj.e();
                break;
            case GeographicMapImagery.$$p[0]:
                if (this.ao != null) {
                    this.ao.bc = this.referer;
                }
                break;
            case GeographicMapImagery.$$p[1]:
                if (this.ao != null) {
                    this.ao.bg = this.userAgent;
                }
                break;
        }
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
    };
    Object.defineProperty(GeographicMapImagery.prototype, "geographicMap", {
        get: function () {
            return this.c(GeographicMapImagery.geographicMapProperty);
        },
        set: function (a) {
            this.h(GeographicMapImagery.geographicMapProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImagery.a6 = function (a, b) {
        a.a5(b.oldValue, b.newValue);
    };
    GeographicMapImagery.prototype.a5 = function (a, b) {
        this.a8("GeographicMap", a, b);
    };
    GeographicMapImagery.prototype.clearTileCache = function () {
        if (this.ao != null) {
            this.ao.bp(0, 0, 0, 0);
        }
    };
    Object.defineProperty(GeographicMapImagery.prototype, "ao", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs("MultiScaleImage"));
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImagery.prototype.bk = function (a) {
        if (this.geographicMap == null || a.width < 1 || a.height < 1) {
            return a;
        }
        var b = new Rect(0, 0, 0, a.width, a.height);
        var c = this.geographicMap.o8(b);
        var d = XamGeographicMap.oz;
        var e = this.geographicMap.o3;
        var f = Math.min(this.windowRect.height, this.windowRect.width);
        var g = e.width / d.width;
        this.ao.a3 = (b.width / c.width) * f * g;
        var h = this.geographicMap.nc;
        var i = this.geographicMap.ne;
        var j = new ScalerParams(1, this.windowRect, b, h.ca);
        j.c = c;
        var k = new ScalerParams(1, this.windowRect, b, i.ca);
        k.c = c;
        var l = h.dy(d.left, j);
        var m = i.dy(d.bottom, k);
        var n = (-l / b.width) * this.ao.a3;
        var o = (-m / b.height) * this.ao.a3 * (b.height / b.width);
        this.ao.ci = { $type: Point_$type, x: n, y: o };
        return a;
    };
    GeographicMapImagery.prototype.bb = function (a) {
        this.aj.f(a);
    };
    GeographicMapImagery.prototype.bd = function (a) {
        this.aj.h(a);
    };
    GeographicMapImagery.prototype.bc = function (a) {
        this.aj.g(a);
    };
    GeographicMapImagery.prototype.a2 = function (a, b) {
        if (this.imagesChanged != null) {
            this.imagesChanged(this, new ImagesChangedEventArgs());
        }
    };
    GeographicMapImagery.prototype.a4 = function () {
        this.aj.e();
    };
    GeographicMapImagery.prototype.ba = function (a) {
        this.aj.i(a);
    };
    GeographicMapImagery.prototype.v = function () {
        _super.prototype.v.call(this);
        this.ap.m = this._opacity;
    };
    GeographicMapImagery.$t = markType(GeographicMapImagery, 'GeographicMapImagery', Control.$, [INotifyPropertyChanged_$type]);
    GeographicMapImagery.geographicMapProperty = DependencyProperty.i("GeographicMap", XamGeographicMap.$, GeographicMapImagery.$, new PropertyMetadata(2, null, GeographicMapImagery.a6));
    GeographicMapImagery.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicMapImagery, 'a8', ['Referer', [2, null], 'UserAgent', [2, null], 'WindowRect', [Rect.$, Rect.empty]]);
    return GeographicMapImagery;
}(Control));
/**
 * @hidden
 */
var GeographicMapImageryView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicMapImageryView, _super);
    function GeographicMapImageryView(a) {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.j = null;
        _this.d = null;
        _this.b = 1;
        _this.j = Rect.empty;
        _this.a = a;
        _this.a.ao = new XamMultiScaleImage();
        _this.a.ao.ao = _this.a.ap;
        _this.a.a7();
        return _this;
    }
    GeographicMapImageryView.prototype.e = function () {
        if (this.j.isEmpty) {
            return;
        }
        this.a.bk(new Size(1, this.j.width, this.j.height));
    };
    GeographicMapImageryView.prototype.f = function (a) {
        this.a.ao.by(a);
    };
    GeographicMapImageryView.prototype.g = function (a) {
        this.d = a;
        this.a.ao.bz(a);
    };
    GeographicMapImageryView.prototype.h = function (a) {
        this.j = a;
        this.a.ao.b0(a);
        this.a.a4();
    };
    Object.defineProperty(GeographicMapImageryView.prototype, "c", {
        get: function () {
            return this.b;
        },
        enumerable: true,
        configurable: true
    });
    GeographicMapImageryView.prototype.i = function (a) {
        this.b = a;
        this.a.ao.bw(a);
    };
    GeographicMapImageryView.$t = markType(GeographicMapImageryView, 'GeographicMapImageryView');
    return GeographicMapImageryView;
}(Base));
/**
 * @hidden
 */
var GeographicXYTriangulatingSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicXYTriangulatingSeriesView, _super);
    function GeographicXYTriangulatingSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicXYTriangulatingSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        var a = this.b0.l3;
        a.mz = this.b0.mf;
        a.m3 = this.b0.md;
        a.trianglesSource = this.b0.mc;
        a.mr = this.b0.mi;
        a.mt = this.b0.mk;
        a.mv = this.b0.mm;
    };
    GeographicXYTriangulatingSeriesView.prototype.b3 = function () {
        var a = this.b0.l3;
        if (this.b0.bs == null) {
            a.l1 = null;
            a.l2 = null;
            return;
        }
        a.l1 = this.b0.bs.nc;
        a.l2 = this.b0.bs.ne;
    };
    GeographicXYTriangulatingSeriesView.prototype.b2 = function () {
        this.b0.l3.mz = this.b0.mf;
    };
    GeographicXYTriangulatingSeriesView.prototype.b1 = function () {
        this.b0.l3.m3 = this.b0.md;
    };
    GeographicXYTriangulatingSeriesView.prototype.b4 = function () {
        this.b0.l3.trianglesSource = this.b0.mc;
    };
    GeographicXYTriangulatingSeriesView.prototype.b5 = function () {
        this.b0.l3.mr = this.b0.mi;
    };
    GeographicXYTriangulatingSeriesView.prototype.b6 = function () {
        this.b0.l3.mt = this.b0.mk;
    };
    GeographicXYTriangulatingSeriesView.prototype.b7 = function () {
        this.b0.l3.mv = this.b0.mm;
    };
    GeographicXYTriangulatingSeriesView.$t = markType(GeographicXYTriangulatingSeriesView, 'GeographicXYTriangulatingSeriesView', HostSeriesView.$);
    return GeographicXYTriangulatingSeriesView;
}(HostSeriesView));
/**
 * @hidden
 */
var GeographicScatterAreaSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicScatterAreaSeriesView, _super);
    function GeographicScatterAreaSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b8 = null;
        _this.b8 = a;
        return _this;
    }
    GeographicScatterAreaSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        if (this.b8.mw != null) {
            this.b8.mw.nu = this.b8.mz;
            this.b8.mw.nm = this.b8.mv;
        }
    };
    GeographicScatterAreaSeriesView.prototype.b9 = function () {
        if (this.b8.mw != null) {
            this.b8.mw.nu = this.b8.mz;
        }
    };
    GeographicScatterAreaSeriesView.prototype.ca = function () {
        if (this.b8.mw != null) {
            this.b8.mw.nm = this.b8.mv;
        }
    };
    GeographicScatterAreaSeriesView.$t = markType(GeographicScatterAreaSeriesView, 'GeographicScatterAreaSeriesView', GeographicXYTriangulatingSeriesView.$);
    return GeographicScatterAreaSeriesView;
}(GeographicXYTriangulatingSeriesView));
/**
 * @hidden
 */
var XamGeographicMapView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(XamGeographicMapView, _super);
    function XamGeographicMapView(a) {
        var _this = _super.call(this, a) || this;
        _this.fe = null;
        _this.fu = null;
        _this.fo = null;
        _this.fn = null;
        _this.ff = null;
        _this.fg = NaN;
        _this.fu = Rect.empty;
        _this.fe = a;
        _this.fe.l1 = 2;
        _this.fe.ex = 5E-06;
        return _this;
    }
    XamGeographicMapView.prototype.k = function (a) {
        return 2;
    };
    XamGeographicMapView.prototype.bi = function (a) {
        this.i.bv(a);
        this.fe.n9(a);
        this.ee();
    };
    XamGeographicMapView.prototype.get_an = function () {
        return true;
    };
    XamGeographicMapView.prototype.dx = function () {
        var a;
        var b;
        var c;
        var d;
        var e;
        var f = this.i.a7(a, b, c, d, e);
        a = f.p0;
        b = f.p1;
        c = f.p2;
        d = f.p3;
        e = f.p4;
        this.fo = c;
        this.ff = d;
        this.fn = e;
    };
    XamGeographicMapView.prototype.fq = function (a) {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgba(0,0,0,1)";
            return $ret;
        })());
    };
    XamGeographicMapView.prototype.fr = function (a) {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "white";
            return $ret;
        })());
    };
    XamGeographicMapView.prototype.fp = function (a) {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgba(50,50,50,.5)";
            return $ret;
        })());
    };
    XamGeographicMapView.prototype.fs = function (a) {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "white";
            return $ret;
        })());
    };
    XamGeographicMapView.prototype.dm = function (a) {
        _super.prototype.dm.call(this, a);
        if (this.fe.backgroundContent != null) {
            var b = this.fe.backgroundContent;
            b.bc(this.i.ae);
            b.bb(a);
        }
    };
    XamGeographicMapView.prototype.dn = function (a) {
        _super.prototype.dn.call(this, a);
        this.fu = a;
        if (this.fe.backgroundContent != null) {
            var b = this.fe.backgroundContent;
            b.bd(this.fu);
        }
    };
    XamGeographicMapView.prototype.ft = function () {
        return new Rect(0, 0, 0, this.fu.width, this.fu.height);
    };
    XamGeographicMapView.prototype.fj = function () {
        if (this.fe.backgroundContent != null) {
            var a = this.fe.backgroundContent;
            a.a4();
        }
    };
    XamGeographicMapView.prototype.fi = function (a) {
        if (this.fe.nh != null) {
            this.fe.nh.windowRect = a;
        }
    };
    XamGeographicMapView.prototype.fl = function (a, b) {
        if (this.fe.nh != null) {
            this.fe.nh.windowRect = this.fe.mr;
        }
        if (a != null) {
            var c = a.ao;
            if (c != null) {
                this.fe.ah.e.remove(c.ag);
            }
            a.bb(null);
            a.bc(null);
        }
        if (b != null) {
            var d = b.ao;
            if (d != null) {
                this.fe.ah.e.add(d.ag);
            }
            if (!this.fu.isEmpty) {
                this.dn(this.fu);
            }
            if (this.u != null) {
                this.dm(this.u);
            }
        }
        if (b == null) {
            this.fk(this.u);
        }
    };
    XamGeographicMapView.prototype.fk = function (a) {
        var b = this.fe.ea;
        if (b != 1) {
            a.z();
            a.aa(b, b);
        }
        a.k(this.fu.left, this.fu.top, this.fu.width, this.fu.height);
        if (b != 1) {
            a.y();
        }
    };
    XamGeographicMapView.prototype.du = function () {
        this.e6.ac = 1;
        this.e7.ac = 1;
        this.e6._stroke = this.fo;
        this.e7._stroke = this.fo;
        _super.prototype.du.call(this);
    };
    XamGeographicMapView.prototype.fm = function (a) {
        this.fg = a;
        if (this.fe.backgroundContent != null) {
            this.fe.backgroundContent.ba(a);
        }
    };
    Object.defineProperty(XamGeographicMapView.prototype, "fh", {
        get: function () {
            return this.fg;
        },
        set: function (a) {
            this.fg = a;
        },
        enumerable: true,
        configurable: true
    });
    XamGeographicMapView.$t = markType(XamGeographicMapView, 'XamGeographicMapView', SeriesViewerView.$);
    return XamGeographicMapView;
}(SeriesViewerView));
/**
 * @hidden
 */
var OpenStreetMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(OpenStreetMapImagery, _super);
    function OpenStreetMapImagery() {
        return _super.call(this, new OpenStreetMapTileSource()) || this;
    }
    Object.defineProperty(OpenStreetMapImagery.prototype, "tilePath", {
        get: function () {
            return this.c(OpenStreetMapImagery.tilePathProperty);
        },
        set: function (a) {
            this.h(OpenStreetMapImagery.tilePathProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    OpenStreetMapImagery.bo = function (a, b) {
        a.bn("TilePath", b.oldValue, b.newValue);
    };
    OpenStreetMapImagery.prototype.bn = function (a, b, c) {
        switch (a) {
            case "TilePath":
                this.ap.setTilePathUrl(c == null ? null : c);
                this.aj.e();
                break;
        }
        _super.prototype.a8.call(this, a, b, c);
    };
    OpenStreetMapImagery.$t = markType(OpenStreetMapImagery, 'OpenStreetMapImagery', GeographicMapImagery.$);
    OpenStreetMapImagery.tilePathProperty = DependencyProperty.i("TilePath", String_$type, OpenStreetMapImagery.$, new PropertyMetadata(2, null, OpenStreetMapImagery.bo));
    return OpenStreetMapImagery;
}(GeographicMapImagery));
/**
 * @hidden
 */
var GeographicXYTriangulatingSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicXYTriangulatingSeries, _super);
    function GeographicXYTriangulatingSeries() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicXYTriangulatingSeries.prototype.bf = function () {
        return new GeographicXYTriangulatingSeriesView(this);
    };
    GeographicXYTriangulatingSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.mb = a;
    };
    GeographicXYTriangulatingSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.mb.b3();
                break;
            case GeographicXYTriangulatingSeries.$$p[1]:
                this.mb.b2();
                break;
            case GeographicXYTriangulatingSeries.$$p[0]:
                this.mb.b1();
                break;
            case GeographicXYTriangulatingSeries.$$p[2]:
                this.mb.b4();
                break;
            case GeographicXYTriangulatingSeries.$$p[3]:
                this.mb.b5();
                break;
            case GeographicXYTriangulatingSeries.$$p[4]:
                this.mb.b6();
                break;
            case GeographicXYTriangulatingSeries.$$p[5]:
                this.mb.b7();
                break;
        }
    };
    GeographicXYTriangulatingSeries.$t = markType(GeographicXYTriangulatingSeries, 'GeographicXYTriangulatingSeries', GeographicMapSeriesHost.$);
    GeographicXYTriangulatingSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicXYTriangulatingSeries, 'raisePropertyChanged', ['LatitudeMemberPath:md:mo', [2, "pointY"], 'LongitudeMemberPath:mf:mp', [2, "pointX"], 'TrianglesSource:mc:mq', [IEnumerable_$type, null], 'TriangleVertexMemberPath1:mi:mr', [2, "v1"], 'TriangleVertexMemberPath2:mk:ms', [2, "v2"], 'TriangleVertexMemberPath3:mm:mt', [2, "v3"]]);
    return GeographicXYTriangulatingSeries;
}(GeographicMapSeriesHost));
/**
 * @hidden
 */
var GeographicScatterAreaSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicScatterAreaSeries, _super);
    function GeographicScatterAreaSeries() {
        var _this = _super.call(this) || this;
        _this.mu = null;
        _this.triangulationStatusChanged = null;
        _this.ab = GeographicScatterAreaSeries.$;
        return _this;
    }
    Object.defineProperty(GeographicScatterAreaSeries.prototype, "mv", {
        get: function () {
            return this.mu;
        },
        set: function (a) {
            var b = this.mu != a;
            if (b) {
                var c = this.mu;
                this.mu = a;
                this.raisePropertyChanged("ColorScale", c, this.mu);
                if (this.mw != null) {
                    this.mw.nm = a;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicScatterAreaSeries.prototype.l2 = function () {
        this.mw = new ScatterAreaSeries();
        var a = this.mw;
        a.triangulationStatusChanged = delegateCombine(a.triangulationStatusChanged, runOn(this, this.m2));
        return this.mw;
    };
    GeographicScatterAreaSeries.prototype.m2 = function (a, b) {
        if (this.triangulationStatusChanged != null) {
            this.triangulationStatusChanged(this, b);
        }
    };
    GeographicScatterAreaSeries.prototype.bf = function () {
        return new GeographicScatterAreaSeriesView(this);
    };
    GeographicScatterAreaSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.my = a;
    };
    GeographicScatterAreaSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case GeographicScatterAreaSeries.$$p[0]:
                this.my.b9();
                break;
            case "ColorScale":
                this.my.ca();
                break;
        }
    };
    GeographicScatterAreaSeries.prototype.get_dq = function () {
        return true;
    };
    GeographicScatterAreaSeries.prototype.set_dq = function (a) {
        _super.prototype.set_dq.call(this, a);
    };
    GeographicScatterAreaSeries.$t = markType(GeographicScatterAreaSeries, 'GeographicScatterAreaSeries', GeographicXYTriangulatingSeries.$);
    GeographicScatterAreaSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicScatterAreaSeries, 'raisePropertyChanged', ['ColorMemberPath:mz:m3', [2, "value"]]);
    return GeographicScatterAreaSeries;
}(GeographicXYTriangulatingSeries));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

var IgrImageTilesReadyEventArgs = /** @class */ /*@__PURE__*/ (function () {
    function IgrImageTilesReadyEventArgs() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgrImageTilesReadyEventArgs.prototype.createImplementation = function () {
        return new ImageTilesReadyEventArgs();
    };
    Object.defineProperty(IgrImageTilesReadyEventArgs.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgrImageTilesReadyEventArgs.prototype.onImplementationCreated = function () {
    };
    IgrImageTilesReadyEventArgs.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    return IgrImageTilesReadyEventArgs;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Represents the Infragistics IgxGeographicMapComponent control.
*/
var IgrGeographicMap = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicMap, _super);
    function IgrGeographicMap(props) {
        var _this = _super.call(this, props) || this;
        _this.contentSeries = [];
        /**
         * The series actually present in the chart. Do not directly modify this array.
         * This array's contents can be modified by causing React to reproject the child content.
         * Or adding and removing series from the manual series collection on the series property.
         */
        _this.actualSeries = [];
        _this._series = null;
        _this._initialized = false;
        _this._seriesAdapter = null;
        _this._defaultTooltips = null;
        _this._uniqueTooltipId = 0;
        _this._imageTilesReady = null;
        _this._imageTilesReady_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        _this._tooltipRef = _this._tooltipRef.bind(_this);
        _this._activeTooltipElements = new Map();
        _this._activeTooltips = new Map();
        _this._currentTooltips = [];
        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });
        if (document) {
            _this._container = document.createElement("div");
            _this._container.style.display = "block";
            _this._container.style.width = "100%";
            _this._container.style.height = "100%";
        }
        var root;
        root = _this._container;
        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);
        _this._wrapper = ren;
        var chart = _this.i;
        _this._chart = chart;
        _this._seriesAdapter = new CollectionAdapter(_this.contentSeries, _this.i.series, _this.actualSeries, function (c) { return c.i; }, function (i) {
            i.owner = _this;
            i._provideRenderer(_this._dataSource);
            i.provideData(_this._dataSource);
            if (_this._container && _this._container.parentElement) {
                i._styling(_this._container, _this, _this);
            }
            _this._ensureDefaultTooltip(i);
            _this._ensureTooltipCreated(i);
        }, function (i) { i._provideRenderer(null); i.provideData(null); });
        chart.provideContainer(ren);
        ren.addSizeWatcher(function () {
            _this._chart.notifyContainerResized();
        });
        _this._initialized = true;
        return _this;
    }
    Object.defineProperty(IgrGeographicMap.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this._chart.notifyContainerResized();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "legend", {
        /**
         * Gets or sets the legend used for the current chart.
        */
        get: function () {
            if (this.i.legend != null)
                return this.i.legend.externalObject;
        },
        set: function (v) {
            if (v != undefined && v != null)
                this.i.legend = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMap.prototype._updateContentChildren = function () {
        this.contentSeries.length = 0;
        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (var i = 0; i < contentChildrenActual.length; i++) {
            this.contentSeries.push(contentChildrenActual[i]);
        }
        if (this._seriesAdapter !== null) {
            this._seriesAdapter.notifyContentChanged();
        }
    };
    IgrGeographicMap.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    IgrGeographicMap.prototype.render = function () {
        // if (!this._childrenDiffer(this.props.children)) {
        // 	let div = React.createElement("div", {
        // 		ref: (ref) => {
        // 			this._elRef = ref;
        // 		},
        // 		children: this.props.children
        // 	});
        // 	return div;
        // } else {
        var children = this._contentChildrenManager.getChildren(this.props.children);
        if (this._currentTooltips && this._currentTooltips.length > 0) {
            //children = React.Children.toArray(this.props.children);
            for (var i = 0; i < this._currentTooltips.length; i++) {
                var t = this._currentTooltips[i];
                if (this._activeTooltipElements.has(t)) {
                    children.push(this._activeTooltipElements.get(t));
                }
                else {
                    if (!TypeRegistrar.isRegistered("IgrTooltipContainer")) {
                        continue;
                    }
                    var Tooltip = TypeRegistrar.get("IgrTooltipContainer");
                    var tEle = createElement(Tooltip, {
                        ref: this._tooltipRef,
                        key: this._currentTooltips[i].key,
                        owner: this._currentTooltips[i]
                    });
                    var portal = createPortal(tEle, t, this._currentTooltips[i].key);
                    this._activeTooltipElements.set(t, portal);
                    children.push(portal);
                }
            }
        }
        var div = createElement("div", {
            className: "ig-geographic-map igr-geographic-map",
            ref: this._getMainRef,
            children: children
        });
        return div;
        //}
    };
    IgrGeographicMap.prototype._tooltipRef = function (t) {
        //console.log(t);
        if (t === null) {
            return;
        }
        if (t.currentOwner &&
            t.currentOwner.tooltipTemplate) {
            t.template = t.currentOwner.tooltipTemplate;
        }
        this._activeTooltips.set(t.currentOwner, t);
    };
    IgrGeographicMap.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._elRef.appendChild(this._container);
        this._chart.notifyContainerResized();
        this.initializeContent();
    };
    Object.defineProperty(IgrGeographicMap.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            if (this._elRef) {
                this._elRef.style.width = value;
                this._chart.notifyContainerResized();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "series", {
        /**
         * A collection or manually added series for the chart.
        */
        get: function () {
            var _this = this;
            if (this._series === null) {
                var coll = new IgrSeriesCollection();
                var inner = coll._innerColl;
                inner.addListener(function (sender, e) {
                    switch (e.action) {
                        case NotifyCollectionChangedAction.Add:
                            _this._seriesAdapter.addManualItem(e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);
                            break;
                        case NotifyCollectionChangedAction.Replace:
                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);
                            _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Reset:
                            _this._seriesAdapter.clearManualItems();
                            break;
                    }
                });
                this._series = coll;
            }
            return this._series;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMap.prototype.componentWillUnmount = function () {
        this._chart.destroy();
        this._wrapper.destroy();
    };
    IgrGeographicMap.prototype.createImplementation = function () {
        return new XamGeographicMap();
    };
    Object.defineProperty(IgrGeographicMap.prototype, "dataSource", {
        get: function () {
            return this._dataSource;
        },
        set: function (value) {
            this._dataSource = value;
            this.bindData();
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMap.prototype.bindData = function () {
        if (this.actualSeries && this.actualSeries.length > 0) {
            var currSeries = this.actualSeries;
            for (var i = 0; i < currSeries.length; i++) {
                currSeries[i].provideData(this._dataSource);
            }
        }
    };
    IgrGeographicMap.prototype.initializeContent = function () {
        if (TypeRegistrar.isRegistered("IgrDataChartDefaultTooltips")) {
            var d = TypeRegistrar.create("IgrDataChartDefaultTooltips");
            this._defaultTooltips = d;
            this._onDefaultTooltipsReady(d);
            //this._container.appendChild(cr.location.nativeElement);
        }
        this._styling(this._container, this);
        if (this.actualSeries && this.actualSeries.length > 0) {
            var currSeries = this.actualSeries;
            for (var i = 0; i < currSeries.length; i++) {
                currSeries[i]._styling(this._container, this, this);
            }
        }
        this.i.notifyContainerResized();
    };
    IgrGeographicMap.prototype._ensureTooltipCreated = function (series) {
        var _this = this;
        series._ensureTooltipCreated(function () { return _this.createTooltip(); }, function (ele) {
            var wrapper = new ReactWrapper(ele, _this._wrapper);
            wrapper.updateToolTip = ele.updateToolTip;
            wrapper.hideToolTip = ele.hideToolTip;
            if (_this._activeTooltips.has(ele)) {
                var tCont = _this._activeTooltips.get(ele);
                tCont.template = ele.tooltipTemplate;
            }
            return wrapper;
        });
    };
    IgrGeographicMap.prototype._ensureDefaultTooltip = function (series) {
        if (this._defaultTooltips == null) {
            return;
        }
        this._defaultTooltips["ensureDefaultTooltip"](series);
    };
    IgrGeographicMap.prototype._onDefaultTooltipsReady = function (cr) {
        if (this.actualSeries && this.actualSeries.length > 0) {
            var currSeries = this.actualSeries;
            for (var i = 0; i < currSeries.length; i++) {
                if (currSeries[i].showDefaultTooltip) {
                    this._ensureDefaultTooltip(currSeries[i]);
                }
            }
        }
    };
    IgrGeographicMap.prototype.createTooltip = function () {
        // if (!TypeRegistrar.isRegistered("IgrTooltipContainer")) {
        // 	return null;
        // }
        // let Tooltip = TypeRegistrar.get("IgrTooltipContainer");
        var wrapper = this._wrapper.createElement("div");
        var ele = wrapper.getNativeElement();
        ele.key = "__tooltip_" + this._uniqueTooltipId;
        this._uniqueTooltipId++;
        this._currentTooltips = this._currentTooltips.slice(0);
        this._currentTooltips.push(ele);
        //let element = React.createElement(Tooltip,  );
        //let portal = ReactDOM.createPortal(element, ele);
        var self = this;
        ele.updateToolTip = function (c, isSubContent) {
            if (c.externalObject) {
                c = c.externalObject;
            }
            else {
                var ext = new IgrDataContext();
                ext._implementation = c;
                c = ext;
            }
            if (!isSubContent) {
                if (ele.parentElement != self._container) {
                    if (ele.parentElement != null) {
                        ele.parentElement.removeChild(ele);
                    }
                    self._container.appendChild(ele);
                }
            }
            else {
                c.isSubContent = true;
            }
            if (self._activeTooltips.has(ele)) {
                var t = self._activeTooltips.get(ele);
                t.dataContext = c;
            }
            ele.style.display = "block";
            return true;
        };
        ele.hideToolTip = function () {
            ele.style.display = "none";
        };
        ele.style.display = "none";
        this._updateTooltipState();
        return ele;
    };
    IgrGeographicMap.prototype._updateTooltipState = function () {
        if (this._initialized) {
            this.setState({ tooltips: this._currentTooltips });
        }
    };
    Object.defineProperty(IgrGeographicMap.prototype, "backgroundContent", {
        /**
         * An imagery to display behind all series, inside the viewport of the IgrGeographicMapComponent control.
        */
        get: function () {
            if (this.i.backgroundContent != null) {
                return this.i.backgroundContent.externalObject;
            }
            else {
                return null;
            }
        },
        set: function (v) {
            if (v != undefined && v != null) {
                this.i.backgroundContent = v.i;
            }
            else {
                this.i.backgroundContent = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "i", {
        /**
                                 * @hidden
                                 */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "zoomable", {
        /**
     * Gets or sets zoomability of the current control
    */
        get: function () {
            return this.i.no;
        },
        set: function (v) {
            this.i.no = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "resizeBehavior", {
        /**
         * Gets or sets the behavior to use during resize.
        */
        get: function () {
            return this.i.nj;
        },
        set: function (v) {
            this.i.nj = ensureEnum(MapResizeBehavior_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "useWorldRectForZoomBounds", {
        /**
         * Gets or sets whether to use the uncoerced world rect to constrain the zoom bounds.
        */
        get: function () {
            return this.i.nn;
        },
        set: function (v) {
            this.i.nn = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "suppressZoomResetOnWorldRectChange", {
        /**
         * Gets or sets whether skip resetting the zoom when the world rect changes.
        */
        get: function () {
            return this.i.nm;
        },
        set: function (v) {
            this.i.nm = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "worldRect", {
        /**
         * Gets or sets the world bounding rectangle.
        */
        get: function () {
            return fromRect(this.i.pf);
        },
        set: function (v) {
            this.i.pf = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "actualWorldRect", {
        /**
         * Gets the actual value of the WorldRect.
        */
        get: function () {
            return fromRect(this.i.o3);
        },
        set: function (v) {
            this.i.o3 = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "xAxis", {
        /**
         * The X-axis for this IgxGeographicMap.Component
         * Under normal circumstances, this property should not be set in application code.  By default, it will be set to a numeric axis with a spherical mercator scaler.
        */
        get: function () {
            if (this.i.nc == null) {
                return null;
            }
            if (!this.i.nc.externalObject) {
                var e = IgrNumericXAxis._createFromInternal(this.i.nc);
                if (e) {
                    e._implementation = this.i.nc;
                }
                this.i.nc.externalObject = e;
            }
            return this.i.nc.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.nc = null : this.i.nc = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "yAxis", {
        /**
         * The Y-axis for this IgxGeographicMap.Component
         * Under normal circumstances, this property should not be set in application code.  By default, it will be set to a numeric axis with a spherical mercator scaler.
        */
        get: function () {
            if (this.i.ne == null) {
                return null;
            }
            if (!this.i.ne.externalObject) {
                var e = IgrNumericYAxis._createFromInternal(this.i.ne);
                if (e) {
                    e._implementation = this.i.ne;
                }
                this.i.ne.externalObject = e;
            }
            return this.i.ne.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.ne = null : this.i.ne = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "isMap", {
        /**
         * Indicates if this SeriesViewer is a map.
        */
        get: function () {
            return this.i.cx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "windowScale", {
        /**
         * A number between 0 and 1 determining the scale of the horizontal/vertical zoom.
         * This property is effectively a shortcut to the Width/Height of the WindowRect property.
        */
        get: function () {
            return this.i.nt;
        },
        set: function (v) {
            this.i.nt = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "actualWindowScale", {
        /**
         * A number between 0 and 1 determining the scale of the horizontal/vertical zoom.
         * This property is effectively a shortcut to the Width/Height of the ActualWindowRect property.
        */
        get: function () {
            return this.i.ns;
        },
        set: function (v) {
            this.i.ns = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMap.prototype, "zoomIsReady", {
        /**
         * Gets whether or not the control is ready for zooming
        */
        get: function () {
            return this.i.np;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMap.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.backgroundContent && this.backgroundContent.name && this.backgroundContent.name == name) {
            return this.backgroundContent;
        }
        return null;
    };
    IgrGeographicMap.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.xAxis && this.xAxis._styling) {
            this.xAxis._styling(container, component, this);
        }
        if (this.yAxis && this.yAxis._styling) {
            this.yAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgrGeographicMap.prototype.getCurrentActualWorldRect = function () {
        var iv = this.i.o7();
        return fromRect(iv);
    };
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
    
    * @param geographic  * The geographic area.
    */
    IgrGeographicMap.prototype.getZoomRectFromGeoRect = function (geographic) {
        var iv = this.i.getZoomRectFromGeoRect(toRect(geographic));
        return fromRect(iv);
    };
    IgrGeographicMap.prototype.updateZoomWindow = function (zoomWindow) {
        this.i.ol(toRect(zoomWindow));
    };
    IgrGeographicMap.prototype.updateWorldRect = function (worldRect) {
        this.i.ok(toRect(worldRect));
    };
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
    
    * @param geographic  * The geographic area.
    */
    IgrGeographicMap.prototype.getZoomFromGeographicRect = function (geographic) {
        var iv = this.i.getZoomFromGeographicRect(toRect(geographic));
        return fromRect(iv);
    };
    IgrGeographicMap.prototype.convertGeographicToZoom = function (geographic, extraPixelPadding) {
        var iv = this.i.o4(toRect(geographic), extraPixelPadding);
        return fromRect(iv);
    };
    IgrGeographicMap.prototype.getZoomFromGeographicPoints = function (northWest, southEast) {
        var iv = this.i.getZoomFromGeographicPoints(toPoint(northWest), toPoint(southEast));
        return fromRect(iv);
    };
    /**
     * Given a WindowRect and the current plot area, get the geographic region represented by that WindowRect.
    
    * @param windowRect  * The zoom area.
    */
    IgrGeographicMap.prototype.getGeographicFromZoom = function (windowRect) {
        var iv = this.i.o9(toRect(windowRect));
        return fromRect(iv);
    };
    /**
     * Convert a pixel-based coordinate to a geographic coordinate.
    
    * @param pixelCoordinate  * A pixel-based coordinate
    */
    IgrGeographicMap.prototype.getGeographicPoint = function (pixelCoordinate) {
        var iv = this.i.ov(toPoint(pixelCoordinate));
        return fromPoint(iv);
    };
    /**
     * Convert a geographic coordinate to a pixel-based coordinate.
    
    * @param geographicCoordinate  * A geographic coordinate
    */
    IgrGeographicMap.prototype.getPixelPoint = function (geographicCoordinate) {
        var iv = this.i.ow(toPoint(geographicCoordinate));
        return fromPoint(iv);
    };
    /**
     * Convert a geographic coordinate to a pixel-based coordinate.
    
    * @param geographicCoordinate  * A geographic coordinate
    */
    IgrGeographicMap.prototype.getWindowPoint = function (geographicCoordinate) {
        var iv = this.i.ox(toPoint(geographicCoordinate));
        return fromPoint(iv);
    };
    /**
     * Removes all cached tile images from the map imagery assigned to the map's background content.
    
    */
    IgrGeographicMap.prototype.clearTileCache = function () {
        this.i.n8();
    };
    /**
     * Notifies the chart that the CSS styles in effect have been updated.
    
    */
    IgrGeographicMap.prototype.styleUpdated = function () {
        this.i.og();
    };
    /**
     * Gets actual window scale for horizontal dimension of the control
    
    */
    IgrGeographicMap.prototype.getActualWindowScaleHorizontal = function () {
        var iv = this.i.eg();
        return (iv);
    };
    /**
     * Gets actual window scale for vertical dimension of the control
    
    */
    IgrGeographicMap.prototype.getActualWindowScaleVertical = function () {
        var iv = this.i.eh();
        return (iv);
    };
    /**
     * Calls for a deferred refresh to the GeographicMap's background.
    
    */
    IgrGeographicMap.prototype.deferredRefresh = function () {
        this.i.deferredRefresh();
    };
    /**
     * Returns the chart visuals expressed as a ChartVisualData object.
    
    */
    IgrGeographicMap.prototype.exportVisualData = function () {
        var iv = this.i.nw();
        return (iv);
    };
    /**
     * Zoom in to the geographic region specified, when possible (may need to wait for map to be initialized).
    
    * @param geographic  * The geographic region to zoom to.
    */
    IgrGeographicMap.prototype.zoomToGeographic = function (geographic) {
        this.i.on(toRect(geographic));
    };
    Object.defineProperty(IgrGeographicMap.prototype, "imageTilesReady", {
        /**
         * This event is fired whenever the image tiles transition from a loading state (e.g. some are fading in) to a loaded state.
        */
        get: function () {
            return this._imageTilesReady;
        },
        set: function (ev) {
            var _this = this;
            if (this._imageTilesReady_wrapped !== null) {
                this.i.imageTilesReady = delegateRemove(this.i.imageTilesReady, this._imageTilesReady_wrapped);
                this._imageTilesReady_wrapped = null;
                this._imageTilesReady = null;
            }
            this._imageTilesReady = ev;
            this._imageTilesReady_wrapped = function (o, e) {
                var outerArgs = new IgrImageTilesReadyEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeImageTilesReady) {
                    _this.beforeImageTilesReady(_this, outerArgs);
                }
                if (_this._imageTilesReady) {
                    _this._imageTilesReady(_this, outerArgs);
                }
            };
            this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, this._imageTilesReady_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicMap;
}(IgrSeriesViewer));

var IgrSubDomainsCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrSubDomainsCollection, _super);
    function IgrSubDomainsCollection(list) {
        var _this = _super.call(this) || this;
        if (list) {
            for (var i = 0; i < list.length; i++) {
                _this.add(list[i]);
            }
        }
        return _this;
    }
    IgrSubDomainsCollection.prototype._createInnerColl = function () {
        var coll = new SyncableObservableCollection$2(String_$type, String_$type, 0);
        coll.compare = function (ext, int) {
            var comp = ext;
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = function (ext) {
            return ext;
        };
        coll.createFrom = function (int) {
            return int;
        };
        return coll;
    };
    return IgrSubDomainsCollection;
}(IgCollection));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Describes available map styles for the Bing Maps imagery.
 */
var BingMapsImageryStyle = /*@__PURE__*/ (function (BingMapsImageryStyle) {
    /**
     * Specifies the Aerial map style without road or labels overlay.
     */
    BingMapsImageryStyle[BingMapsImageryStyle["Aerial"] = 0] = "Aerial";
    /**
     * Specifies the Aerial map style with road and labels overlay.
     */
    BingMapsImageryStyle[BingMapsImageryStyle["AerialWithLabels"] = 1] = "AerialWithLabels";
    /**
     * Specifies the Roads map style without aerial overlay.
     */
    BingMapsImageryStyle[BingMapsImageryStyle["Road"] = 2] = "Road";
    /**
     * Specifies a dark version of the Roads maps.
     */
    BingMapsImageryStyle[BingMapsImageryStyle["CanvasDark"] = 3] = "CanvasDark";
    /**
     * Specifies a lighter version of the Roads maps.
     */
    BingMapsImageryStyle[BingMapsImageryStyle["CanvasLight"] = 4] = "CanvasLight";
    /**
     * Specifies a grayscale version of the Roads maps.
     */
    BingMapsImageryStyle[BingMapsImageryStyle["CanvasGray"] = 5] = "CanvasGray";
    return BingMapsImageryStyle;
})({});
/**
 * @hidden
 */
var BingMapsImageryStyle_$type = /*@__PURE__*/ markEnum('BingMapsImageryStyle', 'Aerial,0|AerialWithLabels,1|Road,2|CanvasDark,3|CanvasLight,4|CanvasGray,5');

var IgrImagesChangedEventArgs = /** @class */ /*@__PURE__*/ (function () {
    function IgrImagesChangedEventArgs() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgrImagesChangedEventArgs.prototype.createImplementation = function () {
        return new ImagesChangedEventArgs();
    };
    Object.defineProperty(IgrImagesChangedEventArgs.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgrImagesChangedEventArgs.prototype.onImplementationCreated = function () {
    };
    IgrImagesChangedEventArgs.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    return IgrImagesChangedEventArgs;
}());

/**
 * Control class used for displaying multi-scale TileSource imagery.  Designed to be used for background imagery in the IgxGeographicMap.Component
*/
var IgrGeographicMapImagery = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicMapImagery() {
        this._imageTilesReady = null;
        this._imageTilesReady_wrapped = null;
        this._imagesChanged = null;
        this._imagesChanged_wrapped = null;
        this._cancellingImage = null;
        this._cancellingImage_wrapped = null;
        this._downloadingImage = null;
        this._downloadingImage_wrapped = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgrGeographicMapImagery.prototype.createImplementation = function () {
        return null;
    };
    Object.defineProperty(IgrGeographicMapImagery.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMapImagery.prototype.onImplementationCreated = function () {
    };
    IgrGeographicMapImagery.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(IgrGeographicMapImagery.prototype, "deferralHandler", {
        /**
         * The deferral handler to use for deferred refreshes.
        */
        get: function () {
            return this.i.deferralHandler;
        },
        set: function (v) {
            this.i.deferralHandler = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapImagery.prototype, "windowRect", {
        /**
         * A rectangle representing the portion of the map imagery currently in view.
         * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
        */
        get: function () {
            return fromRect(this.i.windowRect);
        },
        set: function (v) {
            this.i.windowRect = toRect(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapImagery.prototype, "geographicMap", {
        /**
         * The IgxGeographicMapComponent which is hosting this GeographicMapImagery control.
        */
        get: function () {
            if (this.i.geographicMap == null) {
                return null;
            }
            return this.i.geographicMap.externalObject;
        },
        set: function (v) {
            v == null ? this.i.geographicMap = null : this.i.geographicMap = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapImagery.prototype, "referer", {
        /**
         * Gets or sets the referer sent in the headers of the tile request.
        */
        get: function () {
            return this.i.referer;
        },
        set: function (v) {
            this.i.referer = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapImagery.prototype, "userAgent", {
        /**
         * Gets or sets the UserAgent sent in the headers of the tile request.
        */
        get: function () {
            return this.i.userAgent;
        },
        set: function (v) {
            this.i.userAgent = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapImagery.prototype, "opacity", {
        get: function () {
            return this.i.opacity;
        },
        set: function (v) {
            this.i.opacity = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMapImagery.prototype.findByName = function (name) {
        if (this.geographicMap && this.geographicMap.name && this.geographicMap.name == name) {
            return this.geographicMap;
        }
        return null;
    };
    /**
     * Removes all cached tile Imagery from the
    
    */
    IgrGeographicMapImagery.prototype.clearTileCache = function () {
        this.i.clearTileCache();
    };
    Object.defineProperty(IgrGeographicMapImagery.prototype, "imageTilesReady", {
        /**
         * Event raised when the image tiles have been downloaded.
        */
        get: function () {
            return this._imageTilesReady;
        },
        set: function (ev) {
            var _this = this;
            if (this._imageTilesReady_wrapped !== null) {
                this.i.imageTilesReady = delegateRemove(this.i.imageTilesReady, this._imageTilesReady_wrapped);
                this._imageTilesReady_wrapped = null;
                this._imageTilesReady = null;
            }
            this._imageTilesReady = ev;
            this._imageTilesReady_wrapped = function (o, e) {
                var outerArgs = new IgrImageTilesReadyEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeImageTilesReady) {
                    _this.beforeImageTilesReady(_this, outerArgs);
                }
                if (_this._imageTilesReady) {
                    _this._imageTilesReady(_this, outerArgs);
                }
            };
            this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, this._imageTilesReady_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapImagery.prototype, "imagesChanged", {
        /**
         * Event raised when tile images have changed.
        */
        get: function () {
            return this._imagesChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._imagesChanged_wrapped !== null) {
                this.i.imagesChanged = delegateRemove(this.i.imagesChanged, this._imagesChanged_wrapped);
                this._imagesChanged_wrapped = null;
                this._imagesChanged = null;
            }
            this._imagesChanged = ev;
            this._imagesChanged_wrapped = function (o, e) {
                var outerArgs = new IgrImagesChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeImagesChanged) {
                    _this.beforeImagesChanged(_this, outerArgs);
                }
                if (_this._imagesChanged) {
                    _this._imagesChanged(_this, outerArgs);
                }
            };
            this.i.imagesChanged = delegateCombine(this.i.imagesChanged, this._imagesChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapImagery.prototype, "cancellingImage", {
        /**
         * Event raised when an image is being downloaded.
        */
        get: function () {
            return this._cancellingImage;
        },
        set: function (ev) {
            var _this = this;
            if (this._cancellingImage_wrapped !== null) {
                this.i.cancellingImage = delegateRemove(this.i.cancellingImage, this._cancellingImage_wrapped);
                this._cancellingImage_wrapped = null;
                this._cancellingImage = null;
            }
            this._cancellingImage = ev;
            this._cancellingImage_wrapped = function (o, e) {
                var outerArgs = new IgrCancellingMultiScaleImageEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeCancellingImage) {
                    _this.beforeCancellingImage(_this, outerArgs);
                }
                if (_this._cancellingImage) {
                    _this._cancellingImage(_this, outerArgs);
                }
            };
            this.i.cancellingImage = delegateCombine(this.i.cancellingImage, this._cancellingImage_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapImagery.prototype, "downloadingImage", {
        /**
         * Event raised when an image is being downloaded.
        */
        get: function () {
            return this._downloadingImage;
        },
        set: function (ev) {
            var _this = this;
            if (this._downloadingImage_wrapped !== null) {
                this.i.downloadingImage = delegateRemove(this.i.downloadingImage, this._downloadingImage_wrapped);
                this._downloadingImage_wrapped = null;
                this._downloadingImage = null;
            }
            this._downloadingImage = ev;
            this._downloadingImage_wrapped = function (o, e) {
                var outerArgs = new IgrDownloadingMultiScaleImageEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeDownloadingImage) {
                    _this.beforeDownloadingImage(_this, outerArgs);
                }
                if (_this._downloadingImage) {
                    _this._downloadingImage(_this, outerArgs);
                }
            };
            this.i.downloadingImage = delegateCombine(this.i.downloadingImage, this._downloadingImage_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicMapImagery;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var SubDomainsCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SubDomainsCollection, _super);
    function SubDomainsCollection(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = this;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    _this = _super.call(this, String_$type, 0) || this;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    _this = _super.call(this, String_$type, 1, c) || this;
                }
                break;
        }
        return _this;
    }
    SubDomainsCollection.$t = markType(SubDomainsCollection, 'SubDomainsCollection', ObservableCollection$1.$.specialize(String_$type));
    return SubDomainsCollection;
}(ObservableCollection$1));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var BingMapsMapImageryView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BingMapsMapImageryView, _super);
    function BingMapsMapImageryView(a) {
        var _this = _super.call(this, a) || this;
        _this.k = a;
        return _this;
    }
    BingMapsMapImageryView.prototype.m = function () {
        if (this.k.subDomains == null) {
            this.k.subDomains = new SubDomainsCollection(0);
        }
        this.k.ap.tilePath = this.k.actualTilePath;
        this.k.ap.subDomains = this.k.actualSubDomains;
        this.k.ap.cultureName = this.k.cultureName;
    };
    BingMapsMapImageryView.prototype.o = function () {
        this.k.ap.tilePath = this.k.actualTilePath;
    };
    BingMapsMapImageryView.prototype.l = function () {
        this.k.ap.cultureName = this.k.cultureName;
    };
    BingMapsMapImageryView.prototype.n = function () {
        this.k.ap.subDomains = this.k.actualSubDomains;
    };
    BingMapsMapImageryView.$t = markType(BingMapsMapImageryView, 'BingMapsMapImageryView', GeographicMapImageryView.$);
    return BingMapsMapImageryView;
}(GeographicMapImageryView));
/**
 * @hidden
 */
var BingMapsMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BingMapsMapImagery, _super);
    function BingMapsMapImagery() {
        var _this = _super.call(this, new BingMapsTileSource(0)) || this;
        _this._pendingBingRequest_ = null;
        _this._isInitialized = false;
        _this.bw = null;
        _this.bn = null;
        _this.bx = null;
        _this.bv = null;
        _this.getResponseCompleted = _this.getResponseCompleted.bind(_this);
        _this.bm.m();
        _this.actualBingImageryRestUri = BingMapsMapImagery.b9;
        return _this;
    }
    BingMapsMapImagery.prototype.ai = function () {
        return new BingMapsMapImageryView(this);
    };
    BingMapsMapImagery.prototype.a9 = function (a) {
        _super.prototype.a9.call(this, a);
        this.bm = a;
    };
    Object.defineProperty(BingMapsMapImagery.prototype, "isInitialized", {
        get: function () {
            return this._isInitialized;
        },
        set: function (a) {
            this._isInitialized = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapsMapImagery.prototype, "actualTilePath", {
        get: function () {
            return this.bw;
        },
        set: function (a) {
            var b = this.bw;
            this.bw = a;
            this.cj("ActualTilePath", b, this.bw);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapsMapImagery.prototype, "actualSubDomains", {
        get: function () {
            return this.bn;
        },
        set: function (a) {
            var b = this.bn;
            this.bn = a;
            this.cj("ActualSubDomains", b, this.bn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapsMapImagery.prototype, "bingImageryRestUri", {
        get: function () {
            return this.bx;
        },
        set: function (a) {
            var b = this.bx;
            this.bx = a;
            this.cj("BingImageryRestUri", b, this.bx);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapsMapImagery.prototype, "actualBingImageryRestUri", {
        get: function () {
            return this.bv;
        },
        set: function (a) {
            var b = this.bv;
            this.bv = a;
            this.a8("ActualBingImageryRestUri", b, this.bv);
        },
        enumerable: true,
        configurable: true
    });
    BingMapsMapImagery.prototype.requestMapSettings = function () {
        this.cl(true);
    };
    BingMapsMapImagery.prototype.cl = function (a) {
        this.ci(a);
    };
    BingMapsMapImagery.prototype.bt = function () {
        if ((this.tilePath == null) && (this.subDomains == null)) {
            return true;
        }
        return false;
    };
    BingMapsMapImagery.prototype.cn = function () {
        this.isInitialized = false;
        if (!this.bs()) {
            this.cm("", null);
            return;
        }
        if (!this.isDeferredLoad) {
            this.cl(false);
        }
    };
    BingMapsMapImagery.prototype.bs = function () {
        if (stringIsNullOrEmpty(this.apiKey) || this.apiKey.length < 20) {
            return false;
        }
        return true;
    };
    BingMapsMapImagery.prototype.cg = function () {
    };
    BingMapsMapImagery.prototype.cm = function (a, b) {
        if (a != this.actualTilePath) {
            this.actualTilePath = a;
        }
        var c = b == null ? null : new SubDomainsCollection(1, b);
        if (this.actualSubDomains != c) {
            this.actualSubDomains = c;
        }
        this.bm.m();
    };
    BingMapsMapImagery.prototype.ci = function (a) {
        if ((!a) && (this.isDeferredLoad)) {
            return;
        }
        if (!this.bs()) {
            this.isInitialized = false;
            this.cm("", null);
            return;
        }
        this.isInitialized = true;
        var b = null;
        if (this.bingImageryRestUri != null) {
            if (Uri.isWellFormedUriString(this.bingImageryRestUri, 1)) {
                b = this.bingImageryRestUri;
            }
        }
        else {
            if (Uri.isWellFormedUriString(this.actualBingImageryRestUri, 1)) {
                b = this.actualBingImageryRestUri;
            }
        }
        if (b == null) {
            this.cm("", null);
            return;
        }
        var c = this.imageryStyle;
        b += enumGetBox(BingMapsImageryStyle_$type, c);
        var d = "key=" + this.apiKey + "&include=ImageryProviders";
        var url_ = b + "?" + d;
        this._pendingBingRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted, null);
    };
    BingMapsMapImagery.prototype.getResponseCompleted = function (a, b) {
        if (b != this._pendingBingRequest_) {
            return;
        }
        this._pendingBingRequest_ = null;
        var data_ = a;
        var resourceSets_ = JSON.parse(data_).resourceSets;
        if (resourceSets_ == null) {
            return;
        }
        var resources_ = resourceSets_.length > 0 ? resourceSets_[0].resources : null;
        if (resources_ == null) {
            return;
        }
        if (resources_.length == 0) {
            return;
        }
        ;
        var imageUrl_ = (resources_[0].imageUrl);
        var subDomains_ = new List$1(String_$type, 0);
        for (var i = 0; i < resources_[0].imageUrlSubdomains.length; i++) {
            subDomains_.add(resources_[0].imageUrlSubdomains[i]);
        }
        ;
        this.cm(imageUrl_, subDomains_);
    };
    BingMapsMapImagery.prototype.cf = function (a, b) {
        this.aj.e();
        this.cn();
        this.cj(BingMapsMapImagery.$$p[4], this.actualSubDomains, this.actualSubDomains);
    };
    BingMapsMapImagery.prototype.cj = function (a, b, c) {
        switch (a) {
            case BingMapsMapImagery.$$p[0]:
                this.cn();
                break;
            case BingMapsMapImagery.$$p[3]:
                this.cn();
                break;
            case BingMapsMapImagery.$$p[5]:
                this.cg();
                this.actualTilePath = c;
                this.bm.o();
                this.aj.e();
                break;
            case BingMapsMapImagery.$$p[1]:
                this.bm.l();
                this.aj.e();
                break;
            case BingMapsMapImagery.$$p[2]:
                this.cn();
                break;
            case BingMapsMapImagery.$$p[4]:
                this.cg();
                var d = b;
                var e = c;
                if (this.actualSubDomains != null) {
                    var f = this.actualSubDomains;
                    f.collectionChanged = delegateRemove(f.collectionChanged, runOn(this, this.cf));
                }
                this.actualSubDomains = e;
                if (this.actualSubDomains != null) {
                    e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.cf));
                }
                this.bm.n();
                this.aj.e();
                break;
            case "ActualTilePath":
                var g = c;
                if (stringIsNullOrEmpty(g)) {
                    this.cn();
                }
                break;
            case "BingImageryRestUri":
                this.actualBingImageryRestUri = c;
                this.cg();
                this.cn();
                break;
            case "ActualBingImageryRestUri":
                this.cg();
                this.cn();
                break;
        }
        _super.prototype.a8.call(this, a, b, c);
    };
    BingMapsMapImagery.$t = markType(BingMapsMapImagery, 'BingMapsMapImagery', GeographicMapImagery.$);
    BingMapsMapImagery.b9 = "http://dev.virtualearth.net/REST/v1/Imagery/Metadata/";
    BingMapsMapImagery.$$p = markDep(DependencyProperty, PropertyMetadata, BingMapsMapImagery, 'cj', ['ApiKey', [2, stringEmpty()], 'CultureName', [2, "en-US"], 'ImageryStyle', [BingMapsImageryStyle_$type, enumGetBox(BingMapsImageryStyle_$type, 1)], 'IsDeferredLoad', [0, false], 'SubDomains', [SubDomainsCollection.$, null], 'TilePath', [2, null]]);
    return BingMapsMapImagery;
}(GeographicMapImagery));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * UI element class used to display BingMapsMap imagery in the IgxGeographicMap.Component
*/
var IgrBingMapsMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrBingMapsMapImagery, _super);
    function IgrBingMapsMapImagery() {
        var _this = _super.call(this) || this;
        _this._subDomains = null;
        _this._actualSubDomains = null;
        return _this;
    }
    IgrBingMapsMapImagery.prototype.createImplementation = function () {
        return new BingMapsMapImagery();
    };
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "isInitialized", {
        /**
         * Gets a status whether the Bing Maps service is initialized.
        */
        get: function () {
            return this.i.isInitialized;
        },
        set: function (v) {
            this.i.isInitialized = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "isDeferredLoad", {
        /**
         * Gets or sets whether the Bing Maps service should be auto-initialized upon valid property values.
        */
        get: function () {
            return this.i.isDeferredLoad;
        },
        set: function (v) {
            this.i.isDeferredLoad = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "tilePath", {
        /**
         * Gets or sets the map tile image uri.
        */
        get: function () {
            return this.i.tilePath;
        },
        set: function (v) {
            this.i.tilePath = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "actualTilePath", {
        /**
         * Gets or sets the actual map tile image uri.
        */
        get: function () {
            return this.i.actualTilePath;
        },
        set: function (v) {
            this.i.actualTilePath = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "subDomains", {
        /**
         * Gets or sets the collection of image uri subdomains.
        */
        get: function () {
            if (this._subDomains === null) {
                var coll = new IgrSubDomainsCollection();
                var innerColl = this.i.subDomains;
                if (!innerColl) {
                    innerColl = new SubDomainsCollection(0);
                }
                this._subDomains = coll._fromInner(innerColl);
                this.i.subDomains = innerColl;
            }
            return this._subDomains;
        },
        set: function (v) {
            if (this._subDomains !== null) {
                this._subDomains._setSyncTarget(null);
                this._subDomains = null;
            }
            var coll = new IgrSubDomainsCollection();
            this._subDomains = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(String_$type);
            var innerColl = this.i.subDomains;
            if (!innerColl) {
                innerColl = new SubDomainsCollection(0);
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._subDomains._setSyncTarget(syncColl);
            this.i.subDomains = innerColl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "actualSubDomains", {
        /**
         * Gets or sets the actual collection of image uri subdomains.
        */
        get: function () {
            if (this._actualSubDomains === null) {
                var coll = new IgrSubDomainsCollection();
                var innerColl = this.i.actualSubDomains;
                if (!innerColl) {
                    innerColl = new SubDomainsCollection(0);
                }
                this._actualSubDomains = coll._fromInner(innerColl);
                this.i.actualSubDomains = innerColl;
            }
            return this._actualSubDomains;
        },
        set: function (v) {
            if (this._actualSubDomains !== null) {
                this._actualSubDomains._setSyncTarget(null);
                this._actualSubDomains = null;
            }
            var coll = new IgrSubDomainsCollection();
            this._actualSubDomains = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(String_$type);
            var innerColl = this.i.actualSubDomains;
            if (!innerColl) {
                innerColl = new SubDomainsCollection(0);
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._actualSubDomains._setSyncTarget(syncColl);
            this.i.actualSubDomains = innerColl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "bingImageryRestUri", {
        /**
         * Gets or sets the Bing Imagery Rest Uri.
        */
        get: function () {
            return this.i.bingImageryRestUri;
        },
        set: function (v) {
            this.i.bingImageryRestUri = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "actualBingImageryRestUri", {
        /**
         * Gets or sets the Actual Bing Imagery Rest Uri.
        */
        get: function () {
            return this.i.actualBingImageryRestUri;
        },
        set: function (v) {
            this.i.actualBingImageryRestUri = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "cultureName", {
        /**
         * Gets or sets the culture name for this tile source.
        */
        get: function () {
            return this.i.cultureName;
        },
        set: function (v) {
            this.i.cultureName = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "apiKey", {
        /**
         * Gets or sets an API key required by the Bing Maps imagery service.
         * This key must be obtained from the http://www.bingmapsportal.com website.
        */
        get: function () {
            return this.i.apiKey;
        },
        set: function (v) {
            this.i.apiKey = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrBingMapsMapImagery.prototype, "imageryStyle", {
        /**
         * Gets or sets a map style of the Bing Maps imagery tiles.  For example: Aerial, AerialWithLabels, or Road map style.
        */
        get: function () {
            return this.i.imageryStyle;
        },
        set: function (v) {
            this.i.imageryStyle = ensureEnum(BingMapsImageryStyle_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Will Connect to the Bing Rest API and retrieve the required TilePath and Subdomains from the service.  This requires a valid API key to already be set.
    
    */
    IgrBingMapsMapImagery.prototype.requestMapSettings = function () {
        this.i.requestMapSettings();
    };
    return IgrBingMapsMapImagery;
}(IgrGeographicMapImagery));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrBingMapsMapImageryModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrBingMapsMapImageryModule() {
    }
    IgrBingMapsMapImageryModule.register = function () {
        TypeRegistrar.registerCons("IgrBingMapsMapImagery", IgrBingMapsMapImagery);
        TypeRegistrar.register("BingMapsMapImagery", BingMapsMapImagery.$type);
    };
    return IgrBingMapsMapImageryModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * UI element class used to display OpenStreetMap imagery in the IgxGeographicMap.Component
*/
var IgrOpenStreetMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrOpenStreetMapImagery, _super);
    function IgrOpenStreetMapImagery() {
        return _super.call(this) || this;
    }
    IgrOpenStreetMapImagery.prototype.createImplementation = function () {
        return new OpenStreetMapImagery();
    };
    Object.defineProperty(IgrOpenStreetMapImagery.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrOpenStreetMapImagery.prototype, "tilePath", {
        /**
         * Gets or sets the tile path URL.
        */
        get: function () {
            return this.i.tilePath;
        },
        set: function (v) {
            this.i.tilePath = v;
        },
        enumerable: true,
        configurable: true
    });
    return IgrOpenStreetMapImagery;
}(IgrGeographicMapImagery));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrOpenStreetMapImageryModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrOpenStreetMapImageryModule() {
    }
    IgrOpenStreetMapImageryModule.register = function () {
        TypeRegistrar.registerCons("IgrOpenStreetMapImagery", IgrOpenStreetMapImagery);
        TypeRegistrar.register("OpenStreetMapImagery", OpenStreetMapImagery.$type);
    };
    return IgrOpenStreetMapImageryModule;
}());

/**
 * Represents a CustomMapImagery MapImagery
*/
var IgrCustomMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrCustomMapImagery, _super);
    function IgrCustomMapImagery() {
        var _this = _super.call(this) || this;
        _this._getTileImageUri = null;
        _this._getTileImageUri_wrapped = null;
        return _this;
    }
    Object.defineProperty(IgrCustomMapImagery.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCustomMapImagery.prototype, "getTileImageUri", {
        /**
         * Raised when URI for tiles should be provided
        */
        get: function () {
            return this._getTileImageUri;
        },
        set: function (ev) {
            var _this = this;
            if (this._getTileImageUri_wrapped !== null) {
                this.i.getTileImageUri = delegateRemove(this.i.getTileImageUri, this._getTileImageUri_wrapped);
                this._getTileImageUri_wrapped = null;
                this._getTileImageUri = null;
            }
            this._getTileImageUri = ev;
            this._getTileImageUri_wrapped = function (o, e) {
                var outerArgs = new IgrGetTileImageUriArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeGetTileImageUri) {
                    _this.beforeGetTileImageUri(_this, outerArgs);
                }
                if (_this._getTileImageUri) {
                    _this._getTileImageUri(_this, outerArgs);
                }
            };
            this.i.getTileImageUri = delegateCombine(this.i.getTileImageUri, this._getTileImageUri_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrCustomMapImagery;
}(IgrGeographicMapImagery));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var CustomMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CustomMapImagery, _super);
    function CustomMapImagery(a) {
        var _this = _super.call(this, a) || this;
        _this.getTileImageUri = null;
        a.getTileImageUri = delegateCombine(a.getTileImageUri, runOn(_this, _this.bn));
        return _this;
    }
    CustomMapImagery.prototype.bn = function (a, b) {
        this.bm(b);
    };
    CustomMapImagery.prototype.bm = function (a) {
        if (this.getTileImageUri != null) {
            this.getTileImageUri(this, a);
        }
    };
    CustomMapImagery.$t = markType(CustomMapImagery, 'CustomMapImagery', GeographicMapImagery.$);
    return CustomMapImagery;
}(GeographicMapImagery));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrCustomMapImageryModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrCustomMapImageryModule() {
    }
    IgrCustomMapImageryModule.register = function () {
        TypeRegistrar.registerCons("IgrCustomMapImagery", IgrCustomMapImagery);
        TypeRegistrar.register("CustomMapImagery", CustomMapImagery.$type);
    };
    return IgrCustomMapImageryModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var ArcGISOnlineMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ArcGISOnlineMapImagery, _super);
    function ArcGISOnlineMapImagery() {
        var _this = _super.call(this, new ArcGISOnlineTileSource()) || this;
        _this.bm = 0;
        _this.br = null;
        _this.bq = null;
        _this._pendingTokenRequest_ = null;
        _this._pendingMapServerRequest_ = null;
        _this.bq = "localhost";
        _this.br = "https://www.arcgis.com/sharing/";
        _this.bm = 60;
        _this.userToken = null;
        _this.getResponseCompleted_MapServerResponse = _this.getResponseCompleted_MapServerResponse.bind(_this);
        _this.getResponseCompleted_TokenResponse = _this.getResponseCompleted_TokenResponse.bind(_this);
        return _this;
    }
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "mapServerUri", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.mapServerUriProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.mapServerUriProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.ca = function (a, b) {
        a.cc("MapServerUri", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "userName", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.userNameProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.userNameProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.cd = function (a, b) {
        a.cc("UserName", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "password", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.passwordProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.passwordProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.cb = function (a, b) {
        a.cc("Password", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "userToken", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.userTokenProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.userTokenProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.ce = function (a, b) {
        a.cc("UserToken", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "isMapPublic", {
        get: function () {
            return this.c(ArcGISOnlineMapImagery.isMapPublicProperty);
        },
        set: function (a) {
            this.h(ArcGISOnlineMapImagery.isMapPublicProperty, a);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.b9 = function (a, b) {
        a.cc("IsMapPublic", b.oldValue, b.newValue);
    };
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "defaultTokenTimeout", {
        get: function () {
            return this.bm;
        },
        set: function (a) {
            this.bm = a;
            this.b5(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "tokenGenerationEndPoint", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            this.br = a;
            this.b5(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArcGISOnlineMapImagery.prototype, "refererUri", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            this.bq = a;
            this.b5(true);
        },
        enumerable: true,
        configurable: true
    });
    ArcGISOnlineMapImagery.prototype.acquireNewToken = function () {
        this.b5(true);
    };
    ArcGISOnlineMapImagery.prototype.b6 = function (a) {
        a();
    };
    ArcGISOnlineMapImagery.prototype.b5 = function (a) {
        if (stringIsNullOrEmpty(this.userToken) && a == false) {
            this.cf();
            return;
        }
        var b = this.tokenGenerationEndPoint;
        if (stringIsNullOrEmpty(b)) {
            this.userToken = "";
            return;
        }
        if (b.substr(b.length - 1, 1) != "/") {
            b += "/";
        }
        if (stringIsNullOrEmpty(this.refererUri)) {
            this.userToken = "";
            return;
        }
        var c = this.defaultTokenTimeout;
        if (c < 1) {
            c = 1;
        }
        b += stringFormat1(ArcGISOnlineMapImagery.bs, this.userName, this.password, this.refererUri, c);
        if (!Uri.isWellFormedUriString(b, 1)) {
            this.userToken = "";
            return;
        }
        var url_ = b;
        this._pendingTokenRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted_TokenResponse, null);
    };
    ArcGISOnlineMapImagery.prototype.cf = function () {
        if (stringIsNullOrEmpty(this.mapServerUri)) {
            return;
        }
        var a = this.mapServerUri;
        if (a.substr(a.length - 1, 1) == "/") {
            stringRemove(a, a.length - 1, 1);
        }
        if (!this.isMapPublic) {
            if (stringIsNullOrEmpty(this.userToken)) {
                return;
            }
            a = stringFormat("{0}?f=json&token={1}", a, this.userToken);
        }
        else {
            a = stringFormat("{0}?f=json", a);
        }
        if (!Uri.isWellFormedUriString(a, 1)) {
            return;
        }
        var url_ = a;
        this._pendingMapServerRequest_ = HttpRequestUtil.submit(url_, this.getResponseCompleted_MapServerResponse, null);
    };
    ArcGISOnlineMapImagery.prototype.getResponseCompleted_TokenResponse = function (a, b) {
        if (b != this._pendingTokenRequest_) {
            return;
        }
        this._pendingTokenRequest_ = null;
        var data_ = a;
        var c = (JSON.parse(data_));
        if (c != null) {
            var d = "";
            if (c.token != null) {
                d = c.token;
            }
            this.userToken = d;
        }
    };
    ArcGISOnlineMapImagery.prototype.getResponseCompleted_MapServerResponse = function (a, b) {
        if (b != this._pendingMapServerRequest_) {
            return;
        }
        this._pendingMapServerRequest_ = null;
        var data_ = a;
        var c = (JSON.parse(data_));
        if ((c != null) && (c.tileInfo != null)) {
            this.ap.levelOfDetail = c.tileInfo.lods.length;
        }
    };
    ArcGISOnlineMapImagery.prototype.cc = function (a, b, c) {
        var _this = this;
        var d = typeCast(ArcGISOnlineTileSource.$, this.ap);
        switch (a) {
            case "MapServerUri":
                if (d != null) {
                    d.mapServerUri = typeCast(String_$type, c);
                }
                this.cf();
                break;
            case "UserName":
            case "Password":
                if (stringIsNullOrEmpty(this.userName) || stringIsNullOrEmpty(this.password)) {
                    return;
                }
                this.b5(true);
                break;
            case "UserToken":
                this.b6(function () { return d.userToken = _this.userToken; });
                this.cf();
                break;
            case "IsMapPublic":
                d.isMapPublic = this.isMapPublic;
                break;
        }
        _super.prototype.a8.call(this, a, b, c);
    };
    ArcGISOnlineMapImagery.$t = markType(ArcGISOnlineMapImagery, 'ArcGISOnlineMapImagery', GeographicMapImagery.$);
    ArcGISOnlineMapImagery.bs = "generateToken?username={0}&password={1}&client=referer&referer={2}&expiration={3}&f=pjson";
    ArcGISOnlineMapImagery.mapServerUriProperty = DependencyProperty.i("MapServerUri", String_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, null, ArcGISOnlineMapImagery.ca));
    ArcGISOnlineMapImagery.userNameProperty = DependencyProperty.i("UserName", String_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, null, ArcGISOnlineMapImagery.cd));
    ArcGISOnlineMapImagery.passwordProperty = DependencyProperty.i("Password", String_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, null, ArcGISOnlineMapImagery.cb));
    ArcGISOnlineMapImagery.userTokenProperty = DependencyProperty.i("UserToken", String_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, null, ArcGISOnlineMapImagery.ce));
    ArcGISOnlineMapImagery.isMapPublicProperty = DependencyProperty.i("IsMapPublic", Boolean_$type, ArcGISOnlineMapImagery.$, new PropertyMetadata(2, true, ArcGISOnlineMapImagery.b9));
    return ArcGISOnlineMapImagery;
}(GeographicMapImagery));

/**
 * UI element class used to display ArcGIS Online Map imagery in the IgxGeographicMap.Component
*/
var IgrArcGISOnlineMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrArcGISOnlineMapImagery, _super);
    function IgrArcGISOnlineMapImagery() {
        return _super.call(this) || this;
    }
    IgrArcGISOnlineMapImagery.prototype.createImplementation = function () {
        return new ArcGISOnlineMapImagery();
    };
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "mapServerUri", {
        /**
         * Gets or sets the map tile server uri.
        */
        get: function () {
            return this.i.mapServerUri;
        },
        set: function (v) {
            this.i.mapServerUri = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "userName", {
        /**
         * Gets or sets the UserName.
        */
        get: function () {
            return this.i.userName;
        },
        set: function (v) {
            this.i.userName = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "password", {
        /**
         * Gets or sets the Password.
        */
        get: function () {
            return this.i.password;
        },
        set: function (v) {
            this.i.password = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "userToken", {
        /**
         * Gets or sets the UserToken.
        */
        get: function () {
            return this.i.userToken;
        },
        set: function (v) {
            this.i.userToken = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "isMapPublic", {
        /**
         * Gets or sets the IsMapPublic variable.  A value of false requires authentication parameters.
        */
        get: function () {
            return this.i.isMapPublic;
        },
        set: function (v) {
            this.i.isMapPublic = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "defaultTokenTimeout", {
        /**
         * Gets or Sets the Default Token Timeout before the Token Expires, this value is in Minutes
        */
        get: function () {
            return this.i.defaultTokenTimeout;
        },
        set: function (v) {
            this.i.defaultTokenTimeout = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "tokenGenerationEndPoint", {
        /**
         * Gets or Sets the current endpoint to retrieve the token.
        */
        get: function () {
            return this.i.tokenGenerationEndPoint;
        },
        set: function (v) {
            this.i.tokenGenerationEndPoint = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrArcGISOnlineMapImagery.prototype, "refererUri", {
        /**
         * Contains the User Supplied Referer Uri to be used in Token Generation.
        */
        get: function () {
            return this.i.refererUri;
        },
        set: function (v) {
            this.i.refererUri = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Retreives a new token based on the preconfigured parameters and updates the UserToken field, Normal this is called automatically.
     * The is provided to the end-user to allow them to reteive tokens on their onw.
    
    */
    IgrArcGISOnlineMapImagery.prototype.acquireNewToken = function () {
        this.i.acquireNewToken();
    };
    return IgrArcGISOnlineMapImagery;
}(IgrGeographicMapImagery));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrArcGISOnlineMapImageryModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrArcGISOnlineMapImageryModule() {
    }
    IgrArcGISOnlineMapImageryModule.register = function () {
        TypeRegistrar.registerCons("IgrArcGISOnlineMapImagery", IgrArcGISOnlineMapImagery);
        TypeRegistrar.register("ArcGISOnlineMapImagery", ArcGISOnlineMapImagery.$type);
    };
    return IgrArcGISOnlineMapImageryModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicMapCoreModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicMapCoreModule() {
    }
    IgrGeographicMapCoreModule.register = function () {
        IgrBingMapsMapImageryModule.register();
        IgrOpenStreetMapImageryModule.register();
        IgrCustomMapImageryModule.register();
        IgrArcGISOnlineMapImageryModule.register();
        TypeRegistrar.registerCons('IgrGeographicMap', IgrGeographicMap);
    };
    return IgrGeographicMapCoreModule;
}());

/**
 * Base class for hosting chart series in a IgxGeographicMap.Component
*/
var IgrGeographicMapSeriesHost = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicMapSeriesHost, _super);
    function IgrGeographicMapSeriesHost(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrGeographicMapSeriesHost.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapSeriesHost.prototype, "isGeographic", {
        /**
         * Checks if this control is geographic coordinate system
        */
        get: function () {
            return this.i.ct;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapSeriesHost.prototype, "visibleFromScale", {
        /**
         * The minimum scale at which this series becomes visible.
         * The default value for this property is 1.0, which means the series will always be visible.  At a VisibleFromScale setting of 0.0, the series will never be visible.  At a VisibleFromScale setting of 0.5, the series will be visible as long as the map is zoomed in to at least 200%.
        */
        get: function () {
            return this.i.l5;
        },
        set: function (v) {
            this.i.l5 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicMapSeriesHost.prototype, "coercionMethods", {
        /**
         * Gets or sets the coercion methods to use when loading data from data sources.
         * Should be specified before setting any member paths, if being used. Setting it later
         * will not cause data to be reimported into the chart.
        */
        get: function () {
            return this.i.coercionMethods;
        },
        set: function (v) {
            this.i.coercionMethods = v;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicMapSeriesHost.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.fs(item, memberPathName);
        return (iv);
    };
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    IgrGeographicMapSeriesHost.prototype.getItem = function (world) {
        var iv = this.i.fp(toPoint(world));
        return (iv);
    };
    /**
     * Renders the series.
    
    * @param animate  * True if the change should be animated.
    */
    IgrGeographicMapSeriesHost.prototype.renderSeries = function (animate) {
        this.i.je(animate);
    };
    /**
     * Called when this series' Style is updated.
    
    */
    IgrGeographicMapSeriesHost.prototype.styleUpdated = function () {
        this.i.jn();
    };
    return IgrGeographicMapSeriesHost;
}(IgrSeries));

/**
 * Base class for series which render polygons on a map.
*/
var IgrGeographicShapeSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicShapeSeriesBase, _super);
    function IgrGeographicShapeSeriesBase(props) {
        var _this = _super.call(this, props) || this;
        _this._currData = null;
        _this._onImportCompleted = null;
        return _this;
    }
    Object.defineProperty(IgrGeographicShapeSeriesBase.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeriesBase.prototype, "shapeDataSource", {
        get: function () {
            return this._shapeDataSource;
        },
        /**
         * Gets or sets the string path of the .shp portion of the Shapefile.
        */
        set: function (value) {
            this._shapeDataSource = value;
            this.updateShapeDataSource();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeriesBase.prototype, "databaseSource", {
        get: function () {
            return this._databaseSource;
        },
        /**
         * Gets or sets the string path of the .dbf portion of the Shapefile.
        */
        set: function (value) {
            this._databaseSource = value;
            this.updateShapeDataSource();
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicShapeSeriesBase.prototype.onUpdateDataSource = function (dataSource) {
        var _this = this;
        if (this._onImportCompleted == null) {
            this._onImportCompleted = function (s, e) {
                if (_this._currData) {
                    _this._currData.i.importCompleted = delegateRemove(_this._currData.i.importCompleted, _this._onImportCompleted);
                    var data = _this._currData;
                    _this._currData = null;
                    _this.i.itemsSource = data.getPointData();
                }
            };
        }
        if (dataSource && dataSource.getPointData) {
            if (dataSource.count > 0) {
                return dataSource.getPointData();
            }
            this._currData = dataSource;
            this._currData.i.importCompleted = delegateCombine(this._currData.i.importCompleted, this._onImportCompleted);
            return null;
        }
        return dataSource;
    };
    IgrGeographicShapeSeriesBase.prototype.updateShapeDataSource = function () {
        if (this._cachedShapeDataSource == null) {
            this._cachedShapeDataSource = new IgrShapeDataSource();
            this.onShapeDataSourceImportCompleted = this.onShapeDataSourceImportCompleted.bind(this);
            this._cachedShapeDataSource.importCompleted = this.onShapeDataSourceImportCompleted;
        }
        this._cachedShapeDataSource.shapefileSource = this._shapeDataSource;
        this._cachedShapeDataSource.databaseSource = this._databaseSource;
        if (this._shapeDataSource && this._databaseSource) {
            this._cachedShapeDataSource.dataBind();
        }
    };
    IgrGeographicShapeSeriesBase.prototype.onShapeDataSourceImportCompleted = function (s, e) {
        this.dataSource = this._cachedShapeDataSource.getPointData();
    };
    Object.defineProperty(IgrGeographicShapeSeriesBase.prototype, "shapeMemberPath", {
        /**
     * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.
     * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.
    */
        get: function () {
            return this.i.mi;
        },
        set: function (v) {
            this.i.mi = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeriesBase.prototype, "shapefileDataSource", {
        /**
         * Set a shapefile datasource to use with the series.
        */
        get: function () {
            if (this.i.md == null) {
                return null;
            }
            if (!this.i.md.externalObject) {
                var e = new IgrShapeDataSource();
                e._implementation = this.i.md;
                this.i.md.externalObject = e;
            }
            return this.i.md.externalObject;
        },
        set: function (v) {
            v == null ? this.i.md = null : this.i.md = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeriesBase.prototype, "shapeFilterResolution", {
        /**
         * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.
         * In the case of GeographicPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.
        */
        get: function () {
            return this.i.mf;
        },
        set: function (v) {
            this.i.mf = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicShapeSeriesBase.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapefileDataSource && this.shapefileDataSource.name && this.shapefileDataSource.name == name) {
            return this.shapefileDataSource;
        }
        return null;
    };
    return IgrGeographicShapeSeriesBase;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicShapeSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicShapeSeriesBase, _super);
    function GeographicShapeSeriesBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mc = null;
        _this.me = false;
        return _this;
    }
    GeographicShapeSeriesBase.prototype.bf = function () {
        return new GeographicShapeSeriesBaseView(this);
    };
    GeographicShapeSeriesBase.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.mb = a;
    };
    GeographicShapeSeriesBase.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.mb.b3();
                break;
            case "ActualBrush":
                this.mb.b1();
                break;
            case "ActualOutline":
                this.mb.b2();
                break;
            case "ShapeMemberPath":
                this.mb.b5();
                break;
            case "Thickness":
                this.mb.b6();
                break;
            case GeographicShapeSeriesBase.$$p[0]:
                this.mb.b4();
                break;
            case "ShapefileDataSource":
                if (c != null) {
                    var e = c;
                    if (this.me) {
                        e.importCompleted = delegateRemove(e.importCompleted, runOn(this, this.mk));
                    }
                }
                if (d != null) {
                    var f = d;
                    if (f.count > 0) {
                        this.ml();
                        break;
                    }
                    this.me = true;
                    f.importCompleted = delegateCombine(f.importCompleted, runOn(this, this.mk));
                }
                break;
        }
    };
    GeographicShapeSeriesBase.prototype.mk = function (a, b) {
        this.ml();
    };
    GeographicShapeSeriesBase.prototype.ml = function () {
        var sds_ = this.md;
        var ext_ = sds_.externalObject;
        this.itemsSource = (ext_.getPointData());
    };
    Object.defineProperty(GeographicShapeSeriesBase.prototype, "md", {
        get: function () {
            return this.mc;
        },
        set: function (a) {
            var b = this.mc;
            this.mc = a;
            if (b != this.mc) {
                this.raisePropertyChanged("ShapefileDataSource", b, this.mc);
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicShapeSeriesBase.prototype.get_dq = function () {
        return true;
    };
    GeographicShapeSeriesBase.prototype.set_dq = function (a) {
        _super.prototype.set_dq.call(this, a);
    };
    GeographicShapeSeriesBase.$t = markType(GeographicShapeSeriesBase, 'GeographicShapeSeriesBase', GeographicMapSeriesHost.$);
    GeographicShapeSeriesBase.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicShapeSeriesBase, 'raisePropertyChanged', ['ShapeFilterResolution:mf:mm', [1, 2], 'ShapeMemberPath:mi:mn', [2, "points"]]);
    return GeographicShapeSeriesBase;
}(GeographicMapSeriesHost));
/**
 * @hidden
 */
var GeographicShapeSeriesBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicShapeSeriesBaseView, _super);
    function GeographicShapeSeriesBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicShapeSeriesBaseView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        this.b0.l3.mv = this.b0.mi;
        this.b0.l3.k6 = this.b0.k4;
        this.b0.l3.k9 = this.b0.k5;
    };
    GeographicShapeSeriesBaseView.prototype.b3 = function () {
        var a = this.b0.l3;
        if (this.b0.bs == null) {
            a.l7 = null;
            a.l9 = null;
            return;
        }
        a.l7 = this.b0.bs.nc;
        a.l9 = this.b0.bs.ne;
    };
    GeographicShapeSeriesBaseView.prototype.b1 = function () {
        this.b0.l3.k6 = this.b0.k4;
    };
    GeographicShapeSeriesBaseView.prototype.b2 = function () {
        this.b0.l3.k9 = this.b0.k5;
    };
    GeographicShapeSeriesBaseView.prototype.b5 = function () {
        this.b0.l3.mv = this.b0.mi;
    };
    GeographicShapeSeriesBaseView.prototype.b6 = function () {
        this.b0.l3.ey = this.b0.ey;
    };
    GeographicShapeSeriesBaseView.prototype.b4 = function () {
        this.b0.l3.mp = this.b0.mf;
    };
    GeographicShapeSeriesBaseView.$t = markType(GeographicShapeSeriesBaseView, 'GeographicShapeSeriesBaseView', HostSeriesView.$);
    return GeographicShapeSeriesBaseView;
}(HostSeriesView));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicShapeSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicShapeSeriesView, _super);
    function GeographicShapeSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b7 = null;
        _this.b7 = a;
        if (!_this.n) {
            _this.b7.mi = "points";
        }
        return _this;
    }
    GeographicShapeSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        this.b7.l3.ok = this.b7.nh;
        this.b7.l3.nk = this.b7.mq;
        this.b7.l3.n1 = this.b7.m4;
        this.b7.l3.nm = this.b7.ms;
        this.b7.l3.ne = this.b7.mo;
    };
    GeographicShapeSeriesView.prototype.cc = function () {
        this.b7.l3.n1 = this.b7.m4;
    };
    GeographicShapeSeriesView.prototype.ce = function () {
        this.b7.l3.nm = this.b7.ms;
    };
    GeographicShapeSeriesView.prototype.b9 = function () {
        this.b7.l3.ne = this.b7.mo;
    };
    GeographicShapeSeriesView.prototype.cd = function () {
        this.b7.l3.nf = this.b7.mp;
    };
    GeographicShapeSeriesView.prototype.b8 = function () {
        this.b7.l3.og = this.b7.ne;
    };
    GeographicShapeSeriesView.prototype.ca = function () {
        this.b7.l3.oh = this.b7.nf;
    };
    GeographicShapeSeriesView.prototype.cb = function () {
        this.b7.l3.oj = this.b7.ng;
    };
    GeographicShapeSeriesView.prototype.cf = function () {
        this.b7.l3.nk = this.b7.mq;
    };
    GeographicShapeSeriesView.prototype.cg = function () {
        this.b7.l3.ok = this.b7.nh;
    };
    GeographicShapeSeriesView.$t = markType(GeographicShapeSeriesView, 'GeographicShapeSeriesView', GeographicShapeSeriesBaseView.$);
    return GeographicShapeSeriesView;
}(GeographicShapeSeriesBaseView));
/**
 * @hidden
 */
var GeographicShapeSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicShapeSeries, _super);
    function GeographicShapeSeries() {
        var _this = _super.call(this) || this;
        _this.styleShape = null;
        _this.ab = GeographicShapeSeries.$;
        return _this;
    }
    GeographicShapeSeries.prototype.bf = function () {
        return new GeographicShapeSeriesView(this);
    };
    GeographicShapeSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.mr = a;
    };
    GeographicShapeSeries.prototype.l2 = function () {
        var a = new ScatterPolygonSeries();
        a.styleShape = delegateCombine(a.styleShape, runOn(this, this.m3));
        return a;
    };
    GeographicShapeSeries.prototype.m3 = function (a, b) {
        if (this.styleShape != null) {
            this.styleShape(this, b);
        }
    };
    GeographicShapeSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case GeographicShapeSeries.$$p[4]:
                this.mr.cc();
                break;
            case GeographicShapeSeries.$$p[5]:
                this.mr.ce();
                break;
            case GeographicShapeSeries.$$p[1]:
                this.mr.b9();
                break;
            case GeographicShapeSeries.$$p[6]:
                this.mr.cd();
                break;
            case GeographicShapeSeries.$$p[0]:
                this.mr.b8();
                break;
            case GeographicShapeSeries.$$p[2]:
                this.mr.ca();
                break;
            case GeographicShapeSeries.$$p[3]:
                this.mr.cb();
                break;
            case GeographicShapeSeries.$$p[8]:
                this.mr.cf();
                break;
            case GeographicShapeSeries.$$p[7]:
                this.mr.cg();
                break;
        }
    };
    GeographicShapeSeries.$t = markType(GeographicShapeSeries, 'GeographicShapeSeries', GeographicShapeSeriesBase.$);
    GeographicShapeSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicShapeSeries, 'raisePropertyChanged', ['MarkerBrush:ne:m5', [Brush.$], 'MarkerCollisionAvoidance:mo:m6', [CollisionAvoidanceType_$type, enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerOutline:nf:m7', [Brush.$], 'MarkerStyle:ng:m8', [Style.$], 'MarkerTemplate:m4:m9', [DataTemplate.$, null], 'MarkerThickness:ms:na', [1, DeviceUtils.g(2)], 'MarkerType:mp:nb', [MarkerType_$type, enumGetBox(MarkerType_$type, 1)], 'ShapeStyle:nh:nc', [Style.$, null], 'ShapeStyleSelector:mq:nd', [StyleSelector.$, null]]);
    return GeographicShapeSeries;
}(GeographicShapeSeriesBase));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Series class which renders polygons as Paths, in a geographic context, based on lists of points in the ItemsSource.
*/
var IgrGeographicShapeSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicShapeSeries, _super);
    function IgrGeographicShapeSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._styleShape = null;
        _this._styleShape_wrapped = null;
        return _this;
    }
    IgrGeographicShapeSeries.prototype.createImplementation = function () {
        return new GeographicShapeSeries();
    };
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "shapeFill", {
        /**
         * Gets or sets the fill brush.
        */
        get: function () {
            return this.i.nh ? this.i.nh.fill : null;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.nh.fill = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "shapeStroke", {
        /**
         * Gets or sets the stroke brush.
        */
        get: function () {
            return this.i.nh ? this.i.nh.stroke : null;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.nh.stroke = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "shapeStrokeThickness", {
        /**
         * Gets or sets the stroke thickness.
        */
        get: function () {
            return this.i.nh ? this.i.nh.strokeThickness : NaN;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.nh.strokeThickness = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "shapeOpacity", {
        /**
         * Gets or sets the opacity.
        */
        get: function () {
            return this.i.nh ? this.i.nh.opacity : NaN;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.nh.opacity = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicShapeSeries.prototype.ensureShapeStyle = function () {
        if (this.i.nh) {
            return;
        }
        this.i.nh = new Style();
    };
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.mp;
        },
        set: function (v) {
            this.i.mp = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.m4;
        },
        set: function (v) {
            this.i.m4 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.ne);
        },
        set: function (v) {
            this.i.ne = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.nf);
        },
        set: function (v) {
            this.i.nf = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.ms;
        },
        set: function (v) {
            this.i.ms = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get: function () {
            return this.i.mo;
        },
        set: function (v) {
            this.i.mo = ensureEnum(CollisionAvoidanceType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicShapeSeries.prototype, "styleShape", {
        get: function () {
            return this._styleShape;
        },
        set: function (ev) {
            var _this = this;
            if (this._styleShape_wrapped !== null) {
                this.i.styleShape = delegateRemove(this.i.styleShape, this._styleShape_wrapped);
                this._styleShape_wrapped = null;
                this._styleShape = null;
            }
            this._styleShape = ev;
            this._styleShape_wrapped = function (o, e) {
                var outerArgs = new IgrStyleShapeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeStyleShape) {
                    _this.beforeStyleShape(_this, outerArgs);
                }
                if (_this._styleShape) {
                    _this._styleShape(_this, outerArgs);
                }
            };
            this.i.styleShape = delegateCombine(this.i.styleShape, this._styleShape_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicShapeSeries;
}(IgrGeographicShapeSeriesBase));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicShapeSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicShapeSeriesModule() {
    }
    IgrGeographicShapeSeriesModule.register = function () {
        IgrScatterPolygonSeriesModule.register();
        TypeRegistrar.registerCons("IgrGeographicShapeSeries", IgrGeographicShapeSeries);
        TypeRegistrar.register("GeographicShapeSeries", GeographicShapeSeries.$type);
    };
    return IgrGeographicShapeSeriesModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicPolylineSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicPolylineSeriesView, _super);
    function GeographicPolylineSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b7 = null;
        _this.b7 = a;
        return _this;
    }
    GeographicPolylineSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        this.b7.l3.nd = this.b7.mo;
        this.b7.l3.ni = this.b7.mw;
    };
    GeographicPolylineSeriesView.prototype.b8 = function () {
        this.b7.l3.nd = this.b7.mo;
    };
    GeographicPolylineSeriesView.prototype.b9 = function () {
        this.b7.l3.ni = this.b7.mw;
    };
    GeographicPolylineSeriesView.$t = markType(GeographicPolylineSeriesView, 'GeographicPolylineSeriesView', GeographicShapeSeriesBaseView.$);
    return GeographicPolylineSeriesView;
}(GeographicShapeSeriesBaseView));
/**
 * @hidden
 */
var GeographicPolylineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicPolylineSeries, _super);
    function GeographicPolylineSeries() {
        var _this = _super.call(this) || this;
        _this.styleShape = null;
        _this.ab = GeographicPolylineSeries.$;
        return _this;
    }
    GeographicPolylineSeries.prototype.bf = function () {
        return new GeographicPolylineSeriesView(this);
    };
    GeographicPolylineSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.mp = a;
    };
    GeographicPolylineSeries.prototype.l2 = function () {
        var a = new ScatterPolylineSeries();
        a.styleShape = delegateCombine(a.styleShape, runOn(this, this.mt));
        return a;
    };
    GeographicPolylineSeries.prototype.mt = function (a, b) {
        if (this.styleShape != null) {
            this.styleShape(this, b);
        }
    };
    GeographicPolylineSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case GeographicPolylineSeries.$$p[1]:
                this.mp.b8();
                break;
            case GeographicPolylineSeries.$$p[0]:
                this.mp.b9();
                break;
        }
    };
    GeographicPolylineSeries.$t = markType(GeographicPolylineSeries, 'GeographicPolylineSeries', GeographicShapeSeriesBase.$);
    GeographicPolylineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicPolylineSeries, 'raisePropertyChanged', ['ShapeStyle:mw:mu', [Style.$, null], 'ShapeStyleSelector:mo:mv', [StyleSelector.$, null]]);
    return GeographicPolylineSeries;
}(GeographicShapeSeriesBase));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Series class used for displaying multiple polylines, in a geographic context, for datasources which contain multiple lists of points.
*/
var IgrGeographicPolylineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicPolylineSeries, _super);
    function IgrGeographicPolylineSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._styleShape = null;
        _this._styleShape_wrapped = null;
        return _this;
    }
    IgrGeographicPolylineSeries.prototype.createImplementation = function () {
        return new GeographicPolylineSeries();
    };
    Object.defineProperty(IgrGeographicPolylineSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicPolylineSeries.prototype, "shapeFill", {
        /**
         * Gets or sets the fill brush.
        */
        get: function () {
            return this.i.mw ? this.i.mw.fill : null;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.mw.fill = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicPolylineSeries.prototype, "shapeStroke", {
        /**
         * Gets or sets the stroke brush.
        */
        get: function () {
            return this.i.mw ? this.i.mw.stroke : null;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.mw.stroke = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicPolylineSeries.prototype, "shapeStrokeThickness", {
        /**
         * Gets or sets the stroke thickness.
        */
        get: function () {
            return this.i.mw ? this.i.mw.strokeThickness : NaN;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.mw.strokeThickness = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicPolylineSeries.prototype, "shapeOpacity", {
        /**
         * Gets or sets the opacity.
        */
        get: function () {
            return this.i.mw ? this.i.mw.opacity : NaN;
        },
        set: function (v) {
            this.ensureShapeStyle();
            this.i.mw.opacity = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicPolylineSeries.prototype.ensureShapeStyle = function () {
        if (this.i.mw) {
            return;
        }
        this.i.mw = new Style();
    };
    Object.defineProperty(IgrGeographicPolylineSeries.prototype, "styleShape", {
        get: function () {
            return this._styleShape;
        },
        set: function (ev) {
            var _this = this;
            if (this._styleShape_wrapped !== null) {
                this.i.styleShape = delegateRemove(this.i.styleShape, this._styleShape_wrapped);
                this._styleShape_wrapped = null;
                this._styleShape = null;
            }
            this._styleShape = ev;
            this._styleShape_wrapped = function (o, e) {
                var outerArgs = new IgrStyleShapeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeStyleShape) {
                    _this.beforeStyleShape(_this, outerArgs);
                }
                if (_this._styleShape) {
                    _this._styleShape(_this, outerArgs);
                }
            };
            this.i.styleShape = delegateCombine(this.i.styleShape, this._styleShape_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicPolylineSeries;
}(IgrGeographicShapeSeriesBase));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicPolylineSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicPolylineSeriesModule() {
    }
    IgrGeographicPolylineSeriesModule.register = function () {
        IgrScatterPolylineSeriesModule.register();
        TypeRegistrar.registerCons("IgrGeographicPolylineSeries", IgrGeographicPolylineSeries);
        TypeRegistrar.register("GeographicPolylineSeries", GeographicPolylineSeries.$type);
    };
    return IgrGeographicPolylineSeriesModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var TileGeneratorMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TileGeneratorMapImagery, _super);
    function TileGeneratorMapImagery() {
        var _this = _super.call(this, new TileGeneratorTileSource()) || this;
        _this.downloadingImage = delegateCombine(_this.downloadingImage, runOn(_this, _this.bo));
        _this.cancellingImage = delegateCombine(_this.cancellingImage, runOn(_this, _this.bn));
        return _this;
    }
    TileGeneratorMapImagery.prototype.bn = function (a, b) {
        var c = b.uri.toString().split('/');
        var d = parseInt(stringReplace(c[3], "/", ""));
        var e = parseInt(stringReplace(c[4], "/", ""));
        var f = parseInt(stringReplace(stringReplace(c[5], "/", ""), ".png", ""));
        if (this.tileGenerator != null) {
            this.tileGenerator.cancelTile(d, e, f);
        }
    };
    TileGeneratorMapImagery.prototype.bo = function (a, b) {
        var _this = this;
        var c = b.uri.toString().split('/');
        var d = parseInt(stringReplace(c[3], "/", ""));
        var e = parseInt(stringReplace(c[4], "/", ""));
        var f = parseInt(stringReplace(stringReplace(c[5], "/", ""), ".png", ""));
        b.uri = null;
        var img_ = b.image;
        if (this.tileGenerator != null) {
            this.tileGenerator.getTile(d, e, f, function (g, h) { return _this.deferralHandler.deferAction(function () { return img_.src = h.url; }); }, function (g, h) {
            }, function (g, h) {
            }, img_);
        }
    };
    TileGeneratorMapImagery.$t = markType(TileGeneratorMapImagery, 'TileGeneratorMapImagery', GeographicMapImagery.$);
    TileGeneratorMapImagery.$$p = markDep(DependencyProperty, PropertyMetadata, TileGeneratorMapImagery, 'a8', ['TileGenerator', [ITileGenerator_$type, null]]);
    return TileGeneratorMapImagery;
}(GeographicMapImagery));

/**
 * Represents a CustomMapImagery MapImagery
*/
var IgrTileGeneratorMapImagery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrTileGeneratorMapImagery, _super);
    function IgrTileGeneratorMapImagery() {
        return _super.call(this) || this;
    }
    IgrTileGeneratorMapImagery.prototype.createImplementation = function () {
        return new TileGeneratorMapImagery();
    };
    Object.defineProperty(IgrTileGeneratorMapImagery.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTileGeneratorMapImagery.prototype, "tileGenerator", {
        /**
         * Gets or sets the culture name for this tile source.
        */
        get: function () {
            return this.i.tileGenerator;
        },
        set: function (v) {
            this.i.tileGenerator = v;
        },
        enumerable: true,
        configurable: true
    });
    return IgrTileGeneratorMapImagery;
}(IgrGeographicMapImagery));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrTileGeneratorMapImageryModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrTileGeneratorMapImageryModule() {
    }
    IgrTileGeneratorMapImageryModule.register = function () {
        TypeRegistrar.registerCons("IgrTileGeneratorMapImagery", IgrTileGeneratorMapImagery);
        TypeRegistrar.register("TileGeneratorMapImagery", TileGeneratorMapImagery.$type);
    };
    return IgrTileGeneratorMapImageryModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var TileSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TileSeries, _super);
    function TileSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ne = null;
        _this.nd = null;
        _this.imageTilesReady = null;
        _this.nh = null;
        _this.ni = false;
        return _this;
    }
    TileSeries.prototype.bf = function () {
        return new TileSeriesView(this);
    };
    TileSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.nc = a;
    };
    TileSeries.prototype.get_mi = function () {
        return false;
    };
    Object.defineProperty(TileSeries.prototype, "ng", {
        get: function () {
            return this.ne;
        },
        set: function (a) {
            var b = a != this.ng;
            if (b) {
                var c = this.ng;
                this.ne = a;
                this.raisePropertyChanged("TileImagery", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TileSeries.prototype, "nf", {
        get: function () {
            return this.nd;
        },
        set: function (a) {
            var b = this.nd;
            this.nd = a;
            this.raisePropertyChanged("ActualTileImagery", b, this.nd);
        },
        enumerable: true,
        configurable: true
    });
    TileSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        var e;
        var f;
        switch (b) {
            case "TileImagery":
                e = c;
                f = d;
                if (e != null) {
                    e.propertyChanged = delegateRemove(e.propertyChanged, runOn(this, this.nl));
                }
                if (f != null) {
                    f.propertyChanged = delegateCombine(f.propertyChanged, runOn(this, this.nl));
                }
                this.nc.c5(e, f);
                this.je(false);
                this.il();
                break;
            case "ActualTileImagery":
                e = c;
                f = d;
                if (e != null) {
                    e.imageTilesReady = delegateRemove(e.imageTilesReady, runOn(this, this.nm));
                    e.deferralHandler = null;
                }
                if (f != null) {
                    f.imageTilesReady = delegateCombine(f.imageTilesReady, runOn(this, this.nm));
                    f.deferralHandler = this;
                }
                this.nc.c4(e, f);
                if (f != null && typeCast(XamGeographicMap.$, this.bs) !== null) {
                    f.geographicMap = this.bs;
                    this.no(this.bi);
                    this.nc.c1(this.bs.mr);
                }
                this.il();
                break;
            case "ActualWindowRect":
                this.nc.c1(d);
                break;
            case "WorldRect":
                this.nc.c8(d);
                break;
            case "SeriesViewer":
                var g = c;
                var h = d;
                if (g != null && this.nf != null) {
                    this.nf.bc(null);
                }
                if (h != null && this.nf != null) {
                    this.nf.bc(this.bi.t);
                }
                break;
        }
    };
    TileSeries.prototype.nl = function (a, b) {
        if (b.propertyName == "MultiScaleImage") {
            this.no(this.bi);
        }
    };
    TileSeries.prototype.nm = function (a, b) {
        if (this.imageTilesReady != null) {
            this.imageTilesReady(this, new EventArgs());
        }
        if (!this.ni) {
            this.nc.c6();
        }
    };
    TileSeries.prototype.register = function (a, b) {
        this.nh = b;
    };
    TileSeries.prototype.unRegister = function (a) {
        this.nh = null;
    };
    TileSeries.prototype.deferredRefresh = function () {
        this.je(false);
    };
    TileSeries.prototype.deferAction = function (a) {
        if (this.e4 != null) {
            this.e4.setTimeout(a, 0);
        }
        else {
            window.setTimeout(a, 0);
        }
    };
    TileSeries.prototype.jt = function (a, b) {
        this.nc.c7();
        _super.prototype.jt.call(this, a, b);
    };
    TileSeries.prototype.jf = function (a) {
        _super.prototype.jf.call(this, a);
        this.nn(a, this.bi);
    };
    TileSeries.prototype.nn = function (a, b) {
        var c;
        var d;
        var e = b;
        var f = b.getViewInfo(c, d);
        c = f.p0;
        d = f.p1;
        this.no(b);
        if (this.nh != null) {
            this.ni = true;
            this.nh(a);
            this.ni = false;
        }
        e.c6();
    };
    TileSeries.prototype.jd = function (a, b, c, d, e) {
        _super.prototype.jd.call(this, a, b, c, d, e);
        var f = this.dz.item(d);
        f.ay(c);
        if (this.cc(f)) {
            return;
        }
        this.m1(f);
    };
    TileSeries.prototype.no = function (a) {
        var b;
        var c;
        var d = a.getViewInfo(b, c);
        b = d.p0;
        c = d.p1;
        if (this.ng != null && this.ng.ao != null) {
            if (this.ng != this.nf) {
                this.nf = this.ng;
            }
            if (this.nf != null && !b.isEmpty) {
                if (this.nf.width != b.width) {
                    this.nf.width = b.width;
                }
                if (this.nf.height != b.height) {
                    this.nf.height = b.height;
                }
            }
        }
    };
    TileSeries.prototype.hw = function (a, b) {
        _super.prototype.hw.call(this, a, b);
        b.c2();
    };
    TileSeries.$t = markType(TileSeries, 'TileSeries', ShapeSeriesBase.$, [IMapRenderDeferralHandler_$type]);
    return TileSeries;
}(ShapeSeriesBase));
/**
 * @hidden
 */
var TileSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TileSeriesView, _super);
    function TileSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.cy = null;
        _this.c9 = new GeometryGroup();
        _this.c0 = null;
        _this.cz = null;
        _this.cy = a;
        return _this;
    }
    TileSeriesView.prototype.ca = function (a, b) {
        if (b.c.count > 0) {
            this.c9.d.add(b);
        }
    };
    TileSeriesView.prototype.cu = function (a, b) {
        return this.cv(a, b, true);
    };
    TileSeriesView.prototype.ct = function (a, b) {
        return null;
    };
    TileSeriesView.prototype.ce = function (a) {
    };
    TileSeriesView.prototype.cc = function (a, b) {
    };
    TileSeriesView.prototype.cj = function () {
        _super.prototype.cj.call(this);
        this.c9.d.clear();
    };
    TileSeriesView.prototype.ci = function () {
        _super.prototype.ci.call(this);
        this.an();
    };
    TileSeriesView.prototype.c1 = function (a) {
        if (this.cy.ng != null) {
            this.cy.ng.windowRect = a;
        }
    };
    TileSeriesView.prototype.c4 = function (a, b) {
        if (this.c0 == null) {
            this.c0 = this.e.e4.createElement("canvas");
            var c = this.e.e4.get2DCanvasContext(this.c0);
            this.cz = new RenderingContext(new CanvasViewRenderer(), c);
            this.c0.setAttribute("width", this.br.width.toString());
            this.c0.setAttribute("height", this.br.height.toString());
        }
        if (a != null) {
            a.bb(null);
            a.bc(null);
            a.imagesChanged = delegateRemove(a.imagesChanged, runOn(this, this.c3));
        }
        if (b != null) {
            if (this.t != null) {
                b.bc(this.t);
            }
            b.bb(this.cz);
            b.bd(this.br);
            b.imagesChanged = delegateCombine(b.imagesChanged, runOn(this, this.c3));
        }
    };
    TileSeriesView.prototype.c3 = function (a, b) {
        this.an();
    };
    TileSeriesView.prototype.c5 = function (a, b) {
    };
    TileSeriesView.prototype.c7 = function () {
        if (this.c0 != null) {
            this.c0.setAttribute("width", this.br.width.toString());
            this.c0.setAttribute("height", this.br.height.toString());
        }
        if (this.cy.ng != null) {
            this.cy.ng.bd(this.br);
        }
    };
    TileSeriesView.prototype.a3 = function (a, b) {
        _super.prototype.a3.call(this, a, b);
        if (b) {
            return;
        }
        if (this.c0 == null) {
            return;
        }
        var c = false;
        if (this.c9.d.count > 0) {
            c = true;
            this.h.z();
            this.h.q(this.c9);
            var d = this.h.g();
            d.clip();
        }
        var e = truncate(Math.round(this.br.left));
        var f = truncate(Math.round(this.br.top));
        var g = truncate(Math.round(this.br.width));
        var h = truncate(Math.round(this.br.height));
        this.h.n(this.c0.getNativeElement(), 1, e, f, g, h, e, f, g, h);
        if (c) {
            this.h.y();
        }
    };
    TileSeriesView.prototype.c6 = function () {
        this.an();
    };
    TileSeriesView.prototype.c2 = function () {
    };
    TileSeriesView.prototype.c8 = function (a) {
        if (this.cy.ng != null) {
            this.cy.ng.a4();
        }
    };
    TileSeriesView.$t = markType(TileSeriesView, 'TileSeriesView', ShapeSeriesViewBase.$);
    return TileSeriesView;
}(ShapeSeriesViewBase));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents a tile series class that can render imagery tiles
*/
var IgrTileSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrTileSeries, _super);
    function IgrTileSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrTileSeries.prototype.createImplementation = function () {
        return new TileSeries();
    };
    Object.defineProperty(IgrTileSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTileSeries.prototype, "tileImagery", {
        /**
         * The MapImagery which is used to provide the tiles for display.
        */
        get: function () {
            if (this.i.ng == null) {
                return null;
            }
            return this.i.ng.externalObject;
        },
        set: function (v) {
            v == null ? this.i.ng = null : this.i.ng = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrTileSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.tileImagery && this.tileImagery.name && this.tileImagery.name == name) {
            return this.tileImagery;
        }
        return null;
    };
    /**
     * Defers rendering of the series
    
    */
    IgrTileSeries.prototype.deferredRefresh = function () {
        this.i.deferredRefresh();
    };
    return IgrTileSeries;
}(IgrShapeSeriesBase));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrTileSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrTileSeriesModule() {
    }
    IgrTileSeriesModule.register = function () {
        TypeRegistrar.registerCons("IgrTileSeries", IgrTileSeries);
        TypeRegistrar.register("TileSeries", TileSeries.$type);
    };
    return IgrTileSeriesModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicTileSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicTileSeries, _super);
    function GeographicTileSeries() {
        var _this = _super.call(this) || this;
        _this.mp = null;
        _this.mo = null;
        _this.imageTilesReady = null;
        _this.ab = GeographicTileSeries.$;
        return _this;
    }
    Object.defineProperty(GeographicTileSeries.prototype, "mq", {
        get: function () {
            return this.mp;
        },
        set: function (a) {
            var b = a != this.mq;
            if (b) {
                var c = this.mq;
                this.mp = a;
                this.raisePropertyChanged("TileImagery", c, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    GeographicTileSeries.prototype.mu = function () {
        if (this.mq != null) {
            this.mq.clearTileCache();
        }
    };
    GeographicTileSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "TileImagery":
                if (this.l3 != null) {
                    this.l3.ng = this.mq;
                }
                break;
        }
    };
    GeographicTileSeries.prototype.l8 = function () {
        _super.prototype.l8.call(this);
        this.l3.ng = this.mq;
        if (this.mo != null) {
            var a = this.mo;
            a.imageTilesReady = delegateRemove(a.imageTilesReady, runOn(this, this.mt));
        }
        this.mo = this.l3;
        if (this.mo != null) {
            var b = this.mo;
            b.imageTilesReady = delegateCombine(b.imageTilesReady, runOn(this, this.mt));
        }
    };
    GeographicTileSeries.prototype.l2 = function () {
        return new TileSeries();
    };
    GeographicTileSeries.prototype.mt = function (a, b) {
        if (this.imageTilesReady != null) {
            this.imageTilesReady(this, new ImageTilesReadyEventArgs());
        }
    };
    GeographicTileSeries.$t = markType(GeographicTileSeries, 'GeographicTileSeries', GeographicShapeSeriesBase.$);
    return GeographicTileSeries;
}(GeographicShapeSeriesBase));

/**
 * Series class used for displaying a tile set, and using shapes to define the areas that should be rendered.
*/
var IgrGeographicTileSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicTileSeries, _super);
    function IgrGeographicTileSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._imageTilesReady = null;
        _this._imageTilesReady_wrapped = null;
        return _this;
    }
    IgrGeographicTileSeries.prototype.createImplementation = function () {
        return new GeographicTileSeries();
    };
    Object.defineProperty(IgrGeographicTileSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicTileSeries.prototype, "tileImagery", {
        /**
         * The MapImagery which is used to provide the tiles for display.
        */
        get: function () {
            if (this.i.mq == null) {
                return null;
            }
            return this.i.mq.externalObject;
        },
        set: function (v) {
            v == null ? this.i.mq = null : this.i.mq = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicTileSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.tileImagery && this.tileImagery.name && this.tileImagery.name == name) {
            return this.tileImagery;
        }
        return null;
    };
    /**
     * Removes all cached tile Imagery from the
    
    */
    IgrGeographicTileSeries.prototype.clearTileCache = function () {
        this.i.mu();
    };
    Object.defineProperty(IgrGeographicTileSeries.prototype, "imageTilesReady", {
        /**
         * This event is fired whenever the image tiles transition from a loading state (e.g. some are fading in) to a loaded state.
        */
        get: function () {
            return this._imageTilesReady;
        },
        set: function (ev) {
            var _this = this;
            if (this._imageTilesReady_wrapped !== null) {
                this.i.imageTilesReady = delegateRemove(this.i.imageTilesReady, this._imageTilesReady_wrapped);
                this._imageTilesReady_wrapped = null;
                this._imageTilesReady = null;
            }
            this._imageTilesReady = ev;
            this._imageTilesReady_wrapped = function (o, e) {
                var outerArgs = new IgrImageTilesReadyEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeImageTilesReady) {
                    _this.beforeImageTilesReady(_this, outerArgs);
                }
                if (_this._imageTilesReady) {
                    _this._imageTilesReady(_this, outerArgs);
                }
            };
            this.i.imageTilesReady = delegateCombine(this.i.imageTilesReady, this._imageTilesReady_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicTileSeries;
}(IgrGeographicShapeSeriesBase));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicTileSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicTileSeriesModule() {
    }
    IgrGeographicTileSeriesModule.register = function () {
        IgrTileSeriesModule.register();
        TypeRegistrar.registerCons("IgrGeographicTileSeries", IgrGeographicTileSeries);
        TypeRegistrar.register("GeographicTileSeries", GeographicTileSeries.$type);
    };
    return IgrGeographicTileSeriesModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicProportionalSymbolSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicProportionalSymbolSeriesView, _super);
    function GeographicProportionalSymbolSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicProportionalSymbolSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        var a = this.b0.l3;
        a.nv = this.b0.mv;
        a.nz = this.b0.mt;
        a.l2 = this.b0.md;
        a.mn = this.b0.na;
        a.l7 = this.b0.ml;
        a.px = this.b0.m6;
        a.o5 = this.b0.me;
        a.pr = this.b0.mr;
        a.pm = this.b0.mn;
        a.o1 = this.b0.mb;
        a.pd = this.b0.mg;
        a.pe = this.b0.mh;
        a.pk = this.b0.mk;
        a.pj = this.b0.mj;
    };
    GeographicProportionalSymbolSeriesView.prototype.b9 = function () {
        this.b0.l3.nv = this.b0.mv;
    };
    GeographicProportionalSymbolSeriesView.prototype.b8 = function () {
        this.b0.l3.nz = this.b0.mt;
    };
    GeographicProportionalSymbolSeriesView.prototype.ce = function () {
        this.b0.l3.l2 = this.b0.md;
    };
    GeographicProportionalSymbolSeriesView.prototype.cc = function () {
        this.b0.l3.mn = this.b0.na;
    };
    GeographicProportionalSymbolSeriesView.prototype.cd = function () {
        this.b0.l3.l7 = this.b0.ml;
    };
    GeographicProportionalSymbolSeriesView.prototype.cf = function () {
        this.b0.l3.no = this.b0.mm;
    };
    GeographicProportionalSymbolSeriesView.prototype.ch = function () {
        this.b0.l3.xAxis = this.b0.bs.nc;
    };
    GeographicProportionalSymbolSeriesView.prototype.ci = function () {
        this.b0.l3.yAxis = this.b0.bs.ne;
    };
    GeographicProportionalSymbolSeriesView.prototype.cg = function () {
        var a = this.b0.l3;
        if (this.b0.bs == null) {
            a.xAxis = null;
            a.yAxis = null;
            return;
        }
        a.xAxis = this.b0.bs.nc;
        a.yAxis = this.b0.bs.ne;
    };
    GeographicProportionalSymbolSeriesView.prototype.ca = function () {
        this.b0.l3.m1 = this.b0.nt;
    };
    GeographicProportionalSymbolSeriesView.prototype.cb = function () {
        this.b0.l3.m2 = this.b0.nu;
    };
    GeographicProportionalSymbolSeriesView.prototype.cj = function () {
        this.b0.l3.px = this.b0.m6;
    };
    GeographicProportionalSymbolSeriesView.prototype.ck = function () {
        this.b0.l3.o5 = this.b0.me;
        this.b0.l3.pf = this.b0.mi;
    };
    GeographicProportionalSymbolSeriesView.prototype.b4 = function () {
        this.b0.l3.pr = this.b0.mr;
    };
    GeographicProportionalSymbolSeriesView.prototype.b2 = function () {
        this.b0.l3.o1 = this.b0.mb;
        this.b0.l3.pd = this.b0.mg;
        this.b0.l3.pe = this.b0.mh;
        this.b0.l3.pk = this.b0.mk;
        this.b0.l3.pj = this.b0.mj;
    };
    GeographicProportionalSymbolSeriesView.prototype.b1 = function () {
        this.b0.l3.pm = this.b0.mn;
    };
    GeographicProportionalSymbolSeriesView.prototype.cl = function () {
        this.b0.l3.pf = this.b0.mi;
    };
    GeographicProportionalSymbolSeriesView.prototype.b3 = function () {
        this.b0.l3.pd = this.b0.mg;
    };
    GeographicProportionalSymbolSeriesView.prototype.b7 = function () {
        this.b0.l3.pe = this.b0.mh;
    };
    GeographicProportionalSymbolSeriesView.prototype.b6 = function () {
        this.b0.l3.pk = this.b0.mk;
    };
    GeographicProportionalSymbolSeriesView.prototype.b5 = function () {
        this.b0.l3.pj = this.b0.mj;
    };
    GeographicProportionalSymbolSeriesView.$t = markType(GeographicProportionalSymbolSeriesView, 'GeographicProportionalSymbolSeriesView', HostSeriesView.$);
    return GeographicProportionalSymbolSeriesView;
}(HostSeriesView));
/**
 * @hidden
 */
var GeographicProportionalSymbolSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicProportionalSymbolSeries, _super);
    function GeographicProportionalSymbolSeries() {
        var _this = _super.call(this) || this;
        _this.mc = null;
        _this.mh = false;
        _this.mk = NaN;
        _this.mj = NaN;
        _this.ab = GeographicProportionalSymbolSeries.$;
        return _this;
    }
    GeographicProportionalSymbolSeries.prototype.bf = function () {
        return new GeographicProportionalSymbolSeriesView(this);
    };
    GeographicProportionalSymbolSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.mf = a;
    };
    GeographicProportionalSymbolSeries.prototype.l2 = function () {
        return new BubbleSeries();
    };
    GeographicProportionalSymbolSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.mf.cg();
                break;
            case GeographicProportionalSymbolSeries.$$p[5]:
                this.mf.b9();
                break;
            case GeographicProportionalSymbolSeries.$$p[4]:
                this.mf.b8();
                break;
            case GeographicProportionalSymbolSeries.$$p[13]:
                this.mf.ce();
                break;
            case GeographicProportionalSymbolSeries.$$p[11]:
                this.mf.cc();
                break;
            case GeographicProportionalSymbolSeries.$$p[12]:
                this.mf.cd();
                break;
            case GeographicProportionalSymbolSeries.$$p[14]:
                this.mf.cf();
                break;
            case "XAxis":
                this.mf.ch();
                break;
            case "YAxis":
                this.mf.ci();
                break;
            case GeographicProportionalSymbolSeries.$$p[7]:
                this.mf.ca();
                break;
            case GeographicProportionalSymbolSeries.$$p[9]:
                this.mf.cb();
                break;
            case GeographicProportionalSymbolSeries.$$p[15]:
                this.mf.cj();
                break;
            case GeographicProportionalSymbolSeries.$$p[16]:
                this.mf.ck();
                break;
            case GeographicProportionalSymbolSeries.$$p[17]:
                this.mf.cl();
                break;
            case GeographicProportionalSymbolSeries.$$p[3]:
                this.mf.b4();
                break;
            case GeographicProportionalSymbolSeries.$$p[0]:
                this.mf.b1();
                break;
            case GeographicProportionalSymbolSeries.$$p[1]:
                this.mf.b2();
                break;
            case GeographicProportionalSymbolSeries.$$p[2]:
                this.mf.b3();
                break;
            case GeographicProportionalSymbolSeries.$$p[10]:
                this.mf.b7();
                break;
            case GeographicProportionalSymbolSeries.$$p[8]:
                this.mf.b6();
                break;
            case GeographicProportionalSymbolSeries.$$p[6]:
                this.mf.b5();
                break;
        }
    };
    GeographicProportionalSymbolSeries.$t = markType(GeographicProportionalSymbolSeries, 'GeographicProportionalSymbolSeries', GeographicMapSeriesHost.$);
    GeographicProportionalSymbolSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicProportionalSymbolSeries, 'raisePropertyChanged', ['FillMemberPath:mn:nb', [2], 'FillScale:mb:nc', [BrushScale.$], 'FillScaleUseGlobalValues:mg:nd', [0], 'LabelMemberPath:mr:ne', [2], 'LatitudeMemberPath:mt:nf', [2, null], 'LongitudeMemberPath:mv:ng', [2, null], 'MarkerBrushBrightness:mj:nh', [1], 'MarkerBrush:nt:ni', [Brush.$], 'MarkerOutlineBrightness:mk:nj', [1], 'MarkerOutline:nu:nk', [Brush.$], 'MarkerOutlineUsesFillScale:mh:nl', [0], 'MarkerTemplate:na:nm', [DataTemplate.$, null], 'MarkerThickness:ml:nn', [1, DeviceUtils.g(2)], 'MarkerType:md:no', [MarkerType_$type, enumGetBox(MarkerType_$type, 1)], 'MaximumMarkers:mm:np', [1, 400], 'RadiusMemberPath:m6:nq', [2, null], 'RadiusScale:me:nr', [SizeScale.$], 'RadiusScaleUseGlobalValues:mi:ns', [0]]);
    return GeographicProportionalSymbolSeries;
}(GeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a ScatterSeries.
*/
var IgrGeographicProportionalSymbolSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicProportionalSymbolSeries, _super);
    function IgrGeographicProportionalSymbolSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrGeographicProportionalSymbolSeries.prototype.createImplementation = function () {
        return new GeographicProportionalSymbolSeries();
    };
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "latitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mt;
        },
        set: function (v) {
            this.i.mt = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "longitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mv;
        },
        set: function (v) {
            this.i.mv = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.md;
        },
        set: function (v) {
            this.i.md = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.na;
        },
        set: function (v) {
            this.i.na = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.nt);
        },
        set: function (v) {
            this.i.nt = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.nu);
        },
        set: function (v) {
            this.i.nu = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "maximumMarkers", {
        /**
         * Gets or sets the maximum number of markerItems displayed by the current series.
         * If more than the specified number of markerItems are visible, the series will automatically
         * choose a representative set.
        */
        get: function () {
            return this.i.mm;
        },
        set: function (v) {
            this.i.mm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "radiusMemberPath", {
        /**
         * Gets or sets the radius mapping property for the current series object.
        */
        get: function () {
            return this.i.m6;
        },
        set: function (v) {
            this.i.m6 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "radiusScale", {
        /**
         * Gets or sets the radius size scale for the bubbles.
        */
        get: function () {
            if (this.i.me == null) {
                return null;
            }
            if (!this.i.me.externalObject) {
                var e = IgrSizeScale._createFromInternal(this.i.me);
                if (e) {
                    e._implementation = this.i.me;
                }
                this.i.me.externalObject = e;
            }
            return this.i.me.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.me = null : this.i.me = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "labelMemberPath", {
        /**
         * Gets or sets the Label mapping property for the current series object.
        */
        get: function () {
            return this.i.mr;
        },
        set: function (v) {
            this.i.mr = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "fillMemberPath", {
        /**
         * Gets or sets the fill mapping property for the current series object.
        */
        get: function () {
            return this.i.mn;
        },
        set: function (v) {
            this.i.mn = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "fillScale", {
        /**
         * Gets or sets the brush scale for the marker brush.
        */
        get: function () {
            if (this.i.mb == null) {
                return null;
            }
            if (!this.i.mb.externalObject) {
                var e = IgrBrushScale._createFromInternal(this.i.mb);
                if (e) {
                    e._implementation = this.i.mb;
                }
                this.i.mb.externalObject = e;
            }
            return this.i.mb.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.mb = null : this.i.mb = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "fillScaleUseGlobalValues", {
        /**
         * Gets or sets the whether or not the FillScale uses global values of FillMemberPath of multiple series.
         * This setting applies only if multiple series are using the same FillScale.
        */
        get: function () {
            return this.i.mg;
        },
        set: function (v) {
            this.i.mg = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerOutlineUsesFillScale", {
        /**
         * Gets or sets whether or not the marker outline should use FillScale like the marker fill does.
         * This setting applies only if the current series has a FillScale set and it overrides MarkerOutline setting.
        */
        get: function () {
            return this.i.mh;
        },
        set: function (v) {
            this.i.mh = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerOutlineBrightness", {
        /**
         * Gets or sets brightness of the marker outline. Using negative value will change marker outline to darker color and positive value will change marker outline to brighter color
         * Note you can use any values between minimum value of -1 (darkest outline) and maximum value of 1 (brightest outline)
        */
        get: function () {
            return this.i.mk;
        },
        set: function (v) {
            this.i.mk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerBrushBrightness", {
        /**
         * Gets or sets brightness of the marker fill. Using negative value will change marker fill to darker color and positive value will change marker fill to brighter color
         * Note you can use any values between minimum value of -1 (darkest fill) and maximum value of 1 (brightest fill)
        */
        get: function () {
            return this.i.mj;
        },
        set: function (v) {
            this.i.mj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.ml;
        },
        set: function (v) {
            this.i.ml = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicProportionalSymbolSeries.prototype, "radiusScaleUseGlobalValues", {
        /**
         * Gets or sets the whether or not the RadiusScale uses global values of RadiusMemberPath of multiple series.
         * This setting applies only if multiple series are using the same RadiusScale.
        */
        get: function () {
            return this.i.mi;
        },
        set: function (v) {
            this.i.mi = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicProportionalSymbolSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.radiusScale && this.radiusScale.name && this.radiusScale.name == name) {
            return this.radiusScale;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        return null;
    };
    IgrGeographicProportionalSymbolSeries.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.radiusScale && this.radiusScale._styling) {
            this.radiusScale._styling(container, component, this);
        }
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        this._inStyling = false;
    };
    return IgrGeographicProportionalSymbolSeries;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicProportionalSymbolSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicProportionalSymbolSeriesModule() {
    }
    IgrGeographicProportionalSymbolSeriesModule.register = function () {
        IgrBubbleSeriesModule.register();
        TypeRegistrar.registerCons("IgrGeographicProportionalSymbolSeries", IgrGeographicProportionalSymbolSeries);
        TypeRegistrar.register("GeographicProportionalSymbolSeries", GeographicProportionalSymbolSeries.$type);
    };
    return IgrGeographicProportionalSymbolSeriesModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicSymbolSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicSymbolSeriesView, _super);
    function GeographicSymbolSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicSymbolSeriesView.prototype.bv = function () {
        var a = this.b0.l3;
        _super.prototype.bv.call(this);
        a.nv = this.b0.mk;
        a.nz = this.b0.mi;
        a.l2 = this.b0.mc;
        a.mn = this.b0.mu;
        a.l7 = this.b0.mg;
    };
    GeographicSymbolSeriesView.prototype.b2 = function () {
        this.b0.l3.nv = this.b0.mk;
    };
    GeographicSymbolSeriesView.prototype.b1 = function () {
        this.b0.l3.nz = this.b0.mi;
    };
    GeographicSymbolSeriesView.prototype.b8 = function () {
        this.b0.l3.l2 = this.b0.mc;
    };
    GeographicSymbolSeriesView.prototype.b6 = function () {
        this.b0.l3.mn = this.b0.mu;
    };
    GeographicSymbolSeriesView.prototype.b7 = function () {
        this.b0.l3.l7 = this.b0.mg;
    };
    GeographicSymbolSeriesView.prototype.b9 = function () {
        this.b0.l3.no = this.b0.mh;
    };
    GeographicSymbolSeriesView.prototype.cb = function () {
        this.b0.l3.xAxis = this.b0.bs.nc;
    };
    GeographicSymbolSeriesView.prototype.cc = function () {
        this.b0.l3.yAxis = this.b0.bs.ne;
    };
    GeographicSymbolSeriesView.prototype.ca = function () {
        var a = this.b0.l3;
        if (this.b0.bs == null) {
            a.xAxis = null;
            a.yAxis = null;
            return;
        }
        a.xAxis = this.b0.bs.nc;
        a.yAxis = this.b0.bs.ne;
    };
    GeographicSymbolSeriesView.prototype.b4 = function () {
        this.b0.l3.m5 = this.b0.mb;
    };
    GeographicSymbolSeriesView.prototype.b3 = function () {
        this.b0.l3.m1 = this.b0.m5;
    };
    GeographicSymbolSeriesView.prototype.b5 = function () {
        this.b0.l3.m2 = this.b0.m6;
    };
    GeographicSymbolSeriesView.$t = markType(GeographicSymbolSeriesView, 'GeographicSymbolSeriesView', HostSeriesView.$);
    return GeographicSymbolSeriesView;
}(HostSeriesView));
/**
 * @hidden
 */
var GeographicSymbolSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicSymbolSeries, _super);
    function GeographicSymbolSeries() {
        var _this = _super.call(this) || this;
        _this.md = null;
        _this.ab = GeographicSymbolSeries.$;
        return _this;
    }
    GeographicSymbolSeries.prototype.bf = function () {
        return new GeographicSymbolSeriesView(this);
    };
    GeographicSymbolSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.me = a;
    };
    GeographicSymbolSeries.prototype.l2 = function () {
        return new ScatterSeries();
    };
    GeographicSymbolSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.me.ca();
                break;
            case GeographicSymbolSeries.$$p[1]:
                this.me.b2();
                break;
            case GeographicSymbolSeries.$$p[0]:
                this.me.b1();
                break;
            case GeographicSymbolSeries.$$p[3]:
                this.me.b4();
                break;
            case GeographicSymbolSeries.$$p[7]:
                this.me.b8();
                break;
            case GeographicSymbolSeries.$$p[5]:
                this.me.b6();
                break;
            case GeographicSymbolSeries.$$p[6]:
                this.me.b7();
                break;
            case GeographicSymbolSeries.$$p[8]:
                this.me.b9();
                break;
            case "XAxis":
                this.me.cb();
                break;
            case "YAxis":
                this.me.cc();
                break;
            case GeographicSymbolSeries.$$p[2]:
                this.me.b3();
                break;
            case GeographicSymbolSeries.$$p[4]:
                this.me.b5();
                break;
        }
    };
    GeographicSymbolSeries.$t = markType(GeographicSymbolSeries, 'GeographicSymbolSeries', GeographicMapSeriesHost.$);
    GeographicSymbolSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicSymbolSeries, 'raisePropertyChanged', ['LatitudeMemberPath:mi:mv', [2, null], 'LongitudeMemberPath:mk:mw', [2, null], 'MarkerBrush:m5:mx', [Brush.$], 'MarkerCollisionAvoidance:mb:my', [CollisionAvoidanceType_$type, enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerOutline:m6:mz', [Brush.$], 'MarkerTemplate:mu:m0', [DataTemplate.$, null], 'MarkerThickness:mg:m1', [1, DeviceUtils.g(2)], 'MarkerType:mc:m2', [MarkerType_$type, enumGetBox(MarkerType_$type, 2)], 'MaximumMarkers:mh:m3', [1, 400], 'UseLightweightMarkers:mf:m4', [0, false]]);
    return GeographicSymbolSeries;
}(GeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a ScatterSeries.
*/
var IgrGeographicSymbolSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicSymbolSeries, _super);
    function IgrGeographicSymbolSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrGeographicSymbolSeries.prototype.createImplementation = function () {
        return new GeographicSymbolSeries();
    };
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "latitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mi;
        },
        set: function (v) {
            this.i.mi = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "longitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mk;
        },
        set: function (v) {
            this.i.mk = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerType", {
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get: function () {
            return this.i.mc;
        },
        set: function (v) {
            this.i.mc = ensureEnum(MarkerType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get: function () {
            return this.i.mb;
        },
        set: function (v) {
            this.i.mb = ensureEnum(CollisionAvoidanceType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerTemplate", {
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get: function () {
            return this.i.mu;
        },
        set: function (v) {
            this.i.mu = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerBrush", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get: function () {
            return brushToString(this.i.m5);
        },
        set: function (v) {
            this.i.m5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerOutline", {
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get: function () {
            return brushToString(this.i.m6);
        },
        set: function (v) {
            this.i.m6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "maximumMarkers", {
        /**
         * Gets or sets the maximum number of markerItems displayed by the current series.
         * If more than the specified number of markerItems are visible, the series will automatically
         * choose a representative set.
        */
        get: function () {
            return this.i.mh;
        },
        set: function (v) {
            this.i.mh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicSymbolSeries.prototype, "markerThickness", {
        /**
         * Gets or sets thickness of the marker outline
        */
        get: function () {
            return this.i.mg;
        },
        set: function (v) {
            this.i.mg = +v;
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicSymbolSeries;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicSymbolSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicSymbolSeriesModule() {
    }
    IgrGeographicSymbolSeriesModule.register = function () {
        IgrScatterSeriesModule.register();
        TypeRegistrar.registerCons("IgrGeographicSymbolSeries", IgrGeographicSymbolSeries);
        TypeRegistrar.register("GeographicSymbolSeries", GeographicSymbolSeries.$type);
    };
    return IgrGeographicSymbolSeriesModule;
}());

/**
 * Base class for geographic series which triangulate XY data prior to rendering.
*/
var IgrGeographicXYTriangulatingSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicXYTriangulatingSeries, _super);
    function IgrGeographicXYTriangulatingSeries(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrGeographicXYTriangulatingSeries.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicXYTriangulatingSeries.prototype, "triangulationDataSource", {
        get: function () {
            return this._triangulationDataSource;
        },
        /**
         * Gets or sets the string path specifying the location of the Itf file.
        */
        set: function (value) {
            this._triangulationDataSource = value;
            this.updateTriangulationDataSource();
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicXYTriangulatingSeries.prototype.updateTriangulationDataSource = function () {
        if (this._cachedTriangulationDataSource == null) {
            this._cachedTriangulationDataSource = new IgrTriangulationDataSource();
            this.onTriangulationDataSourceImportCompleted = this.onTriangulationDataSourceImportCompleted.bind(this);
            this._cachedTriangulationDataSource.importCompleted = this.onTriangulationDataSourceImportCompleted;
        }
        this._cachedTriangulationDataSource.source = this._triangulationDataSource;
    };
    IgrGeographicXYTriangulatingSeries.prototype.onTriangulationDataSourceImportCompleted = function (s, e) {
        this.dataSource = this._cachedTriangulationDataSource.getPointData();
        this.trianglesSource = this._cachedTriangulationDataSource.getTriangleData();
    };
    Object.defineProperty(IgrGeographicXYTriangulatingSeries.prototype, "longitudeMemberPath", {
        /**
     * The name of the property from which to extract the Longitude for each item in the ItemsSource.
    */
        get: function () {
            return this.i.mf;
        },
        set: function (v) {
            this.i.mf = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicXYTriangulatingSeries.prototype, "latitudeMemberPath", {
        /**
         * The name of the property from which to extract the Latitude for each item in the ItemsSource.
        */
        get: function () {
            return this.i.md;
        },
        set: function (v) {
            this.i.md = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicXYTriangulatingSeries.prototype, "trianglesSource", {
        /**
         * The source of triangulation data.
         * This property is optional.  If it is left as null, the triangulation will be created based on the items in the ItemsSource.  Triangulation is a demanding operation, so the runtime performance will be better when specifying a TriangulationSource, especially when a large number of data items are present.
        */
        get: function () {
            return this.i.mc;
        },
        set: function (v) {
            this.i.mc = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicXYTriangulatingSeries.prototype, "triangleVertexMemberPath1", {
        /**
         * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the first vertex point in the ItemsSource.
        */
        get: function () {
            return this.i.mi;
        },
        set: function (v) {
            this.i.mi = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicXYTriangulatingSeries.prototype, "triangleVertexMemberPath2", {
        /**
         * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the second vertex point in the ItemsSource.
        */
        get: function () {
            return this.i.mk;
        },
        set: function (v) {
            this.i.mk = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicXYTriangulatingSeries.prototype, "triangleVertexMemberPath3", {
        /**
         * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the third vertex point in the ItemsSource.
        */
        get: function () {
            return this.i.mm;
        },
        set: function (v) {
            this.i.mm = v;
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicXYTriangulatingSeries;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Series class which draws a colored 2D surface, in a geographic context, based on a triangulation of XY data with numeric values assigned to each point.
*/
var IgrGeographicScatterAreaSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicScatterAreaSeries, _super);
    function IgrGeographicScatterAreaSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._triangulationStatusChanged = null;
        _this._triangulationStatusChanged_wrapped = null;
        return _this;
    }
    IgrGeographicScatterAreaSeries.prototype.createImplementation = function () {
        return new GeographicScatterAreaSeries();
    };
    Object.defineProperty(IgrGeographicScatterAreaSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicScatterAreaSeries.prototype, "colorMemberPath", {
        /**
         * The name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
        */
        get: function () {
            return this.i.mz;
        },
        set: function (v) {
            this.i.mz = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicScatterAreaSeries.prototype, "colorScale", {
        /**
         * The ColorScale used to resolve the color values of points in the series.
        */
        get: function () {
            if (this.i.mv == null) {
                return null;
            }
            if (!this.i.mv.externalObject) {
                var e = IgrColorScale._createFromInternal(this.i.mv);
                if (e) {
                    e._implementation = this.i.mv;
                }
                this.i.mv.externalObject = e;
            }
            return this.i.mv.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.mv = null : this.i.mv = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicScatterAreaSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {
            return this.colorScale;
        }
        return null;
    };
    IgrGeographicScatterAreaSeries.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.colorScale && this.colorScale._styling) {
            this.colorScale._styling(container, component, this);
        }
        this._inStyling = false;
    };
    Object.defineProperty(IgrGeographicScatterAreaSeries.prototype, "triangulationStatusChanged", {
        /**
         * Raised when the status of an ongoing Triangulation has changed.
        */
        get: function () {
            return this._triangulationStatusChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._triangulationStatusChanged_wrapped !== null) {
                this.i.triangulationStatusChanged = delegateRemove(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
                this._triangulationStatusChanged_wrapped = null;
                this._triangulationStatusChanged = null;
            }
            this._triangulationStatusChanged = ev;
            this._triangulationStatusChanged_wrapped = function (o, e) {
                var outerArgs = new IgrTriangulationStatusEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeTriangulationStatusChanged) {
                    _this.beforeTriangulationStatusChanged(_this, outerArgs);
                }
                if (_this._triangulationStatusChanged) {
                    _this._triangulationStatusChanged(_this, outerArgs);
                }
            };
            this.i.triangulationStatusChanged = delegateCombine(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicScatterAreaSeries;
}(IgrGeographicXYTriangulatingSeries));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicScatterAreaSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicScatterAreaSeriesModule() {
    }
    IgrGeographicScatterAreaSeriesModule.register = function () {
        IgrScatterAreaSeriesModule.register();
        TypeRegistrar.registerCons("IgrGeographicScatterAreaSeries", IgrGeographicScatterAreaSeries);
        TypeRegistrar.register("GeographicScatterAreaSeries", GeographicScatterAreaSeries.$type);
    };
    return IgrGeographicScatterAreaSeriesModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicHighDensityScatterSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicHighDensityScatterSeriesView, _super);
    function GeographicHighDensityScatterSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicHighDensityScatterSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        var a = typeCast(HighDensityScatterSeries.$, this.b0.l3);
        a.n4 = this.b0.ms;
        a.n8 = this.b0.mq;
        a.mo = this.b0.mf;
        a.mn = this.b0.me;
        a.c7 = this.b0.md;
        a.ng = this.b0.mh;
        a.nf = this.b0.mg;
    };
    GeographicHighDensityScatterSeriesView.prototype.b6 = function () {
        this.b0.l3.n4 = this.b0.ms;
    };
    GeographicHighDensityScatterSeriesView.prototype.b5 = function () {
        this.b0.l3.n8 = this.b0.mq;
    };
    GeographicHighDensityScatterSeriesView.prototype.cb = function () {
        this.b0.l3.mo = this.b0.mf;
    };
    GeographicHighDensityScatterSeriesView.prototype.b9 = function () {
        this.b0.l3.mn = this.b0.me;
    };
    GeographicHighDensityScatterSeriesView.prototype.b7 = function () {
        this.b0.l3.c7 = this.b0.md;
    };
    GeographicHighDensityScatterSeriesView.prototype.b4 = function () {
        this.b0.l3.ng = this.b0.mh;
    };
    GeographicHighDensityScatterSeriesView.prototype.b2 = function () {
        this.b0.l3.nf = this.b0.mg;
    };
    GeographicHighDensityScatterSeriesView.prototype.ca = function () {
        var a = typeCast(HighDensityScatterSeries.$, this.b0.l3);
        if (this.b0.bs == null) {
            a.l8 = null;
            a.ma = null;
            return;
        }
        a.l8 = this.b0.bs.nc;
        a.ma = this.b0.bs.ne;
    };
    GeographicHighDensityScatterSeriesView.prototype.cc = function () {
        this.b0.l3.l8 = this.b0.bs.nc;
    };
    GeographicHighDensityScatterSeriesView.prototype.cd = function () {
        this.b0.l3.ma = this.b0.bs.ne;
    };
    GeographicHighDensityScatterSeriesView.prototype.b3 = function () {
        this.b0.l3.o1 = this.b0.na;
    };
    GeographicHighDensityScatterSeriesView.prototype.b1 = function () {
        this.b0.l3.o0 = this.b0.m9;
    };
    GeographicHighDensityScatterSeriesView.prototype.b8 = function () {
        this.b0.l3.ns = this.b0.mk;
    };
    GeographicHighDensityScatterSeriesView.$t = markType(GeographicHighDensityScatterSeriesView, 'GeographicHighDensityScatterSeriesView', HostSeriesView.$);
    return GeographicHighDensityScatterSeriesView;
}(HostSeriesView));
/**
 * @hidden
 */
var GeographicHighDensityScatterSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicHighDensityScatterSeries, _super);
    function GeographicHighDensityScatterSeries() {
        var _this = _super.call(this) || this;
        _this.mb = null;
        _this.progressiveLoadStatusChanged = null;
        _this.mj = 0;
        _this.ab = GeographicHighDensityScatterSeries.$;
        return _this;
    }
    GeographicHighDensityScatterSeries.prototype.bf = function () {
        return new GeographicHighDensityScatterSeriesView(this);
    };
    GeographicHighDensityScatterSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.mc = a;
    };
    GeographicHighDensityScatterSeries.prototype.l2 = function () {
        return new HighDensityScatterSeries();
    };
    Object.defineProperty(GeographicHighDensityScatterSeries.prototype, "ml", {
        get: function () {
            return this.mj;
        },
        set: function (a) {
            var b = this.mj;
            this.mj = a;
            this.raisePropertyChanged("ProgressiveStatus", b, this.mj);
        },
        enumerable: true,
        configurable: true
    });
    GeographicHighDensityScatterSeries.prototype.l8 = function () {
        _super.prototype.l8.call(this);
        var a = this.l3;
        a.progressiveLoadStatusChanged = delegateCombine(a.progressiveLoadStatusChanged, runOn(this, this.my));
    };
    GeographicHighDensityScatterSeries.prototype.my = function (a, b) {
        this.ml = b.currentStatus;
        if (this.progressiveLoadStatusChanged != null) {
            this.progressiveLoadStatusChanged(this, b);
        }
    };
    GeographicHighDensityScatterSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case "SeriesViewer":
                this.mc.ca();
                break;
            case GeographicHighDensityScatterSeries.$$p[5]:
                this.mc.b6();
                break;
            case GeographicHighDensityScatterSeries.$$p[4]:
                this.mc.b5();
                break;
            case GeographicHighDensityScatterSeries.$$p[9]:
                this.mc.cb();
                break;
            case GeographicHighDensityScatterSeries.$$p[8]:
                this.mc.b9();
                break;
            case GeographicHighDensityScatterSeries.$$p[6]:
                this.mc.b7();
                break;
            case "XAxis":
                this.mc.cc();
                break;
            case "YAxis":
                this.mc.cd();
                break;
            case GeographicHighDensityScatterSeries.$$p[3]:
                this.mc.b4();
                break;
            case GeographicHighDensityScatterSeries.$$p[1]:
                this.mc.b2();
                break;
            case GeographicHighDensityScatterSeries.$$p[2]:
                this.mc.b3();
                break;
            case GeographicHighDensityScatterSeries.$$p[0]:
                this.mc.b1();
                break;
            case GeographicHighDensityScatterSeries.$$p[7]:
                this.mc.b8();
                break;
        }
    };
    GeographicHighDensityScatterSeries.prototype.get_dq = function () {
        return true;
    };
    GeographicHighDensityScatterSeries.prototype.set_dq = function (a) {
        _super.prototype.set_dq.call(this, a);
    };
    GeographicHighDensityScatterSeries.$t = markType(GeographicHighDensityScatterSeries, 'GeographicHighDensityScatterSeries', GeographicMapSeriesHost.$);
    GeographicHighDensityScatterSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicHighDensityScatterSeries, 'raisePropertyChanged', ['HeatMaximumColor:m9:mz', [Color.$, null], 'HeatMaximum:mg:m0', [1, 50], 'HeatMinimumColor:na:m1', [Color.$, null], 'HeatMinimum:mh:m2', [1, 0], 'LatitudeMemberPath:mq:m3', [2, null], 'LongitudeMemberPath:ms:m4', [2, null], 'MouseOverEnabled:md:m5', [0, false], 'PointExtent:mk:m6', [1, 1], 'ProgressiveLoad:me:m7', [0, true], 'UseBruteForce:mf:m8', [0, false]]);
    return GeographicHighDensityScatterSeries;
}(GeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a HighDensityScatterSeries.
*/
var IgrGeographicHighDensityScatterSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicHighDensityScatterSeries, _super);
    function IgrGeographicHighDensityScatterSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._progressiveLoadStatusChanged = null;
        _this._progressiveLoadStatusChanged_wrapped = null;
        return _this;
    }
    IgrGeographicHighDensityScatterSeries.prototype.createImplementation = function () {
        return new GeographicHighDensityScatterSeries();
    };
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "latitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
        */
        get: function () {
            return this.i.mq;
        },
        set: function (v) {
            this.i.mq = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "longitudeMemberPath", {
        /**
         * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
        */
        get: function () {
            return this.i.ms;
        },
        set: function (v) {
            this.i.ms = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "useBruteForce", {
        /**
         * Gets or sets the whether to use use brute force mode.
        */
        get: function () {
            return this.i.mf;
        },
        set: function (v) {
            this.i.mf = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "progressiveLoad", {
        /**
         * Gets or sets the whether to progressively load the data into the chart.
        */
        get: function () {
            return this.i.me;
        },
        set: function (v) {
            this.i.me = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "mouseOverEnabled", {
        /**
         * Gets or sets the whether the chart reacts to mouse move events.
        */
        get: function () {
            return this.i.md;
        },
        set: function (v) {
            this.i.md = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "heatMinimum", {
        /**
         * Gets or sets the density value that maps to the minimum heat color.
        */
        get: function () {
            return this.i.mh;
        },
        set: function (v) {
            this.i.mh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "heatMaximum", {
        /**
         * Gets or sets the value that maps to the maximum heat color.
        */
        get: function () {
            return this.i.mg;
        },
        set: function (v) {
            this.i.mg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "heatMinimumColor", {
        /**
         * Gets or sets the color to use for the minimum end of the scale.
        */
        get: function () {
            return colorToString(this.i.na);
        },
        set: function (v) {
            this.i.na = stringToColor(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "heatMaximumColor", {
        /**
         * Gets or sets the color to use for the maximum end of the scale.
        */
        get: function () {
            return colorToString(this.i.m9);
        },
        set: function (v) {
            this.i.m9 = stringToColor(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "pointExtent", {
        /**
         * Gets or sets the the pixel extent of the square data points that are rendered.
        */
        get: function () {
            return this.i.mk;
        },
        set: function (v) {
            this.i.mk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "progressiveStatus", {
        /**
         * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
        */
        get: function () {
            return this.i.ml;
        },
        set: function (v) {
            this.i.ml = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicHighDensityScatterSeries.prototype, "progressiveLoadStatusChanged", {
        /**
         * Raised when the progressive loading state of the series has changed.
        */
        get: function () {
            return this._progressiveLoadStatusChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._progressiveLoadStatusChanged_wrapped !== null) {
                this.i.progressiveLoadStatusChanged = delegateRemove(this.i.progressiveLoadStatusChanged, this._progressiveLoadStatusChanged_wrapped);
                this._progressiveLoadStatusChanged_wrapped = null;
                this._progressiveLoadStatusChanged = null;
            }
            this._progressiveLoadStatusChanged = ev;
            this._progressiveLoadStatusChanged_wrapped = function (o, e) {
                var outerArgs = new IgrProgressiveLoadStatusEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeProgressiveLoadStatusChanged) {
                    _this.beforeProgressiveLoadStatusChanged(_this, outerArgs);
                }
                if (_this._progressiveLoadStatusChanged) {
                    _this._progressiveLoadStatusChanged(_this, outerArgs);
                }
            };
            this.i.progressiveLoadStatusChanged = delegateCombine(this.i.progressiveLoadStatusChanged, this._progressiveLoadStatusChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicHighDensityScatterSeries;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicHighDensityScatterSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicHighDensityScatterSeriesModule() {
    }
    IgrGeographicHighDensityScatterSeriesModule.register = function () {
        IgrHighDensityScatterSeriesModule.register();
        TypeRegistrar.registerCons("IgrGeographicHighDensityScatterSeries", IgrGeographicHighDensityScatterSeries);
        TypeRegistrar.register("GeographicHighDensityScatterSeries", GeographicHighDensityScatterSeries.$type);
    };
    return IgrGeographicHighDensityScatterSeriesModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicContourLineSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicContourLineSeriesView, _super);
    function GeographicContourLineSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.b8 = null;
        _this.b8 = a;
        return _this;
    }
    GeographicContourLineSeriesView.prototype.bv = function () {
        _super.prototype.bv.call(this);
        if (this.b8.l3 != null) {
            this.b8.mv.nl = this.b8.mx;
            this.b8.mv.nq = this.b8.m0;
        }
    };
    GeographicContourLineSeriesView.prototype.b9 = function () {
        if (this.b8.mv != null) {
            this.b8.mv.nl = this.b8.mx;
        }
    };
    GeographicContourLineSeriesView.prototype.ca = function () {
        if (this.b8.mv != null) {
            this.b8.mv.nq = this.b8.m0;
        }
    };
    GeographicContourLineSeriesView.$t = markType(GeographicContourLineSeriesView, 'GeographicContourLineSeriesView', GeographicXYTriangulatingSeriesView.$);
    return GeographicContourLineSeriesView;
}(GeographicXYTriangulatingSeriesView));
/**
 * @hidden
 */
var GeographicContourLineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicContourLineSeries, _super);
    function GeographicContourLineSeries() {
        var _this = _super.call(this) || this;
        _this.triangulationStatusChanged = null;
        _this.ab = GeographicContourLineSeries.$;
        return _this;
    }
    GeographicContourLineSeries.prototype.l8 = function () {
        _super.prototype.l8.call(this);
    };
    GeographicContourLineSeries.prototype.l2 = function () {
        this.mv = new ScatterContourSeries();
        var a = this.mv;
        a.triangulationStatusChanged = delegateCombine(a.triangulationStatusChanged, runOn(this, this.m3));
        return this.mv;
    };
    GeographicContourLineSeries.prototype.m3 = function (a, b) {
        if (this.triangulationStatusChanged != null) {
            this.triangulationStatusChanged(this, b);
        }
    };
    GeographicContourLineSeries.prototype.bf = function () {
        return new GeographicContourLineSeriesView(this);
    };
    GeographicContourLineSeries.prototype.iv = function (a) {
        _super.prototype.iv.call(this, a);
        this.my = a;
    };
    GeographicContourLineSeries.prototype.i0 = function (a, b, c, d) {
        _super.prototype.i0.call(this, a, b, c, d);
        switch (b) {
            case GeographicContourLineSeries.$$p[0]:
                this.my.b9();
                break;
            case GeographicContourLineSeries.$$p[1]:
                this.my.ca();
                break;
            case GeographicContourLineSeries.$$p[2]:
                this.mv.nj = this.mu;
                break;
            case "Thickness":
                this.mv.ey = this.ey;
                break;
            case "DashArray":
                this.mv.lc = this.lc;
                break;
            case "DashCap":
                this.mv.ld = this.ld;
                break;
            case "MiterLimit":
                this.mv.es = this.es;
                break;
        }
    };
    GeographicContourLineSeries.$t = markType(GeographicContourLineSeries, 'GeographicContourLineSeries', GeographicXYTriangulatingSeries.$);
    GeographicContourLineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, GeographicContourLineSeries, 'raisePropertyChanged', ['FillScale:mx:m4', [ValueBrushScale.$, null], 'ValueMemberPath:m0:m5', [2, "value"], 'ValueResolver:mu:m6', [ContourValueResolver.$, null]]);
    return GeographicContourLineSeries;
}(GeographicXYTriangulatingSeries));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents a class for Geographic Contour Series displayed on a map.
*/
var IgrGeographicContourLineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicContourLineSeries, _super);
    function IgrGeographicContourLineSeries(props) {
        var _this = _super.call(this, props) || this;
        _this._triangulationStatusChanged = null;
        _this._triangulationStatusChanged_wrapped = null;
        return _this;
    }
    IgrGeographicContourLineSeries.prototype.createImplementation = function () {
        return new GeographicContourLineSeries();
    };
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "valueMemberPath", {
        /**
         * The name of the property from which to retrieve the numeric values from the ItemsSource items.
        */
        get: function () {
            return this.i.m0;
        },
        set: function (v) {
            this.i.m0 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "fillScale", {
        /**
         * The ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
        */
        get: function () {
            if (this.i.mx == null) {
                return null;
            }
            if (!this.i.mx.externalObject) {
                var e = IgrValueBrushScale._createFromInternal(this.i.mx);
                if (e) {
                    e._implementation = this.i.mx;
                }
                this.i.mx.externalObject = e;
            }
            return this.i.mx.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.mx = null : this.i.mx = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "valueResolver", {
        /**
         * The ContourValueResolver used to determine the numeric values of contours.
        */
        get: function () {
            if (this.i.mu == null) {
                return null;
            }
            if (!this.i.mu.externalObject) {
                var e = IgrContourValueResolver._createFromInternal(this.i.mu);
                if (e) {
                    e._implementation = this.i.mu;
                }
                this.i.mu.externalObject = e;
            }
            return this.i.mu.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.mu = null : this.i.mu = v.i;
        },
        enumerable: true,
        configurable: true
    });
    IgrGeographicContourLineSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        if (this.valueResolver && this.valueResolver.name && this.valueResolver.name == name) {
            return this.valueResolver;
        }
        return null;
    };
    IgrGeographicContourLineSeries.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        if (this.valueResolver && this.valueResolver._styling) {
            this.valueResolver._styling(container, component, this);
        }
        this._inStyling = false;
    };
    Object.defineProperty(IgrGeographicContourLineSeries.prototype, "triangulationStatusChanged", {
        /**
         * Raised when the status of an ongoing Triangulation has changed.
        */
        get: function () {
            return this._triangulationStatusChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._triangulationStatusChanged_wrapped !== null) {
                this.i.triangulationStatusChanged = delegateRemove(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
                this._triangulationStatusChanged_wrapped = null;
                this._triangulationStatusChanged = null;
            }
            this._triangulationStatusChanged = ev;
            this._triangulationStatusChanged_wrapped = function (o, e) {
                var outerArgs = new IgrTriangulationStatusEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeTriangulationStatusChanged) {
                    _this.beforeTriangulationStatusChanged(_this, outerArgs);
                }
                if (_this._triangulationStatusChanged) {
                    _this._triangulationStatusChanged(_this, outerArgs);
                }
            };
            this.i.triangulationStatusChanged = delegateCombine(this.i.triangulationStatusChanged, this._triangulationStatusChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicContourLineSeries;
}(IgrGeographicXYTriangulatingSeries));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicContourLineSeriesModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicContourLineSeriesModule() {
    }
    IgrGeographicContourLineSeriesModule.register = function () {
        IgrScatterContourSeriesModule.register();
        TypeRegistrar.registerCons("IgrGeographicContourLineSeries", IgrGeographicContourLineSeries);
        TypeRegistrar.register("GeographicContourLineSeries", GeographicContourLineSeries.$type);
    };
    return IgrGeographicContourLineSeriesModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var IgrGeographicMapModule = /** @class */ /*@__PURE__*/ (function () {
    function IgrGeographicMapModule() {
    }
    IgrGeographicMapModule.register = function () {
        IgrGeographicShapeSeriesModule.register();
        IgrGeographicPolylineSeriesModule.register();
        IgrTileGeneratorMapImageryModule.register();
        IgrHeatTileGeneratorModule.register();
        IgrGeographicTileSeriesModule.register();
        IgrSizeScaleModule.register();
        IgrValueBrushScaleModule.register();
        IgrCustomPaletteColorScaleModule.register();
        IgrGeographicProportionalSymbolSeriesModule.register();
        IgrGeographicSymbolSeriesModule.register();
        IgrGeographicScatterAreaSeriesModule.register();
        IgrGeographicHighDensityScatterSeriesModule.register();
        IgrGeographicContourLineSeriesModule.register();
        IgrGeographicMapCoreModule.register();
        IgrShapeDataSourceModule.register();
    };
    return IgrGeographicMapModule;
}());

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var TokenResponseModel = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TokenResponseModel, _super);
    function TokenResponseModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._token = null;
        _this._expires = 0;
        _this._ssl = false;
        return _this;
    }
    Object.defineProperty(TokenResponseModel.prototype, "token", {
        get: function () {
            return this._token;
        },
        set: function (a) {
            this._token = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenResponseModel.prototype, "expires", {
        get: function () {
            return this._expires;
        },
        set: function (a) {
            this._expires = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenResponseModel.prototype, "ssl", {
        get: function () {
            return this._ssl;
        },
        set: function (a) {
            this._ssl = a;
        },
        enumerable: true,
        configurable: true
    });
    TokenResponseModel.$t = markType(TokenResponseModel, 'TokenResponseModel');
    return TokenResponseModel;
}(Base));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var MapServerResponseModel = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(MapServerResponseModel, _super);
    function MapServerResponseModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._name = null;
        _this._tileInfo = null;
        return _this;
    }
    Object.defineProperty(MapServerResponseModel.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (a) {
            this._name = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapServerResponseModel.prototype, "tileInfo", {
        get: function () {
            return this._tileInfo;
        },
        set: function (a) {
            this._tileInfo = a;
        },
        enumerable: true,
        configurable: true
    });
    MapServerResponseModel.$t = markType(MapServerResponseModel, 'MapServerResponseModel');
    return MapServerResponseModel;
}(Base));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var TileInfoResponseModel = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TileInfoResponseModel, _super);
    function TileInfoResponseModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._lods = null;
        return _this;
    }
    Object.defineProperty(TileInfoResponseModel.prototype, "lods", {
        get: function () {
            return this._lods;
        },
        set: function (a) {
            this._lods = a;
        },
        enumerable: true,
        configurable: true
    });
    TileInfoResponseModel.$t = markType(TileInfoResponseModel, 'TileInfoResponseModel');
    return TileInfoResponseModel;
}(Base));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var LevelOfDetailResponseModel = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LevelOfDetailResponseModel, _super);
    function LevelOfDetailResponseModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._level = 0;
        _this._resolution = 0;
        _this._scale = 0;
        return _this;
    }
    Object.defineProperty(LevelOfDetailResponseModel.prototype, "level", {
        get: function () {
            return this._level;
        },
        set: function (a) {
            this._level = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LevelOfDetailResponseModel.prototype, "resolution", {
        get: function () {
            return this._resolution;
        },
        set: function (a) {
            this._resolution = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LevelOfDetailResponseModel.prototype, "scale", {
        get: function () {
            return this._scale;
        },
        set: function (a) {
            this._scale = a;
        },
        enumerable: true,
        configurable: true
    });
    LevelOfDetailResponseModel.$t = markType(LevelOfDetailResponseModel, 'LevelOfDetailResponseModel');
    return LevelOfDetailResponseModel;
}(Base));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicProportionalSymbolSeriesBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicProportionalSymbolSeriesBaseView, _super);
    function GeographicProportionalSymbolSeriesBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicProportionalSymbolSeriesBaseView.$t = markType(GeographicProportionalSymbolSeriesBaseView, 'GeographicProportionalSymbolSeriesBaseView', HostSeriesView.$);
    return GeographicProportionalSymbolSeriesBaseView;
}(HostSeriesView));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicShapeSeriesBaseBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicShapeSeriesBaseBaseView, _super);
    function GeographicShapeSeriesBaseBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicShapeSeriesBaseBaseView.$t = markType(GeographicShapeSeriesBaseBaseView, 'GeographicShapeSeriesBaseBaseView', HostSeriesView.$);
    return GeographicShapeSeriesBaseBaseView;
}(HostSeriesView));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicSymbolSeriesBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicSymbolSeriesBaseView, _super);
    function GeographicSymbolSeriesBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicSymbolSeriesBaseView.$t = markType(GeographicSymbolSeriesBaseView, 'GeographicSymbolSeriesBaseView', HostSeriesView.$);
    return GeographicSymbolSeriesBaseView;
}(HostSeriesView));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicXYTriangulatingSeriesBaseView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicXYTriangulatingSeriesBaseView, _super);
    function GeographicXYTriangulatingSeriesBaseView(a) {
        var _this = _super.call(this, a) || this;
        _this.b0 = null;
        _this.b0 = a;
        return _this;
    }
    GeographicXYTriangulatingSeriesBaseView.$t = markType(GeographicXYTriangulatingSeriesBaseView, 'GeographicXYTriangulatingSeriesBaseView', HostSeriesView.$);
    return GeographicXYTriangulatingSeriesBaseView;
}(HostSeriesView));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var ImageryMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ImageryMetadata, _super);
    function ImageryMetadata() {
        var _this = _super.call(this) || this;
        _this.b = null;
        _this.a = null;
        _this.a = new List$1(String_$type, 0);
        return _this;
    }
    ImageryMetadata.$t = markType(ImageryMetadata, 'ImageryMetadata');
    return ImageryMetadata;
}(Base));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var BingResourceSet = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BingResourceSet, _super);
    function BingResourceSet() {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.a = new List$1(ImageryMetadata.$, 0);
        return _this;
    }
    BingResourceSet.$t = markType(BingResourceSet, 'BingResourceSet');
    return BingResourceSet;
}(Base));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var BingResponse = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BingResponse, _super);
    function BingResponse() {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.a = new List$1(BingResourceSet.$, 0);
        return _this;
    }
    BingResponse.$t = markType(BingResponse, 'BingResponse');
    return BingResponse;
}(Base));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicProportionalSymbolSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicProportionalSymbolSeriesBase, _super);
    function GeographicProportionalSymbolSeriesBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicProportionalSymbolSeriesBase.$t = markType(GeographicProportionalSymbolSeriesBase, 'GeographicProportionalSymbolSeriesBase', GeographicMapSeriesHost.$);
    return GeographicProportionalSymbolSeriesBase;
}(GeographicMapSeriesHost));

var IgrGeographicProportionalSymbolSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicProportionalSymbolSeriesBase, _super);
    function IgrGeographicProportionalSymbolSeriesBase(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrGeographicProportionalSymbolSeriesBase.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicProportionalSymbolSeriesBase;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicShapeSeriesBaseBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicShapeSeriesBaseBase, _super);
    function GeographicShapeSeriesBaseBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicShapeSeriesBaseBase.$t = markType(GeographicShapeSeriesBaseBase, 'GeographicShapeSeriesBaseBase', GeographicMapSeriesHost.$);
    return GeographicShapeSeriesBaseBase;
}(GeographicMapSeriesHost));

var IgrGeographicShapeSeriesBaseBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicShapeSeriesBaseBase, _super);
    function IgrGeographicShapeSeriesBaseBase(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrGeographicShapeSeriesBaseBase.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicShapeSeriesBaseBase;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicSymbolSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicSymbolSeriesBase, _super);
    function GeographicSymbolSeriesBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicSymbolSeriesBase.$t = markType(GeographicSymbolSeriesBase, 'GeographicSymbolSeriesBase', GeographicMapSeriesHost.$);
    return GeographicSymbolSeriesBase;
}(GeographicMapSeriesHost));

var IgrGeographicSymbolSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicSymbolSeriesBase, _super);
    function IgrGeographicSymbolSeriesBase(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrGeographicSymbolSeriesBase.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicSymbolSeriesBase;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
var GeographicXYTriangulatingSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GeographicXYTriangulatingSeriesBase, _super);
    function GeographicXYTriangulatingSeriesBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeographicXYTriangulatingSeriesBase.$t = markType(GeographicXYTriangulatingSeriesBase, 'GeographicXYTriangulatingSeriesBase', GeographicMapSeriesHost.$);
    return GeographicXYTriangulatingSeriesBase;
}(GeographicMapSeriesHost));

var IgrGeographicXYTriangulatingSeriesBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrGeographicXYTriangulatingSeriesBase, _super);
    function IgrGeographicXYTriangulatingSeriesBase(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrGeographicXYTriangulatingSeriesBase.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    return IgrGeographicXYTriangulatingSeriesBase;
}(IgrGeographicMapSeriesHost));

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

export { ArcGISOnlineMapImagery, BingMapsImageryStyle, BingMapsImageryStyle_$type, BingMapsMapImagery, BingMapsMapImageryView, BingResourceSet, BingResponse, CustomMapImagery, GeographicContourLineSeries, GeographicContourLineSeriesView, GeographicHighDensityScatterSeries, GeographicHighDensityScatterSeriesView, GeographicMapImagery, GeographicMapImageryView, GeographicMapSeriesHost, GeographicPolylineSeries, GeographicPolylineSeriesView, GeographicProportionalSymbolSeries, GeographicProportionalSymbolSeriesBase, GeographicProportionalSymbolSeriesBaseView, GeographicProportionalSymbolSeriesView, GeographicScatterAreaSeries, GeographicScatterAreaSeriesView, GeographicShapeSeries, GeographicShapeSeriesBase, GeographicShapeSeriesBaseBase, GeographicShapeSeriesBaseBaseView, GeographicShapeSeriesBaseView, GeographicShapeSeriesView, GeographicSymbolSeries, GeographicSymbolSeriesBase, GeographicSymbolSeriesBaseView, GeographicSymbolSeriesView, GeographicTileSeries, GeographicXYTriangulatingSeries, GeographicXYTriangulatingSeriesBase, GeographicXYTriangulatingSeriesBaseView, GeographicXYTriangulatingSeriesView, HostSeriesView, IgrArcGISOnlineMapImagery, IgrArcGISOnlineMapImageryModule, IgrBingMapsMapImagery, IgrBingMapsMapImageryModule, IgrCustomMapImagery, IgrCustomMapImageryModule, IgrGeographicContourLineSeries, IgrGeographicContourLineSeriesModule, IgrGeographicHighDensityScatterSeries, IgrGeographicHighDensityScatterSeriesModule, IgrGeographicMap, IgrGeographicMapCoreModule, IgrGeographicMapImagery, IgrGeographicMapModule, IgrGeographicMapSeriesHost, IgrGeographicPolylineSeries, IgrGeographicPolylineSeriesModule, IgrGeographicProportionalSymbolSeries, IgrGeographicProportionalSymbolSeriesBase, IgrGeographicProportionalSymbolSeriesModule, IgrGeographicScatterAreaSeries, IgrGeographicScatterAreaSeriesModule, IgrGeographicShapeSeries, IgrGeographicShapeSeriesBase, IgrGeographicShapeSeriesBaseBase, IgrGeographicShapeSeriesModule, IgrGeographicSymbolSeries, IgrGeographicSymbolSeriesBase, IgrGeographicSymbolSeriesModule, IgrGeographicTileSeries, IgrGeographicTileSeriesModule, IgrGeographicXYTriangulatingSeries, IgrGeographicXYTriangulatingSeriesBase, IgrImageTilesReadyEventArgs, IgrImagesChangedEventArgs, IgrOpenStreetMapImagery, IgrOpenStreetMapImageryModule, IgrSubDomainsCollection, IgrTileGeneratorMapImagery, IgrTileGeneratorMapImageryModule, IgrTileSeries, IgrTileSeriesModule, ImageTilesReadyEventArgs, ImageryMetadata, ImagesChangedEventArgs, LevelOfDetailResponseModel, MapResizeBehavior, MapResizeBehavior_$type, MapServerResponseModel, OpenStreetMapImagery, SphericalMercatorHorizontalScaler, SphericalMercatorVerticalScaler, SubDomainsCollection, TileGeneratorMapImagery, TileInfoResponseModel, TileSeries, TileSeriesView, TokenResponseModel, XamGeographicMap, XamGeographicMapView };
//# sourceMappingURL=igniteui-react-maps.js.map
