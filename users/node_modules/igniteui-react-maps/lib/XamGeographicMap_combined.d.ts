import { SeriesViewer } from "igniteui-react-charts";
import { IMapRenderDeferralHandler } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { MapResizeBehavior } from "./MapResizeBehavior";
import { Rect } from "igniteui-react-core";
import { Base, Point, Type, INotifyPropertyChanged, PropertyChangedEventArgs, IEnumerable } from "igniteui-react-core";
import { NumericXAxis } from "igniteui-react-charts";
import { NumericYAxis } from "igniteui-react-charts";
import { Control } from "igniteui-react-core";
import { DomRenderer } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Series } from "igniteui-react-charts";
import { SeriesViewerView } from "igniteui-react-charts";
import { ImageTilesReadyEventArgs } from "./ImageTilesReadyEventArgs";
import { FontInfo } from "igniteui-react-core";
import { XamMultiScaleImage } from "igniteui-react-core";
import { XamMultiScaleTileSource } from "igniteui-react-core";
import { DownloadingMultiScaleImageEventArgs } from "igniteui-react-core";
import { CancellingMultiScaleImageEventArgs } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { ImagesChangedEventArgs } from "./ImagesChangedEventArgs";
import { HostSeriesView } from "./HostSeriesView";
import { GeographicMapSeriesHost } from "./GeographicMapSeriesHost";
import { ScatterAreaSeries } from "igniteui-react-charts";
import { InteractionState } from "igniteui-react-core";
import { SeriesView } from "igniteui-react-charts";
import { ColorScale } from "igniteui-react-charts";
import { TriangulationStatusEventArgs } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class XamGeographicMap extends SeriesViewer implements IMapRenderDeferralHandler {
    static $t: Type;
    constructor();
    private nv;
    provideContainer(a: any): void;
    hs(): void;
    c3(): boolean;
    c4(): boolean;
    no: boolean;
    static ni: MapResizeBehavior;
    nj: MapResizeBehavior;
    static oz: Rect;
    nr: number;
    nn: boolean;
    nm: boolean;
    pf: Rect;
    private oy;
    o3: Rect;
    o7(): Rect;
    private ob;
    private pd;
    backgroundContent: GeographicMapImagery;
    private nf;
    nc: NumericXAxis;
    private nb;
    ne: NumericYAxis;
    private nd;
    nh: GeographicMapImagery;
    private static o2;
    getZoomRectFromGeoRect(a: Rect): Rect;
    ol(a: Rect): void;
    ok(a: Rect): void;
    getZoomFromGeographicRect(a: Rect): Rect;
    o4(a: Rect, b: number): Rect;
    private o5;
    getZoomFromGeographicPoints(a: Point, b: Point): Rect;
    o9(a: Rect): Rect;
    ov(a: Point): Point;
    ow(a: Point): Point;
    ox(a: Point): Point;
    n8(): void;
    oe(a: Brush): void;
    mb(a: number): Brush;
    mc(a: number): Brush;
    dh(): boolean;
    og(): void;
    protected ou: Point;
    protected oj(): void;
    protected of(): void;
    protected get_cx(): boolean;
    protected o1: Rect;
    protected ms(): Rect;
    private o6;
    protected mt(a: Rect): Rect;
    o8(a: Rect): Rect;
    protected bm(): SeriesViewerView;
    l7(a: number): Brush;
    md(a: number): Brush;
    private oa;
    protected i2(a: SeriesViewerView): void;
    jd(a: Rect, b: Rect): void;
    nt: number;
    private nq;
    ns: number;
    eg(): number;
    eh(): number;
    protected ka(): void;
    protected je(a: any, b: string, c: any, d: any): void;
    imageTilesReady: (sender: any, e: ImageTilesReadyEventArgs) => void;
    private oc;
    private oh;
    private oi;
    nk: XamGeographicMapView;
    private nl;
    getFontInfo(): FontInfo;
    l6(): Brush;
    getFontBrush(): Brush;
    protected j5(a: Series, b: any): void;
    register(a: DependencyObject, b: (arg1: boolean) => void): void;
    unRegister(a: DependencyObject): void;
    deferredRefresh(): void;
    deferAction(a: () => void): void;
    n9(a: boolean): void;
    nw(): any;
    my(a: Rect, b: Rect, c: Rect): Rect;
    od(): void;
    private o0;
    protected pe: Rect;
    on(a: Rect): void;
    private om;
    readonly np: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class GeographicMapImagery extends Control implements INotifyPropertyChanged {
    static $t: Type;
    constructor(a: XamMultiScaleTileSource);
    protected a9(a: GeographicMapImageryView): void;
    protected ai(): GeographicMapImageryView;
    protected aj: GeographicMapImageryView;
    private ak;
    deferralHandler: IMapRenderDeferralHandler;
    private a3;
    a7(): void;
    private a1;
    private a0;
    private be;
    protected a8(a: string, b: any, c: any): void;
    windowRect: Rect;
    geographicMap: XamGeographicMap;
    static readonly geographicMapProperty: DependencyProperty;
    private static a6;
    private a5;
    clearTileCache(): void;
    imageTilesReady: (sender: any, e: ImageTilesReadyEventArgs) => void;
    private an;
    ao: XamMultiScaleImage;
    ap: XamMultiScaleTileSource;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    bk(a: Size): Size;
    bb(a: RenderingContext): void;
    bd(a: Rect): void;
    bc(a: DomRenderer): void;
    imagesChanged: (sender: any, e: ImagesChangedEventArgs) => void;
    private a2;
    a4(): void;
    ba(a: number): void;
    protected v(): void;
    cancellingImage: (sender: any, args: CancellingMultiScaleImageEventArgs) => void;
    downloadingImage: (sender: any, args: DownloadingMultiScaleImageEventArgs) => void;
    referer: string;
    userAgent: string;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class GeographicMapImageryView extends Base {
    static $t: Type;
    constructor(a: GeographicMapImagery);
    protected a: GeographicMapImagery;
    e(): void;
    protected j: Rect;
    f(a: RenderingContext): void;
    private d;
    g(a: DomRenderer): void;
    h(a: Rect): void;
    private b;
    readonly c: number;
    i(a: number): void;
}
/**
 * @hidden
 */
export declare class GeographicXYTriangulatingSeriesView extends HostSeriesView {
    static $t: Type;
    constructor(a: GeographicXYTriangulatingSeries);
    protected b0: GeographicXYTriangulatingSeries;
    bv(): void;
    b3(): void;
    b2(): void;
    b1(): void;
    b4(): void;
    b5(): void;
    b6(): void;
    b7(): void;
}
/**
 * @hidden
 */
export declare class GeographicScatterAreaSeriesView extends GeographicXYTriangulatingSeriesView {
    static $t: Type;
    constructor(a: GeographicScatterAreaSeries);
    private b8;
    bv(): void;
    b9(): void;
    ca(): void;
}
/**
 * @hidden
 */
export declare class XamGeographicMapView extends SeriesViewerView {
    static $t: Type;
    constructor(a: XamGeographicMap);
    k(a: boolean): InteractionState;
    bi(a: boolean): void;
    protected fe: XamGeographicMap;
    protected get_an(): boolean;
    dx(): void;
    fq(a: number): Brush;
    fr(a: number): Brush;
    fp(a: number): Brush;
    fs(a: number): Brush;
    dm(a: RenderingContext): void;
    protected fu: Rect;
    protected dn(a: Rect): void;
    ft(): Rect;
    fj(): void;
    fo: Brush;
    fn: Brush;
    ff: FontInfo;
    fi(a: Rect): void;
    fl(a: GeographicMapImagery, b: GeographicMapImagery): void;
    private fk;
    protected du(): void;
    fm(a: number): void;
    private fg;
    fh: number;
}
/**
 * @hidden
 */
export declare class OpenStreetMapImagery extends GeographicMapImagery {
    static $t: Type;
    constructor();
    tilePath: string;
    static readonly tilePathProperty: DependencyProperty;
    private static bo;
    private bn;
}
/**
 * @hidden
 */
export declare abstract class GeographicXYTriangulatingSeries extends GeographicMapSeriesHost {
    static $t: Type;
    protected bf(): SeriesView;
    iv(a: SeriesView): void;
    mb: GeographicXYTriangulatingSeriesView;
    mf: string;
    md: string;
    mc: IEnumerable;
    mi: string;
    mk: string;
    mm: string;
    protected i0(a: any, b: string, c: any, d: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class GeographicScatterAreaSeries extends GeographicXYTriangulatingSeries {
    static $t: Type;
    constructor();
    mz: string;
    private mu;
    mv: ColorScale;
    mw: ScatterAreaSeries;
    protected l2(): Series;
    private m2;
    protected bf(): SeriesView;
    iv(a: SeriesView): void;
    my: GeographicScatterAreaSeriesView;
    protected i0(a: any, b: string, c: any, d: any): void;
    triangulationStatusChanged: (sender: any, args: TriangulationStatusEventArgs) => void;
    protected get_dq(): boolean;
    protected set_dq(a: boolean): void;
    static $$p: string[];
}
