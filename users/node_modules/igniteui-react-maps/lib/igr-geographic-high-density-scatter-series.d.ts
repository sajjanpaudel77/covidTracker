import { IgrProgressiveLoadStatusEventArgs } from "igniteui-react-charts";
import { IgrGeographicMapSeriesHost, IIgrGeographicMapSeriesHostProps } from "./igr-geographic-map-series-host";
import { GeographicHighDensityScatterSeries } from "./GeographicHighDensityScatterSeries";
/**
 * Series class for a geographic map with points marked at given locations.
 * This is the geographic equivalent of a HighDensityScatterSeries.
*/
export declare class IgrGeographicHighDensityScatterSeries extends IgrGeographicMapSeriesHost<IIgrGeographicHighDensityScatterSeriesProps> {
    protected createImplementation(): GeographicHighDensityScatterSeries;
    /**
                                 * @hidden
                                 */
    readonly i: GeographicHighDensityScatterSeries;
    constructor(props: IIgrGeographicHighDensityScatterSeriesProps);
    /**
     * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
    */
    latitudeMemberPath: string;
    /**
     * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
    */
    longitudeMemberPath: string;
    /**
     * Gets or sets the whether to use use brute force mode.
    */
    useBruteForce: boolean;
    /**
     * Gets or sets the whether to progressively load the data into the chart.
    */
    progressiveLoad: boolean;
    /**
     * Gets or sets the whether the chart reacts to mouse move events.
    */
    mouseOverEnabled: boolean;
    /**
     * Gets or sets the density value that maps to the minimum heat color.
    */
    heatMinimum: number;
    /**
     * Gets or sets the value that maps to the maximum heat color.
    */
    heatMaximum: number;
    /**
     * Gets or sets the color to use for the minimum end of the scale.
    */
    heatMinimumColor: string;
    /**
     * Gets or sets the color to use for the maximum end of the scale.
    */
    heatMaximumColor: string;
    /**
     * Gets or sets the the pixel extent of the square data points that are rendered.
    */
    pointExtent: number;
    /**
     * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
    */
    progressiveStatus: number;
    private _progressiveLoadStatusChanged;
    private _progressiveLoadStatusChanged_wrapped;
    /**
     * Raised when the progressive loading state of the series has changed.
    */
    progressiveLoadStatusChanged: (s: IgrGeographicHighDensityScatterSeries, e: IgrProgressiveLoadStatusEventArgs) => void;
}
export interface IIgrGeographicHighDensityScatterSeriesProps extends IIgrGeographicMapSeriesHostProps {
    /**
     * The name of the property of ItemsSource items which contains the latitude coordinate of the symbol.
    */
    latitudeMemberPath?: string;
    /**
     * The name of the property of ItemsSource items which contains the longitude coordinate of the symbol.
    */
    longitudeMemberPath?: string;
    /**
     * Gets or sets the whether to use use brute force mode.
    */
    useBruteForce?: boolean | string;
    /**
     * Gets or sets the whether to progressively load the data into the chart.
    */
    progressiveLoad?: boolean | string;
    /**
     * Gets or sets the whether the chart reacts to mouse move events.
    */
    mouseOverEnabled?: boolean | string;
    /**
     * Gets or sets the density value that maps to the minimum heat color.
    */
    heatMinimum?: number | string;
    /**
     * Gets or sets the value that maps to the maximum heat color.
    */
    heatMaximum?: number | string;
    /**
     * Gets or sets the color to use for the minimum end of the scale.
    */
    heatMinimumColor?: string;
    /**
     * Gets or sets the color to use for the maximum end of the scale.
    */
    heatMaximumColor?: string;
    /**
     * Gets or sets the the pixel extent of the square data points that are rendered.
    */
    pointExtent?: number | string;
    /**
     * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
    */
    progressiveStatus?: number | string;
    /**
     * Raised when the progressive loading state of the series has changed.
    */
    progressiveLoadStatusChanged?: (s: IgrGeographicHighDensityScatterSeries, e: IgrProgressiveLoadStatusEventArgs) => void;
}
